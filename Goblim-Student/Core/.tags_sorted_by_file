!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
BilateralFilter	Effects/BilateralFilter/BilateralFilter.cpp	/^BilateralFilter::BilateralFilter(std::string name,int bSize, int size):$/;"	f	class:BilateralFilter
apply	Effects/BilateralFilter/BilateralFilter.cpp	/^void BilateralFilter::apply(GPUFBO *in)$/;"	f	class:BilateralFilter
~BilateralFilter	Effects/BilateralFilter/BilateralFilter.cpp	/^BilateralFilter::~BilateralFilter()$/;"	f	class:BilateralFilter
BilateralFilter	Effects/BilateralFilter/BilateralFilter.h	/^class BilateralFilter : public EffectGL$/;"	c
_GOBLIM_BILATERAL_FILTER_	Effects/BilateralFilter/BilateralFilter.h	2;"	d
blurHorizontal	Effects/BilateralFilter/BilateralFilter.h	/^		GLProgram *blurHorizontal;$/;"	m	class:BilateralFilter
blurSize	Effects/BilateralFilter/BilateralFilter.h	/^		int blurSize;$/;"	m	class:BilateralFilter
blurVertical	Effects/BilateralFilter/BilateralFilter.h	/^		GLProgram *blurVertical;$/;"	m	class:BilateralFilter
fboSize	Effects/BilateralFilter/BilateralFilter.h	/^		int fboSize;$/;"	m	class:BilateralFilter
temp	Effects/BilateralFilter/BilateralFilter.h	/^		GPUFBO *temp;$/;"	m	class:BilateralFilter
texSamplerH	Effects/BilateralFilter/BilateralFilter.h	/^		GPUsampler *texSamplerH,*texSamplerV;$/;"	m	class:BilateralFilter
texSamplerV	Effects/BilateralFilter/BilateralFilter.h	/^		GPUsampler *texSamplerH,*texSamplerV;$/;"	m	class:BilateralFilter
texSizeH	Effects/BilateralFilter/BilateralFilter.h	/^		GPUfloat *texSizeH,*texSizeV;$/;"	m	class:BilateralFilter
texSizeV	Effects/BilateralFilter/BilateralFilter.h	/^		GPUfloat *texSizeH,*texSizeV;$/;"	m	class:BilateralFilter
vp	Effects/BilateralFilter/BilateralFilter.h	/^		GLProgram *vp;$/;"	m	class:BilateralFilter
Bloom	Effects/Bloom/Bloom.cpp	/^Bloom::Bloom(std::string name,int finalsize,float vbloomTreshold):$/;"	f	class:Bloom
apply	Effects/Bloom/Bloom.cpp	/^void Bloom::apply(GPUFBO *in,GPUFBO *out)$/;"	f	class:Bloom
setBloomTreshold	Effects/Bloom/Bloom.cpp	/^void Bloom::setBloomTreshold(float v)$/;"	f	class:Bloom
~Bloom	Effects/Bloom/Bloom.cpp	/^Bloom::~Bloom()$/;"	f	class:Bloom
Bloom	Effects/Bloom/Bloom.h	/^class Bloom : public EffectGL$/;"	c
_GOBLIM_BLOOM_EFFECT_	Effects/Bloom/Bloom.h	2;"	d
bBuffers	Effects/Bloom/Bloom.h	/^		GPUFBO* bBuffers[4];$/;"	m	class:Bloom
bloom	Effects/Bloom/Bloom.h	/^		GLProgram *bloom,*copy,*pass;$/;"	m	class:Bloom
bloomSampler	Effects/Bloom/Bloom.h	/^		GPUsampler *bloomSampler,*bloomSampler1,*bloomSampler2,*bloomSampler3,*fboIn;$/;"	m	class:Bloom
bloomSampler1	Effects/Bloom/Bloom.h	/^		GPUsampler *bloomSampler,*bloomSampler1,*bloomSampler2,*bloomSampler3,*fboIn;$/;"	m	class:Bloom
bloomSampler2	Effects/Bloom/Bloom.h	/^		GPUsampler *bloomSampler,*bloomSampler1,*bloomSampler2,*bloomSampler3,*fboIn;$/;"	m	class:Bloom
bloomSampler3	Effects/Bloom/Bloom.h	/^		GPUsampler *bloomSampler,*bloomSampler1,*bloomSampler2,*bloomSampler3,*fboIn;$/;"	m	class:Bloom
bloomTreshold	Effects/Bloom/Bloom.h	/^		GPUfloat *bloomTreshold;$/;"	m	class:Bloom
blur	Effects/Bloom/Bloom.h	/^		BilateralFilter* blur[4];$/;"	m	class:Bloom
copy	Effects/Bloom/Bloom.h	/^		GLProgram *bloom,*copy,*pass;$/;"	m	class:Bloom
fboIn	Effects/Bloom/Bloom.h	/^		GPUsampler *bloomSampler,*bloomSampler1,*bloomSampler2,*bloomSampler3,*fboIn;$/;"	m	class:Bloom
fboSize	Effects/Bloom/Bloom.h	/^		int fboSize;$/;"	m	class:Bloom
m_bloomTreshold	Effects/Bloom/Bloom.h	/^		float m_bloomTreshold ;$/;"	m	class:Bloom
numBuffers	Effects/Bloom/Bloom.h	/^		int numBuffers;$/;"	m	class:Bloom
pass	Effects/Bloom/Bloom.h	/^		GLProgram *bloom,*copy,*pass;$/;"	m	class:Bloom
temp	Effects/Bloom/Bloom.h	/^		GPUFBO *temp;$/;"	m	class:Bloom
vp	Effects/Bloom/Bloom.h	/^		GLProgram *vp;$/;"	m	class:Bloom
Composition	Effects/Composition/Composition.cpp	/^Composition::Composition(std::string name, int size):$/;"	f	class:Composition
apply	Effects/Composition/Composition.cpp	/^void Composition::apply()$/;"	f	class:Composition
~Composition	Effects/Composition/Composition.cpp	/^Composition::~Composition()$/;"	f	class:Composition
Composition	Effects/Composition/Composition.h	/^class Composition : public EffectGL$/;"	c
LightScatterSampler	Effects/Composition/Composition.h	/^		GPUsampler *LightScatterSampler,*colorSampler,*bloomSampler,*ssaoSampler,*depthSampler;$/;"	m	class:Composition
_GOBLIM_COMPOSITION_EFFECT_	Effects/Composition/Composition.h	2;"	d
bloomAmount	Effects/Composition/Composition.h	/^		GPUfloat *bloomAmount;$/;"	m	class:Composition
bloomFbo	Effects/Composition/Composition.h	/^		GPUFBO *bloomFbo,*colorFbo,*lightFbo,*ssaoFbo;$/;"	m	class:Composition
bloomSampler	Effects/Composition/Composition.h	/^		GPUsampler *LightScatterSampler,*colorSampler,*bloomSampler,*ssaoSampler,*depthSampler;$/;"	m	class:Composition
colorFbo	Effects/Composition/Composition.h	/^		GPUFBO *bloomFbo,*colorFbo,*lightFbo,*ssaoFbo;$/;"	m	class:Composition
colorSampler	Effects/Composition/Composition.h	/^		GPUsampler *LightScatterSampler,*colorSampler,*bloomSampler,*ssaoSampler,*depthSampler;$/;"	m	class:Composition
depthSampler	Effects/Composition/Composition.h	/^		GPUsampler *LightScatterSampler,*colorSampler,*bloomSampler,*ssaoSampler,*depthSampler;$/;"	m	class:Composition
fp	Effects/Composition/Composition.h	/^		GLProgram *fp;$/;"	m	class:Composition
lightFbo	Effects/Composition/Composition.h	/^		GPUFBO *bloomFbo,*colorFbo,*lightFbo,*ssaoFbo;$/;"	m	class:Composition
ssaoFbo	Effects/Composition/Composition.h	/^		GPUFBO *bloomFbo,*colorFbo,*lightFbo,*ssaoFbo;$/;"	m	class:Composition
ssaoSampler	Effects/Composition/Composition.h	/^		GPUsampler *LightScatterSampler,*colorSampler,*bloomSampler,*ssaoSampler,*depthSampler;$/;"	m	class:Composition
vp	Effects/Composition/Composition.h	/^		GLProgram *vp;$/;"	m	class:Composition
DisplayImage	Effects/DisplayImage/DisplayImage.cpp	/^DisplayImage::DisplayImage(std::string name):$/;"	f	class:DisplayImage
display	Effects/DisplayImage/DisplayImage.cpp	/^void DisplayImage::display(const glm::vec4 & box)$/;"	f	class:DisplayImage
~DisplayImage	Effects/DisplayImage/DisplayImage.cpp	/^DisplayImage::~DisplayImage()$/;"	f	class:DisplayImage
DisplayImage	Effects/DisplayImage/DisplayImage.h	/^class DisplayImage : public EffectGL$/;"	c
_GOBLIM_DISPLAYIMAGE_EFFECT_	Effects/DisplayImage/DisplayImage.h	2;"	d
displaybox	Effects/DisplayImage/DisplayImage.h	/^		GPUvec4* displaybox;$/;"	m	class:DisplayImage
fp	Effects/DisplayImage/DisplayImage.h	/^		GLProgram *fp;$/;"	m	class:DisplayImage
res	Effects/DisplayImage/DisplayImage.h	/^		GPUimage* res;$/;"	m	class:DisplayImage
vp	Effects/DisplayImage/DisplayImage.h	/^		GLProgram *vp;$/;"	m	class:DisplayImage
DisplayLayer	Effects/DisplayLayer/DisplayLayer.cpp	/^DisplayLayer::DisplayLayer(std::string name):$/;"	f	class:DisplayLayer
display	Effects/DisplayLayer/DisplayLayer.cpp	/^void DisplayLayer::display(const glm::vec4 & box, int layer)$/;"	f	class:DisplayLayer
~DisplayLayer	Effects/DisplayLayer/DisplayLayer.cpp	/^DisplayLayer::~DisplayLayer()$/;"	f	class:DisplayLayer
DisplayLayer	Effects/DisplayLayer/DisplayLayer.h	/^class DisplayLayer : public EffectGL$/;"	c
_GOBLIM_DISPLAYLAYER_EFFECT_	Effects/DisplayLayer/DisplayLayer.h	2;"	d
displaybox	Effects/DisplayLayer/DisplayLayer.h	/^		GPUvec4* displaybox;$/;"	m	class:DisplayLayer
fp	Effects/DisplayLayer/DisplayLayer.h	/^		GLProgram *fp;$/;"	m	class:DisplayLayer
layer_bound	Effects/DisplayLayer/DisplayLayer.h	/^		GPUint*	layer_bound;$/;"	m	class:DisplayLayer
res	Effects/DisplayLayer/DisplayLayer.h	/^		GPUsampler* res;$/;"	m	class:DisplayLayer
vp	Effects/DisplayLayer/DisplayLayer.h	/^		GLProgram *vp;$/;"	m	class:DisplayLayer
DisplayResource	Effects/DisplayResource/DisplayResource.cpp	/^DisplayResource::DisplayResource(std::string name):$/;"	f	class:DisplayResource
display	Effects/DisplayResource/DisplayResource.cpp	/^void DisplayResource::display(const glm::vec4 & box)$/;"	f	class:DisplayResource
~DisplayResource	Effects/DisplayResource/DisplayResource.cpp	/^DisplayResource::~DisplayResource()$/;"	f	class:DisplayResource
DisplayResource	Effects/DisplayResource/DisplayResource.h	/^class DisplayResource : public EffectGL$/;"	c
_GOBLIM_DISPLAYRESOURCE_EFFECT_	Effects/DisplayResource/DisplayResource.h	2;"	d
displaybox	Effects/DisplayResource/DisplayResource.h	/^		GPUvec4* displaybox;$/;"	m	class:DisplayResource
fp	Effects/DisplayResource/DisplayResource.h	/^		GLProgram *fp;$/;"	m	class:DisplayResource
res	Effects/DisplayResource/DisplayResource.h	/^		GPUsampler* res;$/;"	m	class:DisplayResource
vp	Effects/DisplayResource/DisplayResource.h	/^		GLProgram *vp;$/;"	m	class:DisplayResource
LightScattering	Effects/LightScattering/LightScattering.cpp	/^LightScattering::LightScattering(std::string name, int size,float exposure,float decay,float density,float weight):$/;"	f	class:LightScattering
apply	Effects/LightScattering/LightScattering.cpp	/^void LightScattering::apply(GPUFBO *fbo,glm::vec2 lightPos)$/;"	f	class:LightScattering
setDecay	Effects/LightScattering/LightScattering.cpp	/^void LightScattering::setDecay(float v)$/;"	f	class:LightScattering
setDensity	Effects/LightScattering/LightScattering.cpp	/^void LightScattering::setDensity(float v)$/;"	f	class:LightScattering
setExposure	Effects/LightScattering/LightScattering.cpp	/^void LightScattering::setExposure(float v)$/;"	f	class:LightScattering
setWeight	Effects/LightScattering/LightScattering.cpp	/^void LightScattering::setWeight(float v)$/;"	f	class:LightScattering
~LightScattering	Effects/LightScattering/LightScattering.cpp	/^LightScattering::~LightScattering()$/;"	f	class:LightScattering
LightScattering	Effects/LightScattering/LightScattering.h	/^class LightScattering : public EffectGL$/;"	c
_GOBLIM_LIGHTSCATTERING_EFFECT_	Effects/LightScattering/LightScattering.h	2;"	d
decay	Effects/LightScattering/LightScattering.h	/^		GPUfloat *exposure,*decay,*density,*weight;$/;"	m	class:LightScattering
density	Effects/LightScattering/LightScattering.h	/^		GPUfloat *exposure,*decay,*density,*weight;$/;"	m	class:LightScattering
exposure	Effects/LightScattering/LightScattering.h	/^		GPUfloat *exposure,*decay,*density,*weight;$/;"	m	class:LightScattering
fboIn	Effects/LightScattering/LightScattering.h	/^		GPUsampler *lightBuffer,*fboIn;$/;"	m	class:LightScattering
lightBuffer	Effects/LightScattering/LightScattering.h	/^		GPUsampler *lightBuffer,*fboIn;$/;"	m	class:LightScattering
lightScatter	Effects/LightScattering/LightScattering.h	/^		GLProgram *pass,*lightScatter;$/;"	m	class:LightScattering
lightScatterBuffer	Effects/LightScattering/LightScattering.h	/^		GPUFBO *lightScatterBuffer;$/;"	m	class:LightScattering
lightScreenPos	Effects/LightScattering/LightScattering.h	/^		GPUvec2 *lightScreenPos;$/;"	m	class:LightScattering
pass	Effects/LightScattering/LightScattering.h	/^		GLProgram *pass,*lightScatter;$/;"	m	class:LightScattering
vp	Effects/LightScattering/LightScattering.h	/^		GLProgram *vp;$/;"	m	class:LightScattering
weight	Effects/LightScattering/LightScattering.h	/^		GPUfloat *exposure,*decay,*density,*weight;$/;"	m	class:LightScattering
SSAO	Effects/SSAO/SSAO.cpp	/^SSAO::SSAO(std::string name, int size):$/;"	f	class:SSAO
apply	Effects/SSAO/SSAO.cpp	/^void SSAO::apply()$/;"	f	class:SSAO
computeSSAO	Effects/SSAO/SSAO.cpp	/^void SSAO::computeSSAO(NodeCollector* collector)$/;"	f	class:SSAO
setAttenuation	Effects/SSAO/SSAO.cpp	/^void SSAO::setAttenuation(glm::vec2 f)$/;"	f	class:SSAO
setOccluderBias	Effects/SSAO/SSAO.cpp	/^void SSAO::setOccluderBias(float f)$/;"	f	class:SSAO
setSamplingRadius	Effects/SSAO/SSAO.cpp	/^void SSAO::setSamplingRadius(float f)$/;"	f	class:SSAO
~SSAO	Effects/SSAO/SSAO.cpp	/^SSAO::~SSAO()$/;"	f	class:SSAO
SSAO	Effects/SSAO/SSAO.h	/^class SSAO : public EffectGL$/;"	c
attenuation	Effects/SSAO/SSAO.h	/^		GPUvec2 *attenuation;$/;"	m	class:SSAO
blur	Effects/SSAO/SSAO.h	/^		BilateralFilter* blur;$/;"	m	class:SSAO
fboSize	Effects/SSAO/SSAO.h	/^		int fboSize;$/;"	m	class:SSAO
noise	Effects/SSAO/SSAO.h	/^		GPUTexture2D* noise;$/;"	m	class:SSAO
normalFBO	Effects/SSAO/SSAO.h	/^		GPUFBO* normalFBO,*ssaoFBO;$/;"	m	class:SSAO
normalMapSampler	Effects/SSAO/SSAO.h	/^		GPUsampler *normalMapSampler,*randomMapSampler;$/;"	m	class:SSAO
normalMat	Effects/SSAO/SSAO.h	/^		NormalMaterial *normalMat;$/;"	m	class:SSAO
occluderBias	Effects/SSAO/SSAO.h	/^		GPUfloat *occluderBias,*samplingRadius;$/;"	m	class:SSAO
randomMapSampler	Effects/SSAO/SSAO.h	/^		GPUsampler *normalMapSampler,*randomMapSampler;$/;"	m	class:SSAO
samplingRadius	Effects/SSAO/SSAO.h	/^		GPUfloat *occluderBias,*samplingRadius;$/;"	m	class:SSAO
scene	Effects/SSAO/SSAO.h	/^		Scene *scene;$/;"	m	class:SSAO
ssaoFBO	Effects/SSAO/SSAO.h	/^		GPUFBO* normalFBO,*ssaoFBO;$/;"	m	class:SSAO
ssaoShader	Effects/SSAO/SSAO.h	/^		GLProgram *ssaoShader;$/;"	m	class:SSAO
texelSize	Effects/SSAO/SSAO.h	/^		GPUvec2 *texelSize;$/;"	m	class:SSAO
vp	Effects/SSAO/SSAO.h	/^		GLProgram *vp;$/;"	m	class:SSAO
Animator	Engine/Base/Animator.cpp	/^Animator::Animator(Frame* f)$/;"	f	class:Animator
draw	Engine/Base/Animator.cpp	/^void Animator::draw()$/;"	f	class:Animator
reference	Engine/Base/Animator.cpp	/^Frame* Animator::reference()$/;"	f	class:Animator
setReference	Engine/Base/Animator.cpp	/^void Animator::setReference(Frame* f)$/;"	f	class:Animator
~Animator	Engine/Base/Animator.cpp	/^Animator::~Animator()$/;"	f	class:Animator
Animator	Engine/Base/Animator.h	/^class Animator$/;"	c
__ANIMATOR_H__	Engine/Base/Animator.h	2;"	d
m_reference	Engine/Base/Animator.h	/^	Frame* m_reference;$/;"	m	class:Animator
RotationAnimator	Engine/Base/Animators/RotationAnimator.cpp	/^RotationAnimator::RotationAnimator(Frame* f, double t, glm::vec3 a) : Animator(f), m_rotationTime(t), axis(a)$/;"	f	class:RotationAnimator
animate	Engine/Base/Animators/RotationAnimator.cpp	/^void RotationAnimator::animate(const double elapsedTime, Frame* f)$/;"	f	class:RotationAnimator
getAxis	Engine/Base/Animators/RotationAnimator.cpp	/^glm::vec3 RotationAnimator::getAxis() const$/;"	f	class:RotationAnimator
getRotationTime	Engine/Base/Animators/RotationAnimator.cpp	/^double RotationAnimator::getRotationTime() const$/;"	f	class:RotationAnimator
setAxis	Engine/Base/Animators/RotationAnimator.cpp	/^void RotationAnimator::setAxis(glm::vec3 a)$/;"	f	class:RotationAnimator
setRotationTime	Engine/Base/Animators/RotationAnimator.cpp	/^void RotationAnimator::setRotationTime(const double t)$/;"	f	class:RotationAnimator
~RotationAnimator	Engine/Base/Animators/RotationAnimator.cpp	/^RotationAnimator::~RotationAnimator()$/;"	f	class:RotationAnimator
RotationAnimator	Engine/Base/Animators/RotationAnimator.h	/^class RotationAnimator : public Animator$/;"	c
__ROTATION_ANIMATOR_H__	Engine/Base/Animators/RotationAnimator.h	2;"	d
axis	Engine/Base/Animators/RotationAnimator.h	/^	glm::vec3 axis;$/;"	m	class:RotationAnimator
m_rotationTime	Engine/Base/Animators/RotationAnimator.h	/^	double m_rotationTime; \/\/ in millisecond$/;"	m	class:RotationAnimator
BoundingBox	Engine/Base/BoundingBox/BoundingBox.cpp	/^BoundingBox::BoundingBox(Node* n):$/;"	f	class:BoundingBox
computeWorldAABB	Engine/Base/BoundingBox/BoundingBox.cpp	/^void BoundingBox::computeWorldAABB()$/;"	f	class:BoundingBox
getMaxValues	Engine/Base/BoundingBox/BoundingBox.cpp	/^glm::vec3 BoundingBox::getMaxValues()$/;"	f	class:BoundingBox
getMinValues	Engine/Base/BoundingBox/BoundingBox.cpp	/^glm::vec3 BoundingBox::getMinValues()$/;"	f	class:BoundingBox
setModel	Engine/Base/BoundingBox/BoundingBox.cpp	/^void BoundingBox::setModel(Model *m)$/;"	f	class:BoundingBox
~BoundingBox	Engine/Base/BoundingBox/BoundingBox.cpp	/^BoundingBox::~BoundingBox() {}$/;"	f	class:BoundingBox
BoundingBox	Engine/Base/BoundingBox/BoundingBox.h	/^class BoundingBox$/;"	c
_BOUNDINGBOX_H	Engine/Base/BoundingBox/BoundingBox.h	2;"	d
listModelVertices	Engine/Base/BoundingBox/BoundingBox.h	/^	std::vector < glm::vec3 > listModelVertices;$/;"	m	class:BoundingBox
maxBox	Engine/Base/BoundingBox/BoundingBox.h	/^	glm::vec3 minBox,maxBox;$/;"	m	class:BoundingBox
minBox	Engine/Base/BoundingBox/BoundingBox.h	/^	glm::vec3 minBox,maxBox;$/;"	m	class:BoundingBox
node	Engine/Base/BoundingBox/BoundingBox.h	/^	Node *node;$/;"	m	class:BoundingBox
GeometricBoundingBox	Engine/Base/BoundingBox/GeometricBoundingBox.cpp	/^GeometricBoundingBox::GeometricBoundingBox(GeometricModel* G):$/;"	f	class:GeometricBoundingBox
compute	Engine/Base/BoundingBox/GeometricBoundingBox.cpp	/^void GeometricBoundingBox::compute()$/;"	f	class:GeometricBoundingBox
compute	Engine/Base/BoundingBox/GeometricBoundingBox.cpp	/^void GeometricBoundingBox::compute(const glm::vec3 & minval, const glm::vec3 & maxval)$/;"	f	class:GeometricBoundingBox
getMaxValues	Engine/Base/BoundingBox/GeometricBoundingBox.cpp	/^glm::vec3 GeometricBoundingBox::getMaxValues()$/;"	f	class:GeometricBoundingBox
getMinValues	Engine/Base/BoundingBox/GeometricBoundingBox.cpp	/^glm::vec3 GeometricBoundingBox::getMinValues()$/;"	f	class:GeometricBoundingBox
getVertices	Engine/Base/BoundingBox/GeometricBoundingBox.cpp	/^std::vector <glm::vec3> GeometricBoundingBox::getVertices()$/;"	f	class:GeometricBoundingBox
~GeometricBoundingBox	Engine/Base/BoundingBox/GeometricBoundingBox.cpp	/^GeometricBoundingBox::~GeometricBoundingBox() {}$/;"	f	class:GeometricBoundingBox
GeometricBoundingBox	Engine/Base/BoundingBox/GeometricBoundingBox.h	/^class GeometricBoundingBox$/;"	c
_GEOMETRICBOUNDINGBOX_H	Engine/Base/BoundingBox/GeometricBoundingBox.h	2;"	d
maxBox	Engine/Base/BoundingBox/GeometricBoundingBox.h	/^	glm::vec3 minBox,maxBox;$/;"	m	class:GeometricBoundingBox
minBox	Engine/Base/BoundingBox/GeometricBoundingBox.h	/^	glm::vec3 minBox,maxBox;$/;"	m	class:GeometricBoundingBox
model	Engine/Base/BoundingBox/GeometricBoundingBox.h	/^	GeometricModel *model;$/;"	m	class:GeometricBoundingBox
vertices	Engine/Base/BoundingBox/GeometricBoundingBox.h	/^	std::vector < glm::vec3 > vertices;$/;"	m	class:GeometricBoundingBox
Camera	Engine/Base/Camera.cpp	/^Camera::Camera(std::string name)$/;"	f	class:Camera
convertDirFrom	Engine/Base/Camera.cpp	/^glm::vec3 Camera::convertDirFrom(glm::vec3 & d,Frame*f)$/;"	f	class:Camera
convertDirTo	Engine/Base/Camera.cpp	/^glm::vec3 Camera::convertDirTo(glm::vec3 d,Frame *f)$/;"	f	class:Camera
convertPtFrom	Engine/Base/Camera.cpp	/^glm::vec3 Camera::convertPtFrom(glm::vec3 p,Frame*f)$/;"	f	class:Camera
convertPtTo	Engine/Base/Camera.cpp	/^glm::vec3 Camera::convertPtTo(glm::vec3 p,Frame *f)$/;"	f	class:Camera
getAspectRatio	Engine/Base/Camera.cpp	/^float Camera::getAspectRatio()$/;"	f	class:Camera
getFoV	Engine/Base/Camera.cpp	/^float Camera::getFoV()$/;"	f	class:Camera
getFrame	Engine/Base/Camera.cpp	/^Frame *Camera::getFrame()$/;"	f	class:Camera
getModelViewMatrix	Engine/Base/Camera.cpp	/^glm::mat4 Camera::getModelViewMatrix(Frame *f)$/;"	f	class:Camera
getName	Engine/Base/Camera.cpp	/^const std::string Camera::getName()$/;"	f	class:Camera
getProjectionMatrix	Engine/Base/Camera.cpp	/^glm::mat4 Camera::getProjectionMatrix()$/;"	f	class:Camera
getZfar	Engine/Base/Camera.cpp	/^float Camera::getZfar()$/;"	f	class:Camera
getZnear	Engine/Base/Camera.cpp	/^float Camera::getZnear()$/;"	f	class:Camera
link	Engine/Base/Camera.cpp	/^void Camera::link(Frame *f)$/;"	f	class:Camera
lookAt	Engine/Base/Camera.cpp	/^void Camera::lookAt(glm::vec3 pointTo,glm::vec3 center,glm::vec3 up)$/;"	f	class:Camera
needUpdate	Engine/Base/Camera.cpp	/^bool Camera::needUpdate()$/;"	f	class:Camera
rotate	Engine/Base/Camera.cpp	/^void Camera::rotate(glm::vec3 v,float angle)$/;"	f	class:Camera
setAspectRatio	Engine/Base/Camera.cpp	/^void Camera::setAspectRatio(float a)$/;"	f	class:Camera
setFoV	Engine/Base/Camera.cpp	/^void Camera::setFoV(float v)$/;"	f	class:Camera
setFrustum	Engine/Base/Camera.cpp	/^void Camera::setFrustum(float left,float right,	float bottom,float top,	float near,float far)$/;"	f	class:Camera
setOrthographicProjection	Engine/Base/Camera.cpp	/^void Camera::setOrthographicProjection(float left,float right,float bottom,float top,float near,float far)$/;"	f	class:Camera
setPerspectiveProjection	Engine/Base/Camera.cpp	/^void Camera::setPerspectiveProjection(float foV,float aspectRatio,float near,float far )$/;"	f	class:Camera
setProjectionMatrix	Engine/Base/Camera.cpp	/^void Camera::setProjectionMatrix(glm::mat4 & m)$/;"	f	class:Camera
setUpFromMatrix	Engine/Base/Camera.cpp	/^void Camera::setUpFromMatrix(glm::mat4 & m)$/;"	f	class:Camera
setUpdate	Engine/Base/Camera.cpp	/^void Camera::setUpdate(bool r)$/;"	f	class:Camera
setZfar	Engine/Base/Camera.cpp	/^void Camera::setZfar(float f)$/;"	f	class:Camera
setZnear	Engine/Base/Camera.cpp	/^void Camera::setZnear(float n)$/;"	f	class:Camera
translate	Engine/Base/Camera.cpp	/^void Camera::translate(glm::vec3 v)$/;"	f	class:Camera
~Camera	Engine/Base/Camera.cpp	/^Camera::~Camera()$/;"	f	class:Camera
Camera	Engine/Base/Camera.h	/^class Camera$/;"	c
Zfar	Engine/Base/Camera.h	/^		float Zfar;		\/\/\/< distance from camera frame center to far clipping plane$/;"	m	class:Camera
Znear	Engine/Base/Camera.h	/^		float Znear;	\/\/\/< distance from camera frame center to near clipping plane$/;"	m	class:Camera
__CAMERA__	Engine/Base/Camera.h	8;"	d
aspectRatio	Engine/Base/Camera.h	/^		float aspectRatio;	\/\/\/< pixel aspect ratio (width\/height ratio of one pixel)$/;"	m	class:Camera
disableProjection	Engine/Base/Camera.h	/^		void disableProjection(){frame->attachTo(NULL);};$/;"	f	class:Camera
enableProjection	Engine/Base/Camera.h	/^		void enableProjection(){frame->attachTo(projection_frame);};$/;"	f	class:Camera
foV	Engine/Base/Camera.h	/^		float foV;	\/\/\/< field of view of the camera$/;"	m	class:Camera
frame	Engine/Base/Camera.h	/^		Frame *frame;		\/\/\/< Camera position frame$/;"	m	class:Camera
m_Name	Engine/Base/Camera.h	/^			std::string m_Name;$/;"	m	class:Camera
projection_frame	Engine/Base/Camera.h	/^		Frame *projection_frame; \/\/\/< Camera projection frame$/;"	m	class:Camera
Effect	Engine/Base/Effect.cpp	/^Effect::Effect()$/;"	f	class:Effect
Effect	Engine/Base/Effect.cpp	/^Effect::Effect(std::string name,std::string className)$/;"	f	class:Effect
apply	Engine/Base/Effect.cpp	/^void Effect::apply()$/;"	f	class:Effect
getName	Engine/Base/Effect.cpp	/^const std::string Effect::getName()$/;"	f	class:Effect
~Effect	Engine/Base/Effect.cpp	/^Effect::~Effect()$/;"	f	class:Effect
Effect	Engine/Base/Effect.h	/^class Effect$/;"	c
_EFFECT_	Engine/Base/Effect.h	10;"	d
m_ClassName	Engine/Base/Effect.h	/^		std::string m_ClassName;$/;"	m	class:Effect
m_Name	Engine/Base/Effect.h	/^		std::string m_Name;$/;"	m	class:Effect
valid	Engine/Base/Effect.h	/^		bool valid;$/;"	m	class:Effect
Engine	Engine/Base/Engine.h	/^		Engine(){}; $/;"	f	class:Engine
Engine	Engine/Base/Engine.h	/^class Engine$/;"	c
_ENGINE_H	Engine/Base/Engine.h	8;"	d
animate	Engine/Base/Engine.h	/^	virtual void animate(const int elapsedTime){};$/;"	f	class:Engine
init	Engine/Base/Engine.h	/^	virtual bool init(){return true;};$/;"	f	class:Engine
render	Engine/Base/Engine.h	/^	virtual void render(){};$/;"	f	class:Engine
scene	Engine/Base/Engine.h	/^	Scene* scene;$/;"	m	class:Engine
~Engine	Engine/Base/Engine.h	/^		~Engine(){};$/;"	f	class:Engine
Frame	Engine/Base/Frame.cpp	/^Frame::Frame()$/;"	f	class:Frame
attachTo	Engine/Base/Frame.cpp	/^void Frame::attachTo(Frame *f)$/;"	f	class:Frame
convertDirFrom	Engine/Base/Frame.cpp	/^glm::vec3 Frame::convertDirFrom(glm::vec3 dir,Frame *from)$/;"	f	class:Frame
convertDirTo	Engine/Base/Frame.cpp	/^glm::vec3 Frame::convertDirTo(glm::vec3 dir,Frame *to)$/;"	f	class:Frame
convertPtFrom	Engine/Base/Frame.cpp	/^glm::vec3 Frame::convertPtFrom(glm::vec3 pt,Frame *from)$/;"	f	class:Frame
convertPtTo	Engine/Base/Frame.cpp	/^glm::vec3 Frame::convertPtTo(glm::vec3 pt,Frame *to)$/;"	f	class:Frame
detach	Engine/Base/Frame.cpp	/^bool Frame::detach(Frame* f)$/;"	f	class:Frame
getRootMatrix	Engine/Base/Frame.cpp	/^glm::mat4 Frame::getRootMatrix()$/;"	f	class:Frame
getScreenPosition	Engine/Base/Frame.cpp	/^glm::vec3 Frame::getScreenPosition(glm::vec3 v)$/;"	f	class:Frame
getTransformMatrix	Engine/Base/Frame.cpp	/^glm::mat4 Frame::getTransformMatrix()$/;"	f	class:Frame
isCameraFrame	Engine/Base/Frame.cpp	/^bool Frame::isCameraFrame()$/;"	f	class:Frame
loadIdentity	Engine/Base/Frame.cpp	/^void Frame::loadIdentity()$/;"	f	class:Frame
rotate	Engine/Base/Frame.cpp	/^void Frame::rotate(glm::vec3 axis, float angle)$/;"	f	class:Frame
scale	Engine/Base/Frame.cpp	/^void Frame::scale(glm::vec3 s)$/;"	f	class:Frame
setAsCameraFrame	Engine/Base/Frame.cpp	/^void Frame::setAsCameraFrame(bool r)$/;"	f	class:Frame
setUpFromMatrix	Engine/Base/Frame.cpp	/^void Frame::setUpFromMatrix(const glm::mat4 & m)$/;"	f	class:Frame
setUpdate	Engine/Base/Frame.cpp	/^void Frame::setUpdate(bool t)$/;"	f	class:Frame
translate	Engine/Base/Frame.cpp	/^void Frame::translate(glm::vec3 t)$/;"	f	class:Frame
updateNeeded	Engine/Base/Frame.cpp	/^bool Frame::updateNeeded()$/;"	f	class:Frame
~Frame	Engine/Base/Frame.cpp	/^Frame::~Frame()$/;"	f	class:Frame
Frame	Engine/Base/Frame.h	/^class Frame$/;"	c
__FRAME__	Engine/Base/Frame.h	8;"	d
getMatrix	Engine/Base/Frame.h	/^	glm::mat4* getMatrix(){ return(&matrix); };$/;"	f	class:Frame
isCamera	Engine/Base/Frame.h	/^	bool isCamera;  \/\/\/< boolean flagging current frame as belonging to instance of Camera class$/;"	m	class:Frame
m_Sons	Engine/Base/Frame.h	/^	std::vector< Frame*> m_Sons; \/\/ Vector of frames attached to this one$/;"	m	class:Frame
m_ToUpdate	Engine/Base/Frame.h	/^	bool m_ToUpdate;\/\/\/ set to true when the frame change$/;"	m	class:Frame
matrix	Engine/Base/Frame.h	/^	glm::mat4 matrix; \/\/\/< 4x4 matrix defining frame transformation$/;"	m	class:Frame
reference	Engine/Base/Frame.h	/^	Frame *reference; \/\/\/< Father frame.$/;"	m	class:Frame
A	Engine/Base/GeometricModel.cpp	/^    glm::vec4 A,B,C;$/;"	m	struct:triangle	file:
B	Engine/Base/GeometricModel.cpp	/^    glm::vec4 A,B,C;$/;"	m	struct:triangle	file:
C	Engine/Base/GeometricModel.cpp	/^    glm::vec4 A,B,C;$/;"	m	struct:triangle	file:
GeometricModel	Engine/Base/GeometricModel.cpp	/^GeometricModel::GeometricModel()$/;"	f	class:GeometricModel
GeometricModel	Engine/Base/GeometricModel.cpp	/^GeometricModel::GeometricModel(std::string name,bool loadnow)$/;"	f	class:GeometricModel
buildSSBO	Engine/Base/GeometricModel.cpp	/^void GeometricModel::buildSSBO()$/;"	f	class:GeometricModel
createBoundingBox	Engine/Base/GeometricModel.cpp	/^void GeometricModel::createBoundingBox()$/;"	f	class:GeometricModel
data	Engine/Base/GeometricModel.cpp	/^    glm::uvec4 data;\/\/visible,left,right$/;"	m	struct:myPoly	file:
getName	Engine/Base/GeometricModel.cpp	/^const std::string GeometricModel::getName()$/;"	f	class:GeometricModel
getSSBO	Engine/Base/GeometricModel.cpp	/^GPUBuffer* GeometricModel::getSSBO()$/;"	f	class:GeometricModel
info	Engine/Base/GeometricModel.cpp	/^    glm::uvec4 info; \/\/nP,support,pin,pout$/;"	m	struct:myPoly	file:
loader	Engine/Base/GeometricModel.cpp	/^GeometricModelLoader* GeometricModel::loader = new OBJLoader();$/;"	m	class:GeometricModel	file:
myPoly	Engine/Base/GeometricModel.cpp	/^struct myPoly$/;"	s	file:
normal	Engine/Base/GeometricModel.cpp	/^    glm::vec4 normal;$/;"	m	struct:myPoly	file:
point	Engine/Base/GeometricModel.cpp	/^    glm::vec4 point[5];$/;"	m	struct:myPoly	file:
triangle	Engine/Base/GeometricModel.cpp	/^struct triangle{$/;"	s	file:
~GeometricModel	Engine/Base/GeometricModel.cpp	/^GeometricModel::~GeometricModel()$/;"	f	class:GeometricModel
Arete	Engine/Base/GeometricModel.h	/^struct Arete{$/;"	s
Face	Engine/Base/GeometricModel.h	/^struct Face$/;"	s
GeometricModel	Engine/Base/GeometricModel.h	/^class GeometricModel$/;"	c
_GEOMETRIC_MODEL_H	Engine/Base/GeometricModel.h	7;"	d
box	Engine/Base/GeometricModel.h	/^		GeometricBoundingBox *box;$/;"	m	class:GeometricModel
listBorderNeighbours	Engine/Base/GeometricModel.h	/^		std::vector < glm::vec3 > listBorderNeighbours; $/;"	m	class:GeometricModel
listBorderTest	Engine/Base/GeometricModel.h	/^		std::vector < float > listBorderTest;$/;"	m	class:GeometricModel
listCoordFaces	Engine/Base/GeometricModel.h	/^		std::vector <Face> listCoordFaces;$/;"	m	class:GeometricModel
listCoords	Engine/Base/GeometricModel.h	/^		std::vector < glm::vec3 > listCoords;$/;"	m	class:GeometricModel
listEdges	Engine/Base/GeometricModel.h	/^		std::map< Arete, int, Arete > listEdges;$/;"	m	class:GeometricModel
listFaces	Engine/Base/GeometricModel.h	/^		std::vector <Face> listFaces;$/;"	m	class:GeometricModel
listNormals	Engine/Base/GeometricModel.h	/^		std::vector <glm::vec3> listNormals;$/;"	m	class:GeometricModel
listTangents	Engine/Base/GeometricModel.h	/^		std::vector < glm::vec4 > listTangents;$/;"	m	class:GeometricModel
listVertex	Engine/Base/GeometricModel.h	/^		std::vector < glm::vec3 > listVertex;$/;"	m	class:GeometricModel
loader	Engine/Base/GeometricModel.h	/^		static GeometricModelLoader* loader;$/;"	m	class:GeometricModel
m_BindingPoint	Engine/Base/GeometricModel.h	/^		GLuint m_BindingPoint;$/;"	m	class:GeometricModel
m_Buffer	Engine/Base/GeometricModel.h	/^		GPUBuffer *m_Buffer;$/;"	m	class:GeometricModel
m_Name	Engine/Base/GeometricModel.h	/^		std::string m_Name;$/;"	m	class:GeometricModel
nb_faces	Engine/Base/GeometricModel.h	/^		int nb_faces;$/;"	m	class:GeometricModel
nb_vertex	Engine/Base/GeometricModel.h	/^		int nb_vertex;$/;"	m	class:GeometricModel
operator ()	Engine/Base/GeometricModel.h	/^	bool operator() (const Arete& x, const Arete& y) const $/;"	f	struct:Arete
s1	Engine/Base/GeometricModel.h	/^	int s1, s2;$/;"	m	struct:Arete
s1	Engine/Base/GeometricModel.h	/^	int s1,s2,s3;$/;"	m	struct:Face
s2	Engine/Base/GeometricModel.h	/^	int s1, s2;$/;"	m	struct:Arete
s2	Engine/Base/GeometricModel.h	/^	int s1,s2,s3;$/;"	m	struct:Face
s3	Engine/Base/GeometricModel.h	/^	int s1,s2,s3;$/;"	m	struct:Face
GeometricModelLoader	Engine/Base/GeometricModelLoader.h	/^		GeometricModelLoader(){};$/;"	f	class:GeometricModelLoader
GeometricModelLoader	Engine/Base/GeometricModelLoader.h	/^class GeometricModelLoader$/;"	c
_GEOEMTRICAL_Node_LOADER_	Engine/Base/GeometricModelLoader.h	2;"	d
~GeometricModelLoader	Engine/Base/GeometricModelLoader.h	/^		~GeometricModelLoader(){};$/;"	f	class:GeometricModelLoader
AssimpLoader	Engine/Base/GeometricModelLoader/AssimpLoader.cpp	/^AssimpLoader::AssimpLoader()$/;"	f	class:AssimpLoader
loadFromMesh	Engine/Base/GeometricModelLoader/AssimpLoader.cpp	/^bool AssimpLoader::loadFromMesh(aiMesh* mesh, GeometricModel *model)$/;"	f	class:AssimpLoader
loadModel	Engine/Base/GeometricModelLoader/AssimpLoader.cpp	/^bool AssimpLoader::loadModel(string filename,GeometricModel *model)$/;"	f	class:AssimpLoader
~AssimpLoader	Engine/Base/GeometricModelLoader/AssimpLoader.cpp	/^AssimpLoader::~AssimpLoader()$/;"	f	class:AssimpLoader
AssimpLoader	Engine/Base/GeometricModelLoader/AssimpLoader.h	/^class AssimpLoader : public GeometricModelLoader$/;"	c
_ASSIMPLOADER_	Engine/Base/GeometricModelLoader/AssimpLoader.h	6;"	d
OBJLoader	Engine/Base/GeometricModelLoader/OBJLoader.cpp	/^OBJLoader::OBJLoader()$/;"	f	class:OBJLoader
computeNormals	Engine/Base/GeometricModelLoader/OBJLoader.cpp	/^void OBJLoader::computeNormals(GeometricModel *model)$/;"	f	class:OBJLoader
computeTangents	Engine/Base/GeometricModelLoader/OBJLoader.cpp	/^void OBJLoader::computeTangents(GeometricModel *model)$/;"	f	class:OBJLoader
loadModel	Engine/Base/GeometricModelLoader/OBJLoader.cpp	/^bool OBJLoader::loadModel(string filename,GeometricModel *model)$/;"	f	class:OBJLoader
setupForTextureCoordinates	Engine/Base/GeometricModelLoader/OBJLoader.cpp	/^void OBJLoader::setupForTextureCoordinates(GeometricModel* model)$/;"	f	class:OBJLoader
~OBJLoader	Engine/Base/GeometricModelLoader/OBJLoader.cpp	/^OBJLoader::~OBJLoader()$/;"	f	class:OBJLoader
OBJLoader	Engine/Base/GeometricModelLoader/OBJLoader.h	/^class OBJLoader : public GeometricModelLoader$/;"	c
Light	Engine/Base/Light.hpp	/^class Light$/;"	c
_GOBLIM_LIGHT_	Engine/Base/Light.hpp	2;"	d
m_Color	Engine/Base/Light.hpp	/^	glm::vec4 m_Color;$/;"	m	class:Light
m_Name	Engine/Base/Light.hpp	/^	std::string m_Name;$/;"	m	class:Light
LightNode	Engine/Base/Lighting/LightNode.cpp	/^LightNode::LightNode(std::string name,const glm::vec4 & color):$/;"	f	class:LightNode
getAngle	Engine/Base/Lighting/LightNode.cpp	/^float LightNode::getAngle()$/;"	f	class:LightNode
getColor	Engine/Base/Lighting/LightNode.cpp	/^glm::vec4 LightNode::getColor()$/;"	f	class:LightNode
getDirection	Engine/Base/Lighting/LightNode.cpp	/^glm::vec4 LightNode::getDirection()$/;"	f	class:LightNode
getParams	Engine/Base/Lighting/LightNode.cpp	/^Light LightNode::getParams()$/;"	f	class:LightNode
getPosition	Engine/Base/Lighting/LightNode.cpp	/^glm::vec3 LightNode::getPosition()$/;"	f	class:LightNode
getType	Engine/Base/Lighting/LightNode.cpp	/^float LightNode::getType()$/;"	f	class:LightNode
printLight	Engine/Base/Lighting/LightNode.cpp	/^void printLight(Light* L)$/;"	f
setAngle	Engine/Base/Lighting/LightNode.cpp	/^void LightNode::setAngle(float a)$/;"	f	class:LightNode
setColor	Engine/Base/Lighting/LightNode.cpp	/^void LightNode::setColor(const glm::vec4 & c)$/;"	f	class:LightNode
setDirection	Engine/Base/Lighting/LightNode.cpp	/^void LightNode::setDirection(const glm::vec4 & dir)$/;"	f	class:LightNode
setParams	Engine/Base/Lighting/LightNode.cpp	/^void LightNode::setParams(const Light & p)$/;"	f	class:LightNode
setPosition	Engine/Base/Lighting/LightNode.cpp	/^void LightNode::setPosition(const glm::vec4 & p)$/;"	f	class:LightNode
setType	Engine/Base/Lighting/LightNode.cpp	/^void LightNode::setType(unsigned int kind)$/;"	f	class:LightNode
DIRECTIONAL_LIGHT	Engine/Base/Lighting/LightNode.hpp	13;"	d
Light	Engine/Base/Lighting/LightNode.hpp	/^struct Light$/;"	s
LightNode	Engine/Base/Lighting/LightNode.hpp	/^class LightNode : public Node$/;"	c
POINT_LIGHT	Engine/Base/Lighting/LightNode.hpp	12;"	d
SPOT_LIGHT	Engine/Base/Lighting/LightNode.hpp	11;"	d
_GOBLIM_LIGHTNODE_	Engine/Base/Lighting/LightNode.hpp	2;"	d
cam	Engine/Base/Lighting/LightNode.hpp	/^	Camera	* cam,*cam2;$/;"	m	class:LightNode
cam2	Engine/Base/Lighting/LightNode.hpp	/^	Camera	* cam,*cam2;$/;"	m	class:LightNode
color	Engine/Base/Lighting/LightNode.hpp	/^	glm::vec4 color;$/;"	m	struct:Light
direction	Engine/Base/Lighting/LightNode.hpp	/^	glm::vec4 direction;$/;"	m	struct:Light
info	Engine/Base/Lighting/LightNode.hpp	/^	glm::vec4 info;\/\/.x = type lumiere$/;"	m	struct:Light
mFBO	Engine/Base/Lighting/LightNode.hpp	/^	GPUFBO *mFBO,*mFBO2;$/;"	m	class:LightNode
mFBO2	Engine/Base/Lighting/LightNode.hpp	/^	GPUFBO *mFBO,*mFBO2;$/;"	m	class:LightNode
needUpdate	Engine/Base/Lighting/LightNode.hpp	/^	bool needUpdate;$/;"	m	class:LightNode
params	Engine/Base/Lighting/LightNode.hpp	/^	Light params;$/;"	m	class:LightNode
position	Engine/Base/Lighting/LightNode.hpp	/^	glm::vec4 position;$/;"	m	struct:Light
shadowMapSize	Engine/Base/Lighting/LightNode.hpp	/^	int shadowMapSize;$/;"	m	class:LightNode
LightingModel	Engine/Base/Lighting/LightingModel.cpp	/^LightingModel::LightingModel(std::string name,unsigned int ShadowTypeInfo)$/;"	f	class:LightingModel
collect	Engine/Base/Lighting/LightingModel.cpp	/^void LightingModel::collect(Node *rootNode)$/;"	f	class:LightingModel
getNodes	Engine/Base/Lighting/LightingModel.cpp	/^std::vector<Node*> LightingModel::getNodes()$/;"	f	class:LightingModel
setCollector	Engine/Base/Lighting/LightingModel.cpp	/^void LightingModel::setCollector(NodeCollector *collector)$/;"	f	class:LightingModel
update	Engine/Base/Lighting/LightingModel.cpp	/^void LightingModel::update()$/;"	f	class:LightingModel
~LightingModel	Engine/Base/Lighting/LightingModel.cpp	/^LightingModel::~LightingModel()$/;"	f	class:LightingModel
LightingModel	Engine/Base/Lighting/LightingModel.h	/^class LightingModel $/;"	c
NONE	Engine/Base/Lighting/LightingModel.h	7;"	d
SHADOW_MAP	Engine/Base/Lighting/LightingModel.h	8;"	d
SHADOW_PLUCKER	Engine/Base/Lighting/LightingModel.h	10;"	d
SHADOW_VOLUME	Engine/Base/Lighting/LightingModel.h	9;"	d
ShadowType	Engine/Base/Lighting/LightingModel.h	/^	unsigned int ShadowType;$/;"	m	class:LightingModel
_LIGHTING_MODEL_	Engine/Base/Lighting/LightingModel.h	3;"	d
collector	Engine/Base/Lighting/LightingModel.h	/^	NodeCollector* collector;$/;"	m	class:LightingModel
m_Name	Engine/Base/Lighting/LightingModel.h	/^	std::string m_Name;	$/;"	m	class:LightingModel
needUpdate	Engine/Base/Lighting/LightingModel.h	/^	bool needUpdate;$/;"	m	class:LightingModel
ShadowModel	Engine/Base/Lighting/ShadowModel.cpp	/^ShadowModel::ShadowModel(bool c,Node * n)$/;"	f	class:ShadowModel
castShadow	Engine/Base/Lighting/ShadowModel.cpp	/^bool ShadowModel::castShadow()				{ return m_cast;}$/;"	f	class:ShadowModel
getLsp2SSBO	Engine/Base/Lighting/ShadowModel.cpp	/^GPUBuffer * ShadowModel::getLsp2SSBO()		{ return m_nodes; }$/;"	f	class:ShadowModel
getRoots	Engine/Base/Lighting/ShadowModel.cpp	/^GPUBuffer * ShadowModel::getRoots()			{ return m_roots; }$/;"	f	class:ShadowModel
initSSBO	Engine/Base/Lighting/ShadowModel.cpp	/^void ShadowModel::initSSBO()$/;"	f	class:ShadowModel
link	Engine/Base/Lighting/ShadowModel.cpp	/^	glm::uvec4 link;	$/;"	m	struct:remote_node	file:
plane	Engine/Base/Lighting/ShadowModel.cpp	/^	glm::vec4 plane;$/;"	m	struct:remote_node	file:
r_node	Engine/Base/Lighting/ShadowModel.cpp	/^}r_node;$/;"	t	typeref:struct:remote_node	file:
remote_node	Engine/Base/Lighting/ShadowModel.cpp	/^typedef struct remote_node{$/;"	s	file:
setCastShadow	Engine/Base/Lighting/ShadowModel.cpp	/^void ShadowModel::setCastShadow(bool b)$/;"	f	class:ShadowModel
~ShadowModel	Engine/Base/Lighting/ShadowModel.cpp	/^ShadowModel::~ShadowModel()		{}$/;"	f	class:ShadowModel
ShadowModel	Engine/Base/Lighting/ShadowModel.h	/^class ShadowModel$/;"	c
__SHADOW_MODEL_H	Engine/Base/Lighting/ShadowModel.h	2;"	d
dad	Engine/Base/Lighting/ShadowModel.h	/^	Node *dad;$/;"	m	class:ShadowModel
inited	Engine/Base/Lighting/ShadowModel.h	/^	bool inited;$/;"	m	class:ShadowModel
m_BufferMaxSize	Engine/Base/Lighting/ShadowModel.h	/^	unsigned int m_BufferMaxSize;$/;"	m	class:ShadowModel
m_cast	Engine/Base/Lighting/ShadowModel.h	/^	bool m_cast;$/;"	m	class:ShadowModel
m_nodes	Engine/Base/Lighting/ShadowModel.h	/^	GPUBuffer * m_nodes;$/;"	m	class:ShadowModel
m_receive	Engine/Base/Lighting/ShadowModel.h	/^	bool m_receive;$/;"	m	class:ShadowModel
m_roots	Engine/Base/Lighting/ShadowModel.h	/^	GPUBuffer * m_roots;$/;"	m	class:ShadowModel
Material	Engine/Base/Material.cpp	/^Material::Material()$/;"	f	class:Material
Material	Engine/Base/Material.cpp	/^Material::Material(std::string name,std::string className)$/;"	f	class:Material
getName	Engine/Base/Material.cpp	/^const std::string Material::getName()$/;"	f	class:Material
render	Engine/Base/Material.cpp	/^void Material::render(Node *o)$/;"	f	class:Material
update	Engine/Base/Material.cpp	/^void Material::update(Node *o,const int elapsedTime)$/;"	f	class:Material
~Material	Engine/Base/Material.cpp	/^Material::~Material()$/;"	f	class:Material
Material	Engine/Base/Material.h	/^class Material$/;"	c
_MATERIAL_	Engine/Base/Material.h	2;"	d
m_ClassName	Engine/Base/Material.h	/^		std::string m_ClassName;$/;"	m	class:Material
m_Name	Engine/Base/Material.h	/^		std::string m_Name;$/;"	m	class:Material
valid	Engine/Base/Material.h	/^		bool valid;$/;"	m	class:Material
DECLARE_META	Engine/Base/MetaData.hpp	81;"	d
DEFINE_META	Engine/Base/MetaData.hpp	82;"	d
DYNAMIC_META	Engine/Base/MetaData.hpp	86;"	d
Get	Engine/Base/MetaData.hpp	/^  static MetaData *Get( void )$/;"	f	class:MetaCreator
Init	Engine/Base/MetaData.hpp	/^  static void Init( std::string name, unsigned size )$/;"	f	class:MetaCreator
META	Engine/Base/MetaData.hpp	84;"	d
META_TYPE	Engine/Base/MetaData.hpp	83;"	d
MetaCreator	Engine/Base/MetaData.hpp	/^  MetaCreator( std::string name, unsigned size )$/;"	f	class:MetaCreator
MetaCreator	Engine/Base/MetaData.hpp	/^class MetaCreator$/;"	c
MetaManager	Engine/Base/MetaData.hpp	/^class MetaManager$/;"	c
MetaMap	Engine/Base/MetaData.hpp	/^  typedef std::map<std::string, const Metadata*> MetaMap;$/;"	t	class:MetaManager
Metadata	Engine/Base/MetaData.hpp	/^ Metadata(const char* name) : m_Name(name) {}$/;"	f	class:Metadata
Metadata	Engine/Base/MetaData.hpp	/^class Metadata$/;"	c
_METAMGR_MGR	Engine/Base/MetaData.hpp	6;"	d
get	Engine/Base/MetaData.hpp	/^  static const Metadata* get(const char* name)$/;"	f	class:MetaManager
getMetas	Engine/Base/MetaData.hpp	/^  static MetaMap& getMetas()$/;"	f	class:MetaManager
m_Name	Engine/Base/MetaData.hpp	/^  const char* m_Name;$/;"	m	class:Metadata
name	Engine/Base/MetaData.hpp	/^  const char* name() const { return m_Name; }$/;"	f	class:Metadata
registerMeta	Engine/Base/MetaData.hpp	/^  static void registerMeta(const Metadata* meta)$/;"	f	class:MetaManager
Model	Engine/Base/Model.cpp	/^Model::Model(std::string name,bool loadnow)$/;"	f	class:Model
drawGeometry	Engine/Base/Model.cpp	/^void Model::drawGeometry(int type)$/;"	f	class:Model
getGeometricModel	Engine/Base/Model.cpp	/^GeometricModel* Model::getGeometricModel()$/;"	f	class:Model
m_ModelMgr	Engine/Base/Model.cpp	/^Resource_mgr<GeometricModel> Model::m_ModelMgr = Resource_mgr<GeometricModel>();$/;"	m	class:Model	file:
name	Engine/Base/Model.cpp	/^std::string Model::name()$/;"	f	class:Model
~Model	Engine/Base/Model.cpp	/^Model::~Model()$/;"	f	class:Model
Model	Engine/Base/Model.h	/^class Model$/;"	c
_MODEL_H	Engine/Base/Model.h	3;"	d
m_Model	Engine/Base/Model.h	/^		GeometricModel *m_Model;$/;"	m	class:Model
m_ModelMgr	Engine/Base/Model.h	/^		static Resource_mgr<GeometricModel> m_ModelMgr;$/;"	m	class:Model
m_Name	Engine/Base/Model.h	/^		std::string m_Name;$/;"	m	class:Model
Node	Engine/Base/Node.cpp	/^Node::Node(std::string name)$/;"	f	class:Node
adopt	Engine/Base/Node.cpp	/^void Node::adopt(Node* son)$/;"	f	class:Node
animate	Engine/Base/Node.cpp	/^void Node::animate(const int elapsedTime)$/;"	f	class:Node
animator	Engine/Base/Node.cpp	/^Animator* Node::animator()$/;"	f	class:Node
disown	Engine/Base/Node.cpp	/^bool Node::disown(Node* son)$/;"	f	class:Node
displayLeaves	Engine/Base/Node.cpp	/^void Node::displayLeaves(int level)$/;"	f	class:Node
drawGeometry	Engine/Base/Node.cpp	/^void Node::drawGeometry(int type)$/;"	f	class:Node
frame	Engine/Base/Node.cpp	/^Frame* Node::frame()$/;"	f	class:Node
getMaterial	Engine/Base/Node.cpp	/^Material* Node::getMaterial()$/;"	f	class:Node
getModel	Engine/Base/Node.cpp	/^Model* Node::getModel()$/;"	f	class:Node
getName	Engine/Base/Node.cpp	/^const std::string Node::getName()$/;"	f	class:Node
getShadowModel	Engine/Base/Node.cpp	/^ShadowModel *Node::getShadowModel()$/;"	f	class:Node
render	Engine/Base/Node.cpp	/^void Node::render(Material* mat)$/;"	f	class:Node
setAnimator	Engine/Base/Node.cpp	/^void Node::setAnimator(Animator* a)$/;"	f	class:Node
setMaterial	Engine/Base/Node.cpp	/^void Node::setMaterial(Material *m,bool recurse)$/;"	f	class:Node
setModel	Engine/Base/Node.cpp	/^void Node::setModel(Model *m)$/;"	f	class:Node
~Node	Engine/Base/Node.cpp	/^Node::~Node()$/;"	f	class:Node
Node	Engine/Base/Node.h	/^class Node$/;"	c
__Node_H	Engine/Base/Node.h	7;"	d
box	Engine/Base/Node.h	/^		BoundingBox *box;$/;"	m	class:Node
m_Animator	Engine/Base/Node.h	/^		Animator *m_Animator;$/;"	m	class:Node
m_Father	Engine/Base/Node.h	/^		Node* m_Father;$/;"	m	class:Node
m_Frame	Engine/Base/Node.h	/^		Frame *m_Frame;$/;"	m	class:Node
m_Material	Engine/Base/Node.h	/^		Material *m_Material;$/;"	m	class:Node
m_Model	Engine/Base/Node.h	/^		Model *m_Model;$/;"	m	class:Node
m_Name	Engine/Base/Node.h	/^		std::string m_Name;$/;"	m	class:Node
m_Shadow	Engine/Base/Node.h	/^		ShadowModel * m_Shadow;$/;"	m	class:Node
m_Sons	Engine/Base/Node.h	/^		std::vector<Node*> m_Sons;$/;"	m	class:Node
NodeCollector	Engine/Base/NodeCollector.h	/^		NodeCollector(){};$/;"	f	class:NodeCollector
NodeCollector	Engine/Base/NodeCollector.h	/^class NodeCollector$/;"	c
_NODE_COLLECTOR_H	Engine/Base/NodeCollector.h	8;"	d
collect	Engine/Base/NodeCollector.h	/^		virtual void collect(Node* rootNode){};$/;"	f	class:NodeCollector
nodes	Engine/Base/NodeCollector.h	/^		std::vector<Node*> nodes;$/;"	m	class:NodeCollector
~NodeCollector	Engine/Base/NodeCollector.h	/^		~NodeCollector(){};$/;"	f	class:NodeCollector
FCCollector	Engine/Base/NodeCollectors/FCCollector.cpp	/^FCCollector::FCCollector()$/;"	f	class:FCCollector
collect	Engine/Base/NodeCollectors/FCCollector.cpp	/^void FCCollector::collect(Node* node)$/;"	f	class:FCCollector
collectRecur	Engine/Base/NodeCollectors/FCCollector.cpp	/^void FCCollector::collectRecur(Node* node)$/;"	f	class:FCCollector
inFrustum	Engine/Base/NodeCollectors/FCCollector.cpp	/^bool FCCollector::inFrustum(Node* node)$/;"	f	class:FCCollector
updateCam	Engine/Base/NodeCollectors/FCCollector.cpp	/^void FCCollector::updateCam()$/;"	f	class:FCCollector
~FCCollector	Engine/Base/NodeCollectors/FCCollector.cpp	/^FCCollector::~FCCollector() {}$/;"	f	class:FCCollector
FCCollector	Engine/Base/NodeCollectors/FCCollector.h	/^class FCCollector : public NodeCollector$/;"	c
_FRUSTUM_COLLECTOR_H	Engine/Base/NodeCollectors/FCCollector.h	8;"	d
frustum	Engine/Base/NodeCollectors/FCCollector.h	/^		glm::vec4 frustum[6];$/;"	m	class:FCCollector
LightCollector	Engine/Base/NodeCollectors/LightCollector.cpp	/^LightCollector::LightCollector()$/;"	f	class:LightCollector
collect	Engine/Base/NodeCollectors/LightCollector.cpp	/^void LightCollector::collect(Node* node)$/;"	f	class:LightCollector
collectRecur	Engine/Base/NodeCollectors/LightCollector.cpp	/^void LightCollector::collectRecur(Node* node)$/;"	f	class:LightCollector
~LightCollector	Engine/Base/NodeCollectors/LightCollector.cpp	/^LightCollector::~LightCollector()$/;"	f	class:LightCollector
LightCollector	Engine/Base/NodeCollectors/LightCollector.h	/^class LightCollector : public NodeCollector$/;"	c
_LIGHT_COLLECTOR_H	Engine/Base/NodeCollectors/LightCollector.h	8;"	d
MeshNodeCollector	Engine/Base/NodeCollectors/MeshNodeCollector.cpp	/^MeshNodeCollector::MeshNodeCollector()$/;"	f	class:MeshNodeCollector
collect	Engine/Base/NodeCollectors/MeshNodeCollector.cpp	/^void MeshNodeCollector::collect(Node* node)$/;"	f	class:MeshNodeCollector
collectRecur	Engine/Base/NodeCollectors/MeshNodeCollector.cpp	/^void MeshNodeCollector::collectRecur(Node* node)$/;"	f	class:MeshNodeCollector
~MeshNodeCollector	Engine/Base/NodeCollectors/MeshNodeCollector.cpp	/^MeshNodeCollector::~MeshNodeCollector()$/;"	f	class:MeshNodeCollector
MeshNodeCollector	Engine/Base/NodeCollectors/MeshNodeCollector.h	/^class MeshNodeCollector : public NodeCollector$/;"	c
_MESHNODE_COLLECTOR_H	Engine/Base/NodeCollectors/MeshNodeCollector.h	8;"	d
StandardCollector	Engine/Base/NodeCollectors/StandardCollector.cpp	/^StandardCollector::StandardCollector()$/;"	f	class:StandardCollector
collect	Engine/Base/NodeCollectors/StandardCollector.cpp	/^void StandardCollector::collect(Node* node)$/;"	f	class:StandardCollector
collectRecur	Engine/Base/NodeCollectors/StandardCollector.cpp	/^void StandardCollector::collectRecur(Node* node)$/;"	f	class:StandardCollector
~StandardCollector	Engine/Base/NodeCollectors/StandardCollector.cpp	/^StandardCollector::~StandardCollector()$/;"	f	class:StandardCollector
StandardCollector	Engine/Base/NodeCollectors/StandardCollector.h	/^class StandardCollector : public NodeCollector$/;"	c
_STANDARD_COLLECTOR_H	Engine/Base/NodeCollectors/StandardCollector.h	8;"	d
Resource	Engine/Base/Resource.cpp	/^Resource::Resource(std::string name)$/;"	f	class:Resource
display	Engine/Base/Resource.cpp	/^void Resource::display(const glm::vec4 & box)$/;"	f	class:Resource
load	Engine/Base/Resource.cpp	/^bool Resource::load()$/;"	f	class:Resource
name	Engine/Base/Resource.cpp	/^std::string Resource::name()$/;"	f	class:Resource
~Resource	Engine/Base/Resource.cpp	/^Resource::~Resource()$/;"	f	class:Resource
Resource	Engine/Base/Resource.h	/^class Resource$/;"	c
m_Name	Engine/Base/Resource.h	/^	std::string m_Name;$/;"	m	class:Resource
Resource_mgr	Engine/Base/Resource_mgr.hpp	/^Resource_mgr<T>::Resource_mgr() $/;"	f	class:Resource_mgr
Resource_mgr	Engine/Base/Resource_mgr.hpp	/^template <typename T> class Resource_mgr$/;"	c
_RESOURCE_MGR	Engine/Base/Resource_mgr.hpp	8;"	d
find	Engine/Base/Resource_mgr.hpp	/^T* Resource_mgr<T>::find(string a)$/;"	f	class:Resource_mgr
get	Engine/Base/Resource_mgr.hpp	/^R* Resource_mgr<T>::get(string a)$/;"	f	class:Resource_mgr
get	Engine/Base/Resource_mgr.hpp	/^T* Resource_mgr<T>::get(int a)$/;"	f	class:Resource_mgr
get	Engine/Base/Resource_mgr.hpp	/^T* Resource_mgr<T>::get(string a)$/;"	f	class:Resource_mgr
insert	Engine/Base/Resource_mgr.hpp	/^void Resource_mgr<T>::insert(string a,T* elt)$/;"	f	class:Resource_mgr
nextObject	Engine/Base/Resource_mgr.hpp	/^T* Resource_mgr<T>::nextObject(string a)$/;"	f	class:Resource_mgr
release	Engine/Base/Resource_mgr.hpp	/^void Resource_mgr<T>::release(string a)$/;"	f	class:Resource_mgr
rscmap	Engine/Base/Resource_mgr.hpp	/^	map< string , pair< T* , int > > rscmap;$/;"	m	class:Resource_mgr
size	Engine/Base/Resource_mgr.hpp	/^int Resource_mgr<T>::size() $/;"	f	class:Resource_mgr
~Resource_mgr	Engine/Base/Resource_mgr.hpp	/^Resource_mgr<T>::~Resource_mgr () $/;"	f	class:Resource_mgr
Scene	Engine/Base/Scene.cpp	/^Scene::Scene()$/;"	f	class:Scene
camera	Engine/Base/Scene.cpp	/^CameraGL* Scene::camera()$/;"	f	class:Scene
configureLogger	Engine/Base/Scene.cpp	/^void Scene::configureLogger()$/;"	f	class:Scene
frame	Engine/Base/Scene.cpp	/^Frame* Scene::frame()$/;"	f	class:Scene
getCamera	Engine/Base/Scene.cpp	/^CameraGL* Scene::getCamera(std::string name)$/;"	f	class:Scene
getManipulatedNode	Engine/Base/Scene.cpp	/^Node* Scene::getManipulatedNode()$/;"	f	class:Scene
getNode	Engine/Base/Scene.cpp	/^Node* Scene::getNode(std::string name)$/;"	f	class:Scene
getRoot	Engine/Base/Scene.cpp	/^Node* Scene::getRoot()$/;"	f	class:Scene
getSceneNode	Engine/Base/Scene.cpp	/^Node* Scene::getSceneNode()$/;"	f	class:Scene
manipulateNode	Engine/Base/Scene.cpp	/^void Scene::manipulateNode(std::string name)$/;"	f	class:Scene
nextCamera	Engine/Base/Scene.cpp	/^void Scene::nextCamera()$/;"	f	class:Scene
nextManipulatedNode	Engine/Base/Scene.cpp	/^void Scene::nextManipulatedNode()$/;"	f	class:Scene
releaseModel	Engine/Base/Scene.cpp	/^void Scene::releaseModel(Model *m)$/;"	f	class:Scene
releaseModel	Engine/Base/Scene.cpp	/^void Scene::releaseModel(string a)$/;"	f	class:Scene
releaseNode	Engine/Base/Scene.cpp	/^void Scene::releaseNode(Node *n)$/;"	f	class:Scene
releaseNode	Engine/Base/Scene.cpp	/^void Scene::releaseNode(std::string name)$/;"	f	class:Scene
releaseResource	Engine/Base/Scene.cpp	/^void Scene::releaseResource(Resource *r)$/;"	f	class:Scene
releaseResource	Engine/Base/Scene.cpp	/^void Scene::releaseResource(string a)$/;"	f	class:Scene
useCamera	Engine/Base/Scene.cpp	/^void Scene::useCamera(std::string name)$/;"	f	class:Scene
~Scene	Engine/Base/Scene.cpp	/^Scene::~Scene()$/;"	f	class:Scene
Scene	Engine/Base/Scene.h	/^class Scene : public Singleton<Scene>{$/;"	c
_GOBLIM_SCENE_	Engine/Base/Scene.h	2;"	d
current_Camera	Engine/Base/Scene.h	/^	CameraGL* current_Camera;$/;"	m	class:Scene
current_ManipulatedNode	Engine/Base/Scene.h	/^	Node* current_ManipulatedNode;$/;"	m	class:Scene
getModel	Engine/Base/Scene.h	/^	template <class R>  R* getModel(string a)$/;"	f	class:Scene
getResource	Engine/Base/Scene.h	/^	template <class R> R* getResource(string a)$/;"	f	class:Scene
m_Cameras	Engine/Base/Scene.h	/^	Resource_mgr<CameraGL> m_Cameras;$/;"	m	class:Scene
m_Frame	Engine/Base/Scene.h	/^	Frame *m_Frame;$/;"	m	class:Scene
m_Models	Engine/Base/Scene.h	/^	Resource_mgr<Model> m_Models;$/;"	m	class:Scene
m_Nodes	Engine/Base/Scene.h	/^	Resource_mgr<Node> m_Nodes;$/;"	m	class:Scene
m_Resources	Engine/Base/Scene.h	/^	Resource_mgr<Resource> m_Resources;	$/;"	m	class:Scene
m_Root	Engine/Base/Scene.h	/^	Node* m_Root;$/;"	m	class:Scene
m_Scene	Engine/Base/Scene.h	/^	Node *m_Scene;$/;"	m	class:Scene
needupdate	Engine/Base/Scene.h	/^	bool needupdate;$/;"	m	class:Scene
Singleton	Engine/Base/Singleton.h	/^		Singleton () { }$/;"	f	class:Singleton
Singleton	Engine/Base/Singleton.h	/^class Singleton$/;"	c
_SINGLETON_CLASS_	Engine/Base/Singleton.h	2;"	d
_singleton	Engine/Base/Singleton.h	/^		static T *_singleton;$/;"	m	class:Singleton
_singleton	Engine/Base/Singleton.h	/^T *Singleton<T>::_singleton = NULL;$/;"	m	class:Singleton
getInstance	Engine/Base/Singleton.h	/^		static T *getInstance ()$/;"	f	class:Singleton
kill	Engine/Base/Singleton.h	/^		static void kill ()$/;"	f	class:Singleton
~Singleton	Engine/Base/Singleton.h	/^		~Singleton () { }$/;"	f	class:Singleton
BoundingBoxModelGL	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.cpp	/^BoundingBoxModelGL::BoundingBoxModelGL(GeometricBoundingBox *box)$/;"	f	class:BoundingBoxModelGL
drawGeometry	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.cpp	/^void BoundingBoxModelGL::drawGeometry()$/;"	f	class:BoundingBoxModelGL
loadToGPU	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.cpp	/^void BoundingBoxModelGL::loadToGPU()$/;"	f	class:BoundingBoxModelGL
~BoundingBoxModelGL	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.cpp	/^BoundingBoxModelGL::~BoundingBoxModelGL()$/;"	f	class:BoundingBoxModelGL
BoundingBoxModelGL	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.h	/^class BoundingBoxModelGL $/;"	c
VA_Main	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.h	/^		unsigned int VA_Main;$/;"	m	class:BoundingBoxModelGL
VBO_Faces	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.h	/^		unsigned int VBO_Faces;$/;"	m	class:BoundingBoxModelGL
VBO_Vertex	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.h	/^		unsigned int VBO_Vertex;$/;"	m	class:BoundingBoxModelGL
_BOUNDINGBOXMODELGL_H	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.h	7;"	d
m_Box	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.h	/^		GeometricBoundingBox *m_Box;$/;"	m	class:BoundingBoxModelGL
m_Model	Engine/OpenGL/BoundingBox/BoundingBoxModelGL.h	/^		ModelGL *m_Model;$/;"	m	class:BoundingBoxModelGL
CameraGL	Engine/OpenGL/CameraGL.cpp	/^CameraGL::CameraGL(std::string name):$/;"	f	class:CameraGL
bind	Engine/OpenGL/CameraGL.cpp	/^void CameraGL::bind()$/;"	f	class:CameraGL
setUpdate	Engine/OpenGL/CameraGL.cpp	/^void CameraGL::setUpdate(bool r)$/;"	f	class:CameraGL
updateBuffer	Engine/OpenGL/CameraGL.cpp	/^void CameraGL::updateBuffer()$/;"	f	class:CameraGL
~CameraGL	Engine/OpenGL/CameraGL.cpp	/^CameraGL::~CameraGL()$/;"	f	class:CameraGL
COMMON_SSBO_BINDINGS	Engine/OpenGL/CameraGL.h	13;"	d
CameraGL	Engine/OpenGL/CameraGL.h	/^class CameraGL : public Camera$/;"	c
Proj	Engine/OpenGL/CameraGL.h	/^	glm::mat4 Proj;$/;"	m	struct:ProjectionMatrices
ProjectionMatrices	Engine/OpenGL/CameraGL.h	/^struct ProjectionMatrices$/;"	s
View	Engine/OpenGL/CameraGL.h	/^	glm::mat4 View;$/;"	m	struct:ProjectionMatrices
ViewProj	Engine/OpenGL/CameraGL.h	/^	glm::mat4 ViewProj;$/;"	m	struct:ProjectionMatrices
ViewProjInv	Engine/OpenGL/CameraGL.h	/^	glm::mat4 ViewProjInv;$/;"	m	struct:ProjectionMatrices
ViewProjNormal	Engine/OpenGL/CameraGL.h	/^	glm::mat4 ViewProjNormal;$/;"	m	struct:ProjectionMatrices
__CAMERA_GL__	Engine/OpenGL/CameraGL.h	8;"	d
m_ProjBuffer	Engine/OpenGL/CameraGL.h	/^		GPUBuffer *m_ProjBuffer;$/;"	m	class:CameraGL
param	Engine/OpenGL/CameraGL.h	/^		ProjectionMatrices param;$/;"	m	class:CameraGL
EffectGL	Engine/OpenGL/EffectGL.cpp	/^EffectGL::EffectGL(string name,string className):$/;"	f	class:EffectGL
apply	Engine/OpenGL/EffectGL.cpp	/^void EffectGL::apply(GPUFBO *fbo)$/;"	f	class:EffectGL
~EffectGL	Engine/OpenGL/EffectGL.cpp	/^EffectGL::~EffectGL()$/;"	f	class:EffectGL
EffectGL	Engine/OpenGL/EffectGL.h	/^class EffectGL : public Effect$/;"	c
_EFFECTGL_	Engine/OpenGL/EffectGL.h	2;"	d
m_ProgramPipeline	Engine/OpenGL/EffectGL.h	/^		GLProgramPipeline* m_ProgramPipeline;$/;"	m	class:EffectGL
quad	Engine/OpenGL/EffectGL.h	/^		ModelGL *quad;$/;"	m	class:EffectGL
EngineGL	Engine/OpenGL/EngineGL.cpp	/^EngineGL::EngineGL(int width, int height):$/;"	f	class:EngineGL
animate	Engine/OpenGL/EngineGL.cpp	/^void EngineGL::animate(const int elapsedTime)$/;"	f	class:EngineGL
getFrameTime	Engine/OpenGL/EngineGL.cpp	/^double EngineGL::getFrameTime()$/;"	f	class:EngineGL
getHeight	Engine/OpenGL/EngineGL.cpp	/^int EngineGL::getHeight()$/;"	f	class:EngineGL
getWidth	Engine/OpenGL/EngineGL.cpp	/^int EngineGL::getWidth()$/;"	f	class:EngineGL
init	Engine/OpenGL/EngineGL.cpp	/^bool EngineGL::init()$/;"	f	class:EngineGL
onWindowResize	Engine/OpenGL/EngineGL.cpp	/^void EngineGL::onWindowResize(int width, int height)$/;"	f	class:EngineGL
render	Engine/OpenGL/EngineGL.cpp	/^void EngineGL::render()$/;"	f	class:EngineGL
setHeight	Engine/OpenGL/EngineGL.cpp	/^void EngineGL::setHeight(int h)$/;"	f	class:EngineGL
setWidth	Engine/OpenGL/EngineGL.cpp	/^void EngineGL::setWidth(int w)$/;"	f	class:EngineGL
~EngineGL	Engine/OpenGL/EngineGL.cpp	/^EngineGL::~EngineGL()$/;"	f	class:EngineGL
EngineGL	Engine/OpenGL/EngineGL.h	/^class EngineGL : public Engine$/;"	c
_ENGINE_GL_H	Engine/OpenGL/EngineGL.h	8;"	d
allNodes	Engine/OpenGL/EngineGL.h	/^	NodeCollector *allNodes;$/;"	m	class:EngineGL
boundingBoxMat	Engine/OpenGL/EngineGL.h	/^	BoundingBoxMaterial *boundingBoxMat;$/;"	m	class:EngineGL
drawBoundingBoxes	Engine/OpenGL/EngineGL.h	/^	bool drawBoundingBoxes;$/;"	m	class:EngineGL
drawLights	Engine/OpenGL/EngineGL.h	/^	bool drawLights;$/;"	m	class:EngineGL
lightingModel	Engine/OpenGL/EngineGL.h	/^	LightingModelGL *lightingModel;$/;"	m	class:EngineGL
renderedNodes	Engine/OpenGL/EngineGL.h	/^	NodeCollector *renderedNodes;$/;"	m	class:EngineGL
timeQuery	Engine/OpenGL/EngineGL.h	/^	GPUQuery* timeQuery;$/;"	m	class:EngineGL
w_Height	Engine/OpenGL/EngineGL.h	/^	int w_Height;$/;"	m	class:EngineGL
w_Width	Engine/OpenGL/EngineGL.h	/^	int w_Width;$/;"	m	class:EngineGL
LightingModelGL	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^LightingModelGL::LightingModelGL(std::string name):$/;"	f	class:LightingModelGL
LightingModelGL	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^LightingModelGL::LightingModelGL(std::string name, Node* root)$/;"	f	class:LightingModelGL
bind	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^void LightingModelGL::bind(int location)$/;"	f	class:LightingModelGL
getBuffer	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^GPUBuffer* LightingModelGL::getBuffer()$/;"	f	class:LightingModelGL
printLightBuffer	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^void printLightBuffer(LightBuffer* p)$/;"	f
renderLights	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^void LightingModelGL::renderLights()$/;"	f	class:LightingModelGL
setWindowSize	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^void LightingModelGL::setWindowSize(glm::vec2 size)$/;"	f	class:LightingModelGL
update	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^void LightingModelGL::update(bool forceUpdate)$/;"	f	class:LightingModelGL
~LightingModelGL	Engine/OpenGL/Lighting/LightingModelGL.cpp	/^LightingModelGL::~LightingModelGL()$/;"	f	class:LightingModelGL
LIGHTING_SSBO_BINDING	Engine/OpenGL/Lighting/LightingModelGL.h	9;"	d
LightBuffer	Engine/OpenGL/Lighting/LightingModelGL.h	/^struct LightBuffer$/;"	s
LightingModelGL	Engine/OpenGL/Lighting/LightingModelGL.h	/^class LightingModelGL : public LightingModel$/;"	c
Lights	Engine/OpenGL/Lighting/LightingModelGL.h	/^	Light Lights[];$/;"	m	struct:LightBuffer
_LIGHTING_MODEL_GL	Engine/OpenGL/Lighting/LightingModelGL.h	2;"	d
buf	Engine/OpenGL/Lighting/LightingModelGL.h	/^	GLuint buf;$/;"	m	class:LightingModelGL
camPos	Engine/OpenGL/Lighting/LightingModelGL.h	/^	glm::vec4 camPos;$/;"	m	struct:LightBuffer
lightParams	Engine/OpenGL/Lighting/LightingModelGL.h	/^	LightBuffer* lightParams;$/;"	m	class:LightingModelGL
lightParamsSize	Engine/OpenGL/Lighting/LightingModelGL.h	/^	int lightParamsSize;$/;"	m	class:LightingModelGL
m_BindingPoint	Engine/OpenGL/Lighting/LightingModelGL.h	/^	GLuint m_BindingPoint;$/;"	m	class:LightingModelGL
m_Buffer	Engine/OpenGL/Lighting/LightingModelGL.h	/^	GPUBuffer *m_Buffer;$/;"	m	class:LightingModelGL
nbLights	Engine/OpenGL/Lighting/LightingModelGL.h	/^	glm::ivec4 nbLights;$/;"	m	struct:LightBuffer
wSize	Engine/OpenGL/Lighting/LightingModelGL.h	/^	glm::vec2 wSize;$/;"	m	class:LightingModelGL
GLProgramsSourceManager	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^GLProgramsSourceManager::GLProgramsSourceManager()$/;"	f	class:GLProgramsSourceManager
MainMaterialPath	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^string MainMaterialPath = ".\/Materials";$/;"	v
addDir	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^void GLProgramsSourceManager::addDir(string prefix,string className)$/;"	f	class:GLProgramsSourceManager
addFile	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^void GLProgramsSourceManager::addFile(string f_path,string name,string cName)$/;"	f	class:GLProgramsSourceManager
addPath	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^void GLProgramsSourceManager::addPath(string path,string className)$/;"	f	class:GLProgramsSourceManager
get	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^GLProgramSource* GLProgramsSourceManager::get(string name,GLenum type)$/;"	f	class:GLProgramsSourceManager
release	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^void GLProgramsSourceManager::release(string name,GLenum type)$/;"	f	class:GLProgramsSourceManager
~GLProgramsSourceManager	Engine/OpenGL/Managers/GLProgramsSourceManager.cpp	/^GLProgramsSourceManager::~GLProgramsSourceManager()$/;"	f	class:GLProgramsSourceManager
GLProgramsSourceManager	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^class GLProgramsSourceManager$/;"	c
_GLPROGRAMSSOURCEMANAGER_H	Engine/OpenGL/Managers/GLProgramsSourceManager.h	8;"	d
info_text	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		string info_text;$/;"	m	class:GLProgramsSourceManager
m_Compute	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		Resource_mgr<GLProgramSource> m_Compute;$/;"	m	class:GLProgramsSourceManager
m_Fragment	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		Resource_mgr<GLProgramSource> m_Fragment;$/;"	m	class:GLProgramsSourceManager
m_Geometry	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		Resource_mgr<GLProgramSource> m_Geometry;$/;"	m	class:GLProgramsSourceManager
m_Paths	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		vector<string> m_Paths;$/;"	m	class:GLProgramsSourceManager
m_TessControl	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		Resource_mgr<GLProgramSource> m_TessControl;$/;"	m	class:GLProgramsSourceManager
m_TessEvaluation	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		Resource_mgr<GLProgramSource> m_TessEvaluation;$/;"	m	class:GLProgramsSourceManager
m_Vertex	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		Resource_mgr<GLProgramSource> m_Vertex;$/;"	m	class:GLProgramsSourceManager
m_listCompute	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		map<string,string> m_listCompute;$/;"	m	class:GLProgramsSourceManager
m_listFragment	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		map<string,string> m_listFragment;$/;"	m	class:GLProgramsSourceManager
m_listGeometry	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		map<string,string> m_listGeometry;$/;"	m	class:GLProgramsSourceManager
m_listNamedStrings	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		map<string,string> m_listNamedStrings;$/;"	m	class:GLProgramsSourceManager
m_listTessControl	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		map<string,string> m_listTessControl;$/;"	m	class:GLProgramsSourceManager
m_listTessEvaluation	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		map<string,string> m_listTessEvaluation;$/;"	m	class:GLProgramsSourceManager
m_listVertex	Engine/OpenGL/Managers/GLProgramsSourceManager.h	/^		map<string,string> m_listVertex;$/;"	m	class:GLProgramsSourceManager
GLUniformBlock	Engine/OpenGL/Managers/GLUniformBlock.cpp	/^GLUniformBlock::GLUniformBlock(string name,GLProgram* program,int index,GLint size,bool shared):$/;"	f	class:GLUniformBlock
attachBuffer	Engine/OpenGL/Managers/GLUniformBlock.cpp	/^void GLUniformBlock::attachBuffer(GPUBuffer *u)$/;"	f	class:GLUniformBlock
bindBuffer	Engine/OpenGL/Managers/GLUniformBlock.cpp	/^void GLUniformBlock::bindBuffer()$/;"	f	class:GLUniformBlock
bindBuffer	Engine/OpenGL/Managers/GLUniformBlock.cpp	/^void GLUniformBlock::bindBuffer(GLint bindingPoint)$/;"	f	class:GLUniformBlock
getName	Engine/OpenGL/Managers/GLUniformBlock.cpp	/^string GLUniformBlock::getName()$/;"	f	class:GLUniformBlock
getUniformBuffer	Engine/OpenGL/Managers/GLUniformBlock.cpp	/^GLuint GLUniformBlock::getUniformBuffer()$/;"	f	class:GLUniformBlock
~GLUniformBlock	Engine/OpenGL/Managers/GLUniformBlock.cpp	/^GLUniformBlock::~GLUniformBlock()$/;"	f	class:GLUniformBlock
FRAGMENT_BINDING_START	Engine/OpenGL/Managers/GLUniformBlock.h	23;"	d
GEOMETRY_BINDING_START	Engine/OpenGL/Managers/GLUniformBlock.h	20;"	d
GLUniformBlock	Engine/OpenGL/Managers/GLUniformBlock.h	/^class GLUniformBlock$/;"	c
LIGHTING_BINDING	Engine/OpenGL/Managers/GLUniformBlock.h	24;"	d
MISC_BINDING_START	Engine/OpenGL/Managers/GLUniformBlock.h	25;"	d
TESS_CONTROL_BINDING_START	Engine/OpenGL/Managers/GLUniformBlock.h	21;"	d
TESS_EVALUATION_BINDING_START	Engine/OpenGL/Managers/GLUniformBlock.h	22;"	d
VERTEX_BINDING_START	Engine/OpenGL/Managers/GLUniformBlock.h	19;"	d
_GLUNIFORMBLOCK_H	Engine/OpenGL/Managers/GLUniformBlock.h	8;"	d
m_BindingPoint	Engine/OpenGL/Managers/GLUniformBlock.h	/^		GLuint m_BindingPoint;$/;"	m	class:GLUniformBlock
m_BlockIndex	Engine/OpenGL/Managers/GLUniformBlock.h	/^		GLuint m_BlockIndex;$/;"	m	class:GLUniformBlock
m_Index	Engine/OpenGL/Managers/GLUniformBlock.h	/^		int m_Index;$/;"	m	class:GLUniformBlock
m_Name	Engine/OpenGL/Managers/GLUniformBlock.h	/^		string m_Name;$/;"	m	class:GLUniformBlock
m_Program	Engine/OpenGL/Managers/GLUniformBlock.h	/^		GLProgram* m_Program;$/;"	m	class:GLUniformBlock
m_Shared	Engine/OpenGL/Managers/GLUniformBlock.h	/^		bool m_Shared;$/;"	m	class:GLUniformBlock
m_Size	Engine/OpenGL/Managers/GLUniformBlock.h	/^		GLint m_Size;$/;"	m	class:GLUniformBlock
ubo	Engine/OpenGL/Managers/GLUniformBlock.h	/^		GPUBuffer *ubo;$/;"	m	class:GLUniformBlock
GLUniformManager	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GLUniformManager::GLUniformManager(GLProgram *program)$/;"	f	class:GLUniformManager
bindUniformBuffers	Engine/OpenGL/Managers/GLUniformManager.cpp	/^void GLUniformManager::bindUniformBuffers()$/;"	f	class:GLUniformManager
createGPUVariable	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUVariableBase* GLUniformManager::createGPUVariable( GLenum type,string name,GLint program,GLuint uBuffer,GLint offset,GLint loc,GLint size)$/;"	f	class:GLUniformManager
getGPUbool	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUbool* GLUniformManager::getGPUbool(string name)$/;"	f	class:GLUniformManager
getGPUdmat2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdmat2* GLUniformManager::getGPUdmat2(string name)$/;"	f	class:GLUniformManager
getGPUdmat3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdmat3* GLUniformManager::getGPUdmat3(string name)$/;"	f	class:GLUniformManager
getGPUdmat4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdmat4* GLUniformManager::getGPUdmat4(string name)$/;"	f	class:GLUniformManager
getGPUdouble	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdouble* GLUniformManager::getGPUdouble(string name)$/;"	f	class:GLUniformManager
getGPUdvec2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdvec2* GLUniformManager::getGPUdvec2(string name)$/;"	f	class:GLUniformManager
getGPUdvec3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdvec3* GLUniformManager::getGPUdvec3(string name)$/;"	f	class:GLUniformManager
getGPUdvec4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdvec4* GLUniformManager::getGPUdvec4(string name)$/;"	f	class:GLUniformManager
getGPUfloat	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUfloat* GLUniformManager::getGPUfloat(string name)$/;"	f	class:GLUniformManager
getGPUimage	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUimage* GLUniformManager::getGPUimage(string name)$/;"	f	class:GLUniformManager
getGPUint	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUint* GLUniformManager::getGPUint(string name)$/;"	f	class:GLUniformManager
getGPUivec2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUivec2* GLUniformManager::getGPUivec2(string name)$/;"	f	class:GLUniformManager
getGPUivec3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUivec3* GLUniformManager::getGPUivec3(string name)$/;"	f	class:GLUniformManager
getGPUivec4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUivec4* GLUniformManager::getGPUivec4(string name)$/;"	f	class:GLUniformManager
getGPUmat2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUmat2* GLUniformManager::getGPUmat2(string name)$/;"	f	class:GLUniformManager
getGPUmat3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUmat3* GLUniformManager::getGPUmat3(string name)$/;"	f	class:GLUniformManager
getGPUmat4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUmat4* GLUniformManager::getGPUmat4(string name)$/;"	f	class:GLUniformManager
getGPUsampler	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUsampler* GLUniformManager::getGPUsampler(string name)$/;"	f	class:GLUniformManager
getGPUvec2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUvec2* GLUniformManager::getGPUvec2(string name)$/;"	f	class:GLUniformManager
getGPUvec3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUvec3* GLUniformManager::getGPUvec3(string name)$/;"	f	class:GLUniformManager
getGPUvec4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUvec4* GLUniformManager::getGPUvec4(string name)$/;"	f	class:GLUniformManager
getUniformBase	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUVariableBase* GLUniformManager::getUniformBase(string name)$/;"	f	class:GLUniformManager
m_Dbool	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUbool GLUniformManager::m_Dbool = GPUbool();$/;"	m	class:GLUniformManager	file:
m_Ddmat2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdmat2 GLUniformManager::m_Ddmat2 = GPUdmat2();$/;"	m	class:GLUniformManager	file:
m_Ddmat3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdmat3 GLUniformManager::m_Ddmat3 = GPUdmat3();$/;"	m	class:GLUniformManager	file:
m_Ddmat4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdmat4 GLUniformManager::m_Ddmat4 = GPUdmat4();$/;"	m	class:GLUniformManager	file:
m_Ddouble	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdouble GLUniformManager::m_Ddouble = GPUdouble();$/;"	m	class:GLUniformManager	file:
m_Ddvec2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdvec2 GLUniformManager::m_Ddvec2 = GPUdvec2();$/;"	m	class:GLUniformManager	file:
m_Ddvec3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdvec3 GLUniformManager::m_Ddvec3 = GPUdvec3();$/;"	m	class:GLUniformManager	file:
m_Ddvec4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUdvec4 GLUniformManager::m_Ddvec4 = GPUdvec4();$/;"	m	class:GLUniformManager	file:
m_Dfloat	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUfloat GLUniformManager::m_Dfloat = GPUfloat();$/;"	m	class:GLUniformManager	file:
m_Dimage	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUimage GLUniformManager::m_Dimage = GPUimage();$/;"	m	class:GLUniformManager	file:
m_Dint	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUint GLUniformManager::m_Dint = GPUint();$/;"	m	class:GLUniformManager	file:
m_Divec2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUivec2 GLUniformManager::m_Divec2 = GPUivec2();$/;"	m	class:GLUniformManager	file:
m_Divec3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUivec3 GLUniformManager::m_Divec3 = GPUivec3();$/;"	m	class:GLUniformManager	file:
m_Divec4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUivec4 GLUniformManager::m_Divec4 = GPUivec4();$/;"	m	class:GLUniformManager	file:
m_Dmat2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUmat2 GLUniformManager::m_Dmat2 = GPUmat2();$/;"	m	class:GLUniformManager	file:
m_Dmat3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUmat3 GLUniformManager::m_Dmat3 = GPUmat3();$/;"	m	class:GLUniformManager	file:
m_Dmat4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUmat4 GLUniformManager::m_Dmat4 = GPUmat4();$/;"	m	class:GLUniformManager	file:
m_Dsampler	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUsampler GLUniformManager::m_Dsampler = GPUsampler();$/;"	m	class:GLUniformManager	file:
m_Dvec2	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUvec2 GLUniformManager::m_Dvec2 = GPUvec2();$/;"	m	class:GLUniformManager	file:
m_Dvec3	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUvec3 GLUniformManager::m_Dvec3 = GPUvec3();$/;"	m	class:GLUniformManager	file:
m_Dvec4	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GPUvec4 GLUniformManager::m_Dvec4 = GPUvec4();$/;"	m	class:GLUniformManager	file:
mapBufferToBlock	Engine/OpenGL/Managers/GLUniformManager.cpp	/^void GLUniformManager::mapBufferToBlock(GPUBuffer* ubo,std::string blockName)$/;"	f	class:GLUniformManager
parseUniforms	Engine/OpenGL/Managers/GLUniformManager.cpp	/^void GLUniformManager::parseUniforms()$/;"	f	class:GLUniformManager
~GLUniformManager	Engine/OpenGL/Managers/GLUniformManager.cpp	/^GLUniformManager::~GLUniformManager()$/;"	f	class:GLUniformManager
GLUniformManager	Engine/OpenGL/Managers/GLUniformManager.h	/^class GLUniformManager$/;"	c
_GLUNIFORM_BUFFER_	Engine/OpenGL/Managers/GLUniformManager.h	2;"	d
listBlocks	Engine/OpenGL/Managers/GLUniformManager.h	/^		std::vector< GLUniformBlock* > listBlocks;$/;"	m	class:GLUniformManager
listImages	Engine/OpenGL/Managers/GLUniformManager.h	/^		map< string, GPUimage*> listImages;$/;"	m	class:GLUniformManager
listSamplers	Engine/OpenGL/Managers/GLUniformManager.h	/^		map< string, GPUsampler*> listSamplers;		$/;"	m	class:GLUniformManager
m_Dbool	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUbool m_Dbool;$/;"	m	class:GLUniformManager
m_Ddmat2	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUdmat2 m_Ddmat2;$/;"	m	class:GLUniformManager
m_Ddmat3	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUdmat3 m_Ddmat3;$/;"	m	class:GLUniformManager
m_Ddmat4	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUdmat4 m_Ddmat4;$/;"	m	class:GLUniformManager
m_Ddouble	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUdouble m_Ddouble;$/;"	m	class:GLUniformManager
m_Ddvec2	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUdvec2 m_Ddvec2;$/;"	m	class:GLUniformManager
m_Ddvec3	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUdvec3 m_Ddvec3;$/;"	m	class:GLUniformManager
m_Ddvec4	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUdvec4 m_Ddvec4;$/;"	m	class:GLUniformManager
m_Dfloat	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUfloat m_Dfloat;$/;"	m	class:GLUniformManager
m_Dimage	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUimage m_Dimage;$/;"	m	class:GLUniformManager
m_Dint	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUint m_Dint;$/;"	m	class:GLUniformManager
m_Divec2	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUivec2 m_Divec2;$/;"	m	class:GLUniformManager
m_Divec3	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUivec3 m_Divec3;$/;"	m	class:GLUniformManager
m_Divec4	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUivec4 m_Divec4;$/;"	m	class:GLUniformManager
m_Dmat2	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUmat2 m_Dmat2;$/;"	m	class:GLUniformManager
m_Dmat3	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUmat3 m_Dmat3;$/;"	m	class:GLUniformManager
m_Dmat4	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUmat4 m_Dmat4;$/;"	m	class:GLUniformManager
m_Dsampler	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUsampler m_Dsampler;		$/;"	m	class:GLUniformManager
m_Dvec2	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUvec2 m_Dvec2;$/;"	m	class:GLUniformManager
m_Dvec3	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUvec3 m_Dvec3;$/;"	m	class:GLUniformManager
m_Dvec4	Engine/OpenGL/Managers/GLUniformManager.h	/^		static GPUvec4 m_Dvec4;$/;"	m	class:GLUniformManager
m_Program	Engine/OpenGL/Managers/GLUniformManager.h	/^		GLProgram* m_Program;$/;"	m	class:GLUniformManager
m_UBuffer	Engine/OpenGL/Managers/GLUniformManager.h	/^		GLuint m_UBuffer;$/;"	m	class:GLUniformManager
m_Uniforms	Engine/OpenGL/Managers/GLUniformManager.h	/^		map< string  , GPUVariableBase* > m_Uniforms;$/;"	m	class:GLUniformManager
GPUVariable	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  GPUVariable(){};$/;"	f	class:GPUVariable
GPUVariable	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  GPUVariable(string name,GLint program,GLuint UBuffer,GLuint offset,GLuint loc,GLuint size,GLenum type):$/;"	f	class:GPUVariable
GPUVariable	Engine/OpenGL/Managers/GPUVariable.hpp	/^template <typename T> class GPUVariable : public GPUVariableBase	$/;"	c
GPUVariableBase	Engine/OpenGL/Managers/GPUVariable.hpp	/^	 GPUVariableBase(){};$/;"	f	class:GPUVariableBase
GPUVariableBase	Engine/OpenGL/Managers/GPUVariable.hpp	/^	 GPUVariableBase(string name,GLint program,GLuint UBuffer,GLuint offset,GLuint loc,GLuint size,GLenum type)$/;"	f	class:GPUVariableBase
GPUVariableBase	Engine/OpenGL/Managers/GPUVariable.hpp	/^class GPUVariableBase$/;"	c
GPUbool	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef GPUVariable<int> GPUbool;$/;"	t
GPUdmat2	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::dmat2> GPUdmat2;$/;"	t
GPUdmat3	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::dmat3> GPUdmat3;$/;"	t
GPUdmat4	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::dmat4> GPUdmat4;$/;"	t
GPUdouble	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<double> GPUdouble;$/;"	t
GPUdvec2	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::dvec2> GPUdvec2;$/;"	t
GPUdvec3	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::dvec3> GPUdvec3;$/;"	t
GPUdvec4	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::dvec4> GPUdvec4;$/;"	t
GPUfloat	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<float> GPUfloat;$/;"	t
GPUimage	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  GPUimage(){};$/;"	f	class:GPUimage
GPUimage	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  GPUimage(string name,GLint program,GLuint UBuffer,GLuint offset,GLuint loc,GLuint size,GLenum type):$/;"	f	class:GPUimage
GPUimage	Engine/OpenGL/Managers/GPUVariable.hpp	/^class GPUimage : public GPUVariableBase	$/;"	c
GPUint	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<int> GPUint;$/;"	t
GPUivec2	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::ivec2> GPUivec2;$/;"	t
GPUivec3	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::ivec3> GPUivec3;$/;"	t
GPUivec4	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::ivec2> GPUivec4;$/;"	t
GPUmat2	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::mat2> GPUmat2;$/;"	t
GPUmat3	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::mat3> GPUmat3;$/;"	t
GPUmat4	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::mat4> GPUmat4;$/;"	t
GPUsampler	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  GPUsampler(){};$/;"	f	class:GPUsampler
GPUsampler	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  GPUsampler(string name,GLint program,GLuint UBuffer,GLuint offset,GLuint loc,GLuint size,GLenum type):$/;"	f	class:GPUsampler
GPUsampler	Engine/OpenGL/Managers/GPUVariable.hpp	/^class GPUsampler : public GPUVariableBase	$/;"	c
GPUvec2	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::vec2> GPUvec2;$/;"	t
GPUvec3	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::vec3> GPUvec3;$/;"	t
GPUvec4	Engine/OpenGL/Managers/GPUVariable.hpp	/^typedef  GPUVariable<glm::vec4> GPUvec4;$/;"	t
Set	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  void Set()$/;"	f	class:GPUVariable
Set	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  void Set()$/;"	f	class:GPUsampler
Set	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  void Set(GLuint ta)$/;"	f	class:GPUimage
Set	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  void Set(GLuint64 t)$/;"	f	class:GPUsampler
Set	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  void Set(const T & ta) \/\/ optimisation n�cessaire pour glm : r�f�rence vers un objet non modifiable$/;"	f	class:GPUVariable
Set	Engine/OpenGL/Managers/GPUVariable.hpp	/^	virtual void Set(void* ta){};$/;"	f	class:GPUVariableBase
Setv	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  void Setv(int num,GLuint *ta)	\/\/ Unused$/;"	f	class:GPUimage
Setv	Engine/OpenGL/Managers/GPUVariable.hpp	/^	  void Setv(int num,T *ta)	\/\/ Set an array of num values$/;"	f	class:GPUVariable
_GPU_VARIABLE_	Engine/OpenGL/Managers/GPUVariable.hpp	2;"	d
getLoc	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLuint getLoc(){return m_Loc;};$/;"	f	class:GPUVariableBase
getName	Engine/OpenGL/Managers/GPUVariable.hpp	/^	std::string getName(){return m_Name;};$/;"	f	class:GPUVariableBase
getType	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLenum getType() {return m_Type;};$/;"	f	class:GPUVariableBase
getValue	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLuint getValue()$/;"	f	class:GPUimage
getValue	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLuint64 getValue()$/;"	f	class:GPUsampler
getValue	Engine/OpenGL/Managers/GPUVariable.hpp	/^	T getValue()$/;"	f	class:GPUVariable
m_Loc	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLint m_Loc;$/;"	m	class:GPUVariableBase
m_Name	Engine/OpenGL/Managers/GPUVariable.hpp	/^	string m_Name;$/;"	m	class:GPUVariableBase
m_Offset	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLint m_Offset;$/;"	m	class:GPUVariableBase
m_Program	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLint m_Program;$/;"	m	class:GPUVariableBase
m_Size	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLint m_Size;$/;"	m	class:GPUVariableBase
m_Type	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLenum m_Type;$/;"	m	class:GPUVariableBase
m_UBuffer	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLint m_UBuffer;$/;"	m	class:GPUVariableBase
m_Value	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLuint m_Value;$/;"	m	class:GPUimage
m_Value	Engine/OpenGL/Managers/GPUVariable.hpp	/^	GLuint64 m_Value;	$/;"	m	class:GPUsampler
m_Value	Engine/OpenGL/Managers/GPUVariable.hpp	/^	T m_Value;$/;"	m	class:GPUVariable
m_Value	Engine/OpenGL/Managers/GPUVariable.hpp	/^	void* m_Value;$/;"	m	class:GPUVariableBase
~GPUVariableBase	Engine/OpenGL/Managers/GPUVariable.hpp	/^	~GPUVariableBase(){};$/;"	f	class:GPUVariableBase
textFileRead	Engine/OpenGL/Managers/textfile.cpp	/^char *textFileRead(char *fn) {$/;"	f
textFileWrite	Engine/OpenGL/Managers/textfile.cpp	/^int textFileWrite(char *fn, char *s) {$/;"	f
MaterialGL	Engine/OpenGL/MaterialGL.cpp	/^MaterialGL::MaterialGL(string name, string className) :$/;"	f	class:MaterialGL
render	Engine/OpenGL/MaterialGL.cpp	/^void MaterialGL::render(Node *o)$/;"	f	class:MaterialGL
~MaterialGL	Engine/OpenGL/MaterialGL.cpp	/^MaterialGL::~MaterialGL()$/;"	f	class:MaterialGL
MaterialGL	Engine/OpenGL/MaterialGL.h	/^class MaterialGL : public Material$/;"	c
_MATERIALGL_	Engine/OpenGL/MaterialGL.h	2;"	d
fp	Engine/OpenGL/MaterialGL.h	/^		GLProgram *vp, *gp, *tcp, *tep, *fp;$/;"	m	class:MaterialGL
gp	Engine/OpenGL/MaterialGL.h	/^		GLProgram *vp, *gp, *tcp, *tep, *fp;$/;"	m	class:MaterialGL
m_ProgramPipeline	Engine/OpenGL/MaterialGL.h	/^		GLProgramPipeline* m_ProgramPipeline;$/;"	m	class:MaterialGL
tcp	Engine/OpenGL/MaterialGL.h	/^		GLProgram *vp, *gp, *tcp, *tep, *fp;$/;"	m	class:MaterialGL
tep	Engine/OpenGL/MaterialGL.h	/^		GLProgram *vp, *gp, *tcp, *tep, *fp;$/;"	m	class:MaterialGL
update	Engine/OpenGL/MaterialGL.h	/^		virtual void update(Node *o, const int elapsedTime){}$/;"	f	class:MaterialGL
vp	Engine/OpenGL/MaterialGL.h	/^		GLProgram *vp, *gp, *tcp, *tep, *fp;$/;"	m	class:MaterialGL
ModelGL	Engine/OpenGL/ModelGL.cpp	/^ModelGL::ModelGL(string name,bool loadnow):$/;"	f	class:ModelGL
drawGeometry	Engine/OpenGL/ModelGL.cpp	/^void ModelGL::drawGeometry(GLint type)$/;"	f	class:ModelGL
drawInstancedGeometry	Engine/OpenGL/ModelGL.cpp	/^void ModelGL::drawInstancedGeometry(GLint type, GLint nbInstance)$/;"	f	class:ModelGL
loadToGPU	Engine/OpenGL/ModelGL.cpp	/^void ModelGL::loadToGPU()$/;"	f	class:ModelGL
~ModelGL	Engine/OpenGL/ModelGL.cpp	/^ModelGL::~ModelGL()$/;"	f	class:ModelGL
ModelGL	Engine/OpenGL/ModelGL.h	/^class ModelGL : public Model$/;"	c
VA_Main	Engine/OpenGL/ModelGL.h	/^		unsigned int VA_Main;$/;"	m	class:ModelGL
VBO_Faces	Engine/OpenGL/ModelGL.h	/^		unsigned int VBO_Faces;$/;"	m	class:ModelGL
VBO_Normals	Engine/OpenGL/ModelGL.h	/^		unsigned int VBO_Normals;$/;"	m	class:ModelGL
VBO_Tangents	Engine/OpenGL/ModelGL.h	/^		unsigned int VBO_Tangents;$/;"	m	class:ModelGL
VBO_TexCoords	Engine/OpenGL/ModelGL.h	/^		unsigned int VBO_TexCoords;$/;"	m	class:ModelGL
VBO_Vertex	Engine/OpenGL/ModelGL.h	/^		unsigned int VBO_Vertex;$/;"	m	class:ModelGL
VBO_isBorderVertex	Engine/OpenGL/ModelGL.h	/^		unsigned int VBO_isBorderVertex;$/;"	m	class:ModelGL
_MODELGL_H	Engine/OpenGL/ModelGL.h	7;"	d
bboxGL	Engine/OpenGL/ModelGL.h	/^		BoundingBoxModelGL *bboxGL;$/;"	m	class:ModelGL
SceneLoaderGL	Engine/OpenGL/SceneLoaderGL.cpp	/^SceneLoaderGL::SceneLoaderGL()$/;"	f	class:SceneLoaderGL
addDefaultLight	Engine/OpenGL/SceneLoaderGL.cpp	/^void SceneLoaderGL::addDefaultLight(Node* targetnode)$/;"	f	class:SceneLoaderGL
convertFromAiMatrix	Engine/OpenGL/SceneLoaderGL.cpp	/^glm::mat4 SceneLoaderGL::convertFromAiMatrix(aiMatrix4x4 a)$/;"	f	class:SceneLoaderGL
createLightNode	Engine/OpenGL/SceneLoaderGL.cpp	/^LightNode* SceneLoaderGL::createLightNode(aiNode* node,aiLight* light) \/\/ TODO : add support for more complex light$/;"	f	class:SceneLoaderGL
createStandardNode	Engine/OpenGL/SceneLoaderGL.cpp	/^Node* SceneLoaderGL::createStandardNode(aiNode* node,const aiScene* scene)$/;"	f	class:SceneLoaderGL
loadCamera	Engine/OpenGL/SceneLoaderGL.cpp	/^void SceneLoaderGL::loadCamera(aiNode* n,aiCamera*  cam)$/;"	f	class:SceneLoaderGL
loadScene	Engine/OpenGL/SceneLoaderGL.cpp	/^Node* SceneLoaderGL::loadScene(string filename, bool SmoothNormal)$/;"	f	class:SceneLoaderGL
parseMaterial	Engine/OpenGL/SceneLoaderGL.cpp	/^Material* SceneLoaderGL::parseMaterial(aiMaterial* mat)$/;"	f	class:SceneLoaderGL
parseModel	Engine/OpenGL/SceneLoaderGL.cpp	/^Model* SceneLoaderGL::parseModel(aiMesh* mesh)$/;"	f	class:SceneLoaderGL
parseNodes	Engine/OpenGL/SceneLoaderGL.cpp	/^Node* SceneLoaderGL::parseNodes(aiNode* node,const aiScene* scene)$/;"	f	class:SceneLoaderGL
~SceneLoaderGL	Engine/OpenGL/SceneLoaderGL.cpp	/^SceneLoaderGL::~SceneLoaderGL()$/;"	f	class:SceneLoaderGL
SceneLoaderGL	Engine/OpenGL/SceneLoaderGL.h	/^class SceneLoaderGL $/;"	c
_SCENELOADERGL_H	Engine/OpenGL/SceneLoaderGL.h	13;"	d
gobScene	Engine/OpenGL/SceneLoaderGL.h	/^	Scene *gobScene;$/;"	m	class:SceneLoaderGL
GLProgram	Engine/OpenGL/v4/GLProgram.cpp	/^GLProgram::GLProgram(std::string name,GLenum type):$/;"	f	class:GLProgram
getName	Engine/OpenGL/v4/GLProgram.cpp	/^string GLProgram::getName()$/;"	f	class:GLProgram
getProgram	Engine/OpenGL/v4/GLProgram.cpp	/^GLuint GLProgram::getProgram()$/;"	f	class:GLProgram
getType	Engine/OpenGL/v4/GLProgram.cpp	/^GLenum GLProgram::getType()$/;"	f	class:GLProgram
isValid	Engine/OpenGL/v4/GLProgram.cpp	/^bool GLProgram::isValid()$/;"	f	class:GLProgram
prgMgr	Engine/OpenGL/v4/GLProgram.cpp	/^GLProgramsSourceManager GLProgram::prgMgr = GLProgramsSourceManager();$/;"	m	class:GLProgram	file:
uniforms	Engine/OpenGL/v4/GLProgram.cpp	/^GLUniformManager* GLProgram::uniforms()$/;"	f	class:GLProgram
~GLProgram	Engine/OpenGL/v4/GLProgram.cpp	/^GLProgram::~GLProgram()$/;"	f	class:GLProgram
GLProgram	Engine/OpenGL/v4/GLProgram.h	/^class GLProgram$/;"	c
_GLPROGRAM_H	Engine/OpenGL/v4/GLProgram.h	8;"	d
info_text	Engine/OpenGL/v4/GLProgram.h	/^		string info_text;$/;"	m	class:GLProgram
m_Name	Engine/OpenGL/v4/GLProgram.h	/^		string m_Name;$/;"	m	class:GLProgram
m_Type	Engine/OpenGL/v4/GLProgram.h	/^		GLenum m_Type;$/;"	m	class:GLProgram
m_UniformMgr	Engine/OpenGL/v4/GLProgram.h	/^		GLUniformManager *m_UniformMgr;$/;"	m	class:GLProgram
prgMgr	Engine/OpenGL/v4/GLProgram.h	/^		static GLProgramsSourceManager prgMgr;$/;"	m	class:GLProgram
src	Engine/OpenGL/v4/GLProgram.h	/^		GLProgramSource* src;$/;"	m	class:GLProgram
GLProgramPipeline	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^GLProgramPipeline::GLProgramPipeline(std::string name):$/;"	f	class:GLProgramPipeline
bind	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^void GLProgramPipeline::bind()$/;"	f	class:GLProgramPipeline
getProgram	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^GLuint GLProgramPipeline::getProgram()$/;"	f	class:GLProgramPipeline
link	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^bool GLProgramPipeline::link()$/;"	f	class:GLProgramPipeline
printInfoLog	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^void GLProgramPipeline::printInfoLog()$/;"	f	class:GLProgramPipeline
release	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^void GLProgramPipeline::release()$/;"	f	class:GLProgramPipeline
useProgramStage	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^void GLProgramPipeline::useProgramStage(GLenum programType, GLProgram *p)$/;"	f	class:GLProgramPipeline
~GLProgramPipeline	Engine/OpenGL/v4/GLProgramPipeline.cpp	/^GLProgramPipeline::~GLProgramPipeline()$/;"	f	class:GLProgramPipeline
GLProgramPipeline	Engine/OpenGL/v4/GLProgramPipeline.h	/^class  GLProgramPipeline$/;"	c
_GLPROGRAMPIPELINE_H	Engine/OpenGL/v4/GLProgramPipeline.h	8;"	d
compute	Engine/OpenGL/v4/GLProgramPipeline.h	/^		GLProgram* compute;$/;"	m	class:GLProgramPipeline
fragment	Engine/OpenGL/v4/GLProgramPipeline.h	/^		GLProgram* fragment;$/;"	m	class:GLProgramPipeline
geometry	Engine/OpenGL/v4/GLProgramPipeline.h	/^		GLProgram* geometry;$/;"	m	class:GLProgramPipeline
info_text	Engine/OpenGL/v4/GLProgramPipeline.h	/^		string info_text;$/;"	m	class:GLProgramPipeline
m_Name	Engine/OpenGL/v4/GLProgramPipeline.h	/^		std::string m_Name;$/;"	m	class:GLProgramPipeline
m_Pipeline	Engine/OpenGL/v4/GLProgramPipeline.h	/^		GLuint m_Pipeline;$/;"	m	class:GLProgramPipeline
tessControl	Engine/OpenGL/v4/GLProgramPipeline.h	/^		GLProgram* tessControl;$/;"	m	class:GLProgramPipeline
tessEvaluation	Engine/OpenGL/v4/GLProgramPipeline.h	/^		GLProgram* tessEvaluation;$/;"	m	class:GLProgramPipeline
vertex	Engine/OpenGL/v4/GLProgramPipeline.h	/^		GLProgram* vertex;$/;"	m	class:GLProgramPipeline
GLProgramSource	Engine/OpenGL/v4/GLProgramSource.cpp	/^GLProgramSource::GLProgramSource(std::string name)$/;"	f	class:GLProgramSource
createNamedString	Engine/OpenGL/v4/GLProgramSource.cpp	/^void GLProgramSource::createNamedString(string name, string filename)$/;"	f	class:GLProgramSource
createProgram	Engine/OpenGL/v4/GLProgramSource.cpp	/^bool GLProgramSource::createProgram(GLenum shaderType, std::string filename)$/;"	f	class:GLProgramSource
deleteNamedString	Engine/OpenGL/v4/GLProgramSource.cpp	/^void GLProgramSource::deleteNamedString(string name)$/;"	f	class:GLProgramSource
getProgram	Engine/OpenGL/v4/GLProgramSource.cpp	/^GLuint GLProgramSource::getProgram()$/;"	f	class:GLProgramSource
isValid	Engine/OpenGL/v4/GLProgramSource.cpp	/^bool GLProgramSource::isValid()$/;"	f	class:GLProgramSource
m_IncludeSource	Engine/OpenGL/v4/GLProgramSource.cpp	/^map<string, const char*> GLProgramSource::m_IncludeSource;$/;"	m	class:GLProgramSource	file:
noIncludes	Engine/OpenGL/v4/GLProgramSource.cpp	/^bool GLProgramSource::noIncludes = true;$/;"	m	class:GLProgramSource	file:
printErrorString	Engine/OpenGL/v4/GLProgramSource.cpp	/^string GLProgramSource::printErrorString()$/;"	f	class:GLProgramSource
printProgramInfoLog	Engine/OpenGL/v4/GLProgramSource.cpp	/^void GLProgramSource::printProgramInfoLog()$/;"	f	class:GLProgramSource
printShaderInfoLog	Engine/OpenGL/v4/GLProgramSource.cpp	/^void GLProgramSource::printShaderInfoLog(GLuint shader)$/;"	f	class:GLProgramSource
setFilename	Engine/OpenGL/v4/GLProgramSource.cpp	/^void GLProgramSource::setFilename(string pathfilename)$/;"	f	class:GLProgramSource
~GLProgramSource	Engine/OpenGL/v4/GLProgramSource.cpp	/^GLProgramSource::~GLProgramSource()$/;"	f	class:GLProgramSource
GLProgramSource	Engine/OpenGL/v4/GLProgramSource.h	/^class GLProgramSource$/;"	c
_GLPROGRAMSOURCE_H	Engine/OpenGL/v4/GLProgramSource.h	8;"	d
info_text	Engine/OpenGL/v4/GLProgramSource.h	/^		string info_text;$/;"	m	class:GLProgramSource
listOfIncludeFiles	Engine/OpenGL/v4/GLProgramSource.h	/^		vector<string> listOfIncludeFiles;$/;"	m	class:GLProgramSource
listOfLength	Engine/OpenGL/v4/GLProgramSource.h	/^		vector<int>	listOfLength;$/;"	m	class:GLProgramSource
listOfSources	Engine/OpenGL/v4/GLProgramSource.h	/^		vector<const char*> listOfSources;$/;"	m	class:GLProgramSource
loaded	Engine/OpenGL/v4/GLProgramSource.h	/^		bool loaded;$/;"	m	class:GLProgramSource
m_Filename	Engine/OpenGL/v4/GLProgramSource.h	/^		string m_Filename;$/;"	m	class:GLProgramSource
m_IncludeSource	Engine/OpenGL/v4/GLProgramSource.h	/^		static map<string, const char*> m_IncludeSource;$/;"	m	class:GLProgramSource
m_Program	Engine/OpenGL/v4/GLProgramSource.h	/^		GLuint m_Program;$/;"	m	class:GLProgramSource
noIncludes	Engine/OpenGL/v4/GLProgramSource.h	/^		static bool noIncludes;$/;"	m	class:GLProgramSource
shaderSource	Engine/OpenGL/v4/GLProgramSource.h	/^		string shaderSource;$/;"	m	class:GLProgramSource
shaderType	Engine/OpenGL/v4/GLProgramSource.h	/^		GLenum shaderType;$/;"	m	class:GLProgramSource
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
GPUArrayBuffer	GPUResources/Buffers/GPUArrayBuffer.cpp	/^GPUArrayBuffer::GPUArrayBuffer(string name) :$/;"	f	class:GPUArrayBuffer
bind	GPUResources/Buffers/GPUArrayBuffer.cpp	/^void GPUArrayBuffer::bind(int bindingPoint \/*= 0*\/)$/;"	f	class:GPUArrayBuffer
create	GPUResources/Buffers/GPUArrayBuffer.cpp	/^void GPUArrayBuffer::create(GLint size \/*= 0*\/, GLenum usage \/*= GL_STREAM_DRAW*\/)$/;"	f	class:GPUArrayBuffer
isBound	GPUResources/Buffers/GPUArrayBuffer.cpp	/^bool GPUArrayBuffer::isBound()$/;"	f	class:GPUArrayBuffer
mapRange	GPUResources/Buffers/GPUArrayBuffer.cpp	/^void* GPUArrayBuffer::mapRange(int offset, int lengthOfRange, GLbitfield accessFlags)$/;"	f	class:GPUArrayBuffer
release	GPUResources/Buffers/GPUArrayBuffer.cpp	/^void GPUArrayBuffer::release()$/;"	f	class:GPUArrayBuffer
unMap	GPUResources/Buffers/GPUArrayBuffer.cpp	/^void GPUArrayBuffer::unMap()$/;"	f	class:GPUArrayBuffer
GPUArrayBuffer	GPUResources/Buffers/GPUArrayBuffer.h	/^class GPUArrayBuffer : public GPUBuffer$/;"	c
_GPUArrayBuffer_H	GPUResources/Buffers/GPUArrayBuffer.h	8;"	d
bufferBound	GPUResources/Buffers/GPUArrayBuffer.h	/^	bool bufferBound;$/;"	m	class:GPUArrayBuffer
GPUBuffer	GPUResources/Buffers/GPUBuffer.cpp	/^GPUBuffer::GPUBuffer(string name):$/;"	f	class:GPUBuffer
Get	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::Get(int offsetInByte, int sizeInByte, void* value)$/;"	f	class:GPUBuffer
Set	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::Set(int offsetInByte, int sizeInByte, void* value)$/;"	f	class:GPUBuffer
bind	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::bind(int bindingPoint \/* = -1 *\/)$/;"	f	class:GPUBuffer
create	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::create(GLint size,GLenum type, GLenum usage)$/;"	f	class:GPUBuffer
destroy	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::destroy()$/;"	f	class:GPUBuffer
getBuffer	GPUResources/Buffers/GPUBuffer.cpp	/^GLuint GPUBuffer::getBuffer()$/;"	f	class:GPUBuffer
getType	GPUResources/Buffers/GPUBuffer.cpp	/^GLenum GPUBuffer::getType()$/;"	f	class:GPUBuffer
isBound	GPUResources/Buffers/GPUBuffer.cpp	/^bool GPUBuffer::isBound()$/;"	f	class:GPUBuffer
map	GPUResources/Buffers/GPUBuffer.cpp	/^void* GPUBuffer::map(GLenum accessFlag)$/;"	f	class:GPUBuffer
mapRange	GPUResources/Buffers/GPUBuffer.cpp	/^void* GPUBuffer::mapRange(int offset, int lengthOfRange, GLbitfield accessFlags)$/;"	f	class:GPUBuffer
release	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::release(int fromBindingPoint \/* = -1 *\/)$/;"	f	class:GPUBuffer
setBindingPoint	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::setBindingPoint(int bindingPoint)$/;"	f	class:GPUBuffer
unMap	GPUResources/Buffers/GPUBuffer.cpp	/^void GPUBuffer::unMap()$/;"	f	class:GPUBuffer
~GPUBuffer	GPUResources/Buffers/GPUBuffer.cpp	/^GPUBuffer::~GPUBuffer()$/;"	f	class:GPUBuffer
GPUBuffer	GPUResources/Buffers/GPUBuffer.h	/^class GPUBuffer : public Resource$/;"	c
_GPUBuffer_H	GPUResources/Buffers/GPUBuffer.h	8;"	d
m_BindingPoint	GPUResources/Buffers/GPUBuffer.h	/^		GLuint m_BindingPoint;$/;"	m	class:GPUBuffer
m_BlockIndex	GPUResources/Buffers/GPUBuffer.h	/^		GLuint m_BlockIndex;$/;"	m	class:GPUBuffer
m_Buffer	GPUResources/Buffers/GPUBuffer.h	/^		GLuint m_Buffer;$/;"	m	class:GPUBuffer
m_Size	GPUResources/Buffers/GPUBuffer.h	/^		GLint m_Size;$/;"	m	class:GPUBuffer
m_Type	GPUResources/Buffers/GPUBuffer.h	/^		GLenum m_Type;$/;"	m	class:GPUBuffer
m_isBound	GPUResources/Buffers/GPUBuffer.h	/^		bool m_isBound;$/;"	m	class:GPUBuffer
m_oldBindingPoint	GPUResources/Buffers/GPUBuffer.h	/^		GLuint m_oldBindingPoint;$/;"	m	class:GPUBuffer
maximumBinding	GPUResources/Buffers/GPUBuffer.h	/^		GLint maximumBinding;$/;"	m	class:GPUBuffer
GPUIBuffer	GPUResources/Buffers/GPUIBuffer.cpp	/^GPUIBuffer::GPUIBuffer(string name):$/;"	f	class:GPUIBuffer
bind	GPUResources/Buffers/GPUIBuffer.cpp	/^void GPUIBuffer::bind()$/;"	f	class:GPUIBuffer
bind	GPUResources/Buffers/GPUIBuffer.cpp	/^void GPUIBuffer::bind(int bindingPoint)$/;"	f	class:GPUIBuffer
create	GPUResources/Buffers/GPUIBuffer.cpp	/^void GPUIBuffer::create(GLenum target, GLsizeiptr size,const GLvoid * data, GLbitfield flags)$/;"	f	class:GPUIBuffer
destroy	GPUResources/Buffers/GPUIBuffer.cpp	/^void GPUIBuffer::destroy()$/;"	f	class:GPUIBuffer
getBuffer	GPUResources/Buffers/GPUIBuffer.cpp	/^GLuint GPUIBuffer::getBuffer()$/;"	f	class:GPUIBuffer
release	GPUResources/Buffers/GPUIBuffer.cpp	/^void GPUIBuffer::release()$/;"	f	class:GPUIBuffer
~GPUIBuffer	GPUResources/Buffers/GPUIBuffer.cpp	/^GPUIBuffer::~GPUIBuffer()$/;"	f	class:GPUIBuffer
GPUIBuffer	GPUResources/Buffers/GPUIBuffer.h	/^class GPUIBuffer : public Resource$/;"	c
_GPUIBuffer_H	GPUResources/Buffers/GPUIBuffer.h	8;"	d
m_BindingPoint	GPUResources/Buffers/GPUIBuffer.h	/^		GLuint m_BindingPoint;$/;"	m	class:GPUIBuffer
m_BlockIndex	GPUResources/Buffers/GPUIBuffer.h	/^		GLuint m_BlockIndex;$/;"	m	class:GPUIBuffer
m_Buffer	GPUResources/Buffers/GPUIBuffer.h	/^		GLuint m_Buffer;$/;"	m	class:GPUIBuffer
m_Size	GPUResources/Buffers/GPUIBuffer.h	/^		GLint m_Size;$/;"	m	class:GPUIBuffer
m_Target	GPUResources/Buffers/GPUIBuffer.h	/^		GLenum m_Target;$/;"	m	class:GPUIBuffer
GPUShaderStorageBuffer	GPUResources/Buffers/GPUShaderStorageBuffer.cpp	/^GPUShaderStorageBuffer::GPUShaderStorageBuffer(string name) :$/;"	f	class:GPUShaderStorageBuffer
create	GPUResources/Buffers/GPUShaderStorageBuffer.cpp	/^void GPUShaderStorageBuffer::create(GLint size \/*= 0*\/, GLenum usage \/*= GL_STREAM_DRAW*\/) $/;"	f	class:GPUShaderStorageBuffer
map	GPUResources/Buffers/GPUShaderStorageBuffer.cpp	/^void* GPUShaderStorageBuffer::map(GLenum accessFlag)$/;"	f	class:GPUShaderStorageBuffer
mapRange	GPUResources/Buffers/GPUShaderStorageBuffer.cpp	/^void* GPUShaderStorageBuffer::mapRange(int offset, int lengthOfRange, GLbitfield accessFlags)$/;"	f	class:GPUShaderStorageBuffer
setBindingPoint	GPUResources/Buffers/GPUShaderStorageBuffer.cpp	/^void GPUShaderStorageBuffer::setBindingPoint(int bindingPoint)$/;"	f	class:GPUShaderStorageBuffer
unMap	GPUResources/Buffers/GPUShaderStorageBuffer.cpp	/^void GPUShaderStorageBuffer::unMap()$/;"	f	class:GPUShaderStorageBuffer
~GPUShaderStorageBuffer	GPUResources/Buffers/GPUShaderStorageBuffer.cpp	/^GPUShaderStorageBuffer::~GPUShaderStorageBuffer()$/;"	f	class:GPUShaderStorageBuffer
GPUShaderStorageBuffer	GPUResources/Buffers/GPUShaderStorageBuffer.h	/^class GPUShaderStorageBuffer : public GPUBuffer$/;"	c
_GPUShaderStorageBuffer_H	GPUResources/Buffers/GPUShaderStorageBuffer.h	7;"	d
GPUTEXTUREBUFFER_CPP_	GPUResources/Buffers/GPUTextureBuffer.cpp	9;"	d	file:
GPUTextureBuffer	GPUResources/Buffers/GPUTextureBuffer.cpp	/^GPUTextureBuffer::GPUTextureBuffer() : GPUBuffer("")$/;"	f	class:GPUTextureBuffer
GPUTextureBuffer	GPUResources/Buffers/GPUTextureBuffer.cpp	/^GPUTextureBuffer::GPUTextureBuffer(std::string name)$/;"	f	class:GPUTextureBuffer
bind	GPUResources/Buffers/GPUTextureBuffer.cpp	/^void GPUTextureBuffer::bind(int bindingPoint)$/;"	f	class:GPUTextureBuffer
bindAsTexture	GPUResources/Buffers/GPUTextureBuffer.cpp	/^void GPUTextureBuffer::bindAsTexture(int channel)$/;"	f	class:GPUTextureBuffer
create	GPUResources/Buffers/GPUTextureBuffer.cpp	/^bool GPUTextureBuffer::create(int size, GLenum bufferUsage, GLint textureFormat )$/;"	f	class:GPUTextureBuffer
mapRange	GPUResources/Buffers/GPUTextureBuffer.cpp	/^void* GPUTextureBuffer::mapRange(int offset, int lengthOfRange, GLbitfield accessFlags)$/;"	f	class:GPUTextureBuffer
release	GPUResources/Buffers/GPUTextureBuffer.cpp	/^void GPUTextureBuffer::release()$/;"	f	class:GPUTextureBuffer
releaseTexture	GPUResources/Buffers/GPUTextureBuffer.cpp	/^void GPUTextureBuffer::releaseTexture()$/;"	f	class:GPUTextureBuffer
transferBufferToTexture	GPUResources/Buffers/GPUTextureBuffer.cpp	/^void GPUTextureBuffer::transferBufferToTexture()$/;"	f	class:GPUTextureBuffer
unMap	GPUResources/Buffers/GPUTextureBuffer.cpp	/^void GPUTextureBuffer::unMap()$/;"	f	class:GPUTextureBuffer
GPUTEXTUREBUFFER_H_	GPUResources/Buffers/GPUTextureBuffer.h	9;"	d
GPUTextureBuffer	GPUResources/Buffers/GPUTextureBuffer.h	/^class GPUTextureBuffer : public GPUBuffer$/;"	c
bound_on_channel	GPUResources/Buffers/GPUTextureBuffer.h	/^	int bound_on_channel;$/;"	m	class:GPUTextureBuffer
bufferBound	GPUResources/Buffers/GPUTextureBuffer.h	/^	bool bufferBound;$/;"	m	class:GPUTextureBuffer
m_Format	GPUResources/Buffers/GPUTextureBuffer.h	/^	GLint m_Format;$/;"	m	class:GPUTextureBuffer
m_TextureId	GPUResources/Buffers/GPUTextureBuffer.h	/^	GLuint m_TextureId;$/;"	m	class:GPUTextureBuffer
CheckFramebufferStatus	GPUResources/FBO/GPUFBO.cpp	/^bool  GPUFBO::CheckFramebufferStatus()$/;"	f	class:GPUFBO
GPUFBO	GPUResources/FBO/GPUFBO.cpp	/^GPUFBO::GPUFBO(std::string name):$/;"	f	class:GPUFBO
bindColorTexture	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::bindColorTexture(int channel,int layer )$/;"	f	class:GPUFBO
bindDepthTexture	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::bindDepthTexture(int channel )$/;"	f	class:GPUFBO
bindLayerToBuffer	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::bindLayerToBuffer(int layer, int buffer){$/;"	f	class:GPUFBO
buffers	GPUResources/FBO/GPUFBO.cpp	/^static GLenum buffers[4] = {GL_COLOR_ATTACHMENT0,GL_COLOR_ATTACHMENT1,GL_COLOR_ATTACHMENT2,GL_COLOR_ATTACHMENT3};$/;"	v	file:
create	GPUResources/FBO/GPUFBO.cpp	/^bool GPUFBO::create(int w,int h,int numberOfTarget,bool useDepth,GLint format,GLint typeOfTarget,int layerDepth)$/;"	f	class:GPUFBO
destroy	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::destroy()$/;"	f	class:GPUFBO
disable	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::disable()$/;"	f	class:GPUFBO
display	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::display(const glm::vec4 & box,int layer)$/;"	f	class:GPUFBO
displayDepth	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::displayDepth(const glm::vec4 & box)$/;"	f	class:GPUFBO
drawBuffer	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::drawBuffer(int i)$/;"	f	class:GPUFBO
drawBuffers	GPUResources/FBO/GPUFBO.cpp	/^void  GPUFBO::drawBuffers(int i)$/;"	f	class:GPUFBO
enable	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::enable()$/;"	f	class:GPUFBO
enable	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::enable(int layer,int attachment)$/;"	f	class:GPUFBO
getColorTexture	GPUResources/FBO/GPUFBO.cpp	/^GPUTexture* GPUFBO::getColorTexture(int i)$/;"	f	class:GPUFBO
getDepthTexture	GPUResources/FBO/GPUFBO.cpp	/^GPUTexture* GPUFBO::getDepthTexture()$/;"	f	class:GPUFBO
getHeight	GPUResources/FBO/GPUFBO.cpp	/^int GPUFBO::getHeight()$/;"	f	class:GPUFBO
getWidth	GPUResources/FBO/GPUFBO.cpp	/^int GPUFBO::getWidth()$/;"	f	class:GPUFBO
isInitialized	GPUResources/FBO/GPUFBO.cpp	/^bool GPUFBO::isInitialized()$/;"	f	class:GPUFBO
releaseColorTexture	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::releaseColorTexture()$/;"	f	class:GPUFBO
releaseDepthTexture	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::releaseDepthTexture()$/;"	f	class:GPUFBO
setDepthBuffer	GPUResources/FBO/GPUFBO.cpp	/^void GPUFBO::setDepthBuffer(GPUTexture* de)$/;"	f	class:GPUFBO
toStr	GPUResources/FBO/GPUFBO.cpp	/^std::string toStr(int a)$/;"	f
~GPUFBO	GPUResources/FBO/GPUFBO.cpp	/^GPUFBO::~GPUFBO()$/;"	f	class:GPUFBO
FBOId	GPUResources/FBO/GPUFBO.h	/^	GLuint FBOId;$/;"	m	class:GPUFBO
GPUFBO	GPUResources/FBO/GPUFBO.h	/^class GPUFBO : public Resource$/;"	c
HUD	GPUResources/FBO/GPUFBO.h	/^	DisplayResource *HUD;$/;"	m	class:GPUFBO
HUDArray	GPUResources/FBO/GPUFBO.h	/^	DisplayLayer*	HUDArray;$/;"	m	class:GPUFBO
_GPUFBO_	GPUResources/FBO/GPUFBO.h	2;"	d
bufferIsBound	GPUResources/FBO/GPUFBO.h	/^	bool* bufferIsBound;$/;"	m	class:GPUFBO
colorBufferArray	GPUResources/FBO/GPUFBO.h	/^	GPUTexture2DArray*		colorBufferArray;$/;"	m	class:GPUFBO
colorBuffers	GPUResources/FBO/GPUFBO.h	/^	std::vector<GPUTexture*> colorBuffers;$/;"	m	class:GPUFBO
depthBuffer	GPUResources/FBO/GPUFBO.h	/^	GPUTexture* depthBuffer;$/;"	m	class:GPUFBO
height	GPUResources/FBO/GPUFBO.h	/^	int height;$/;"	m	class:GPUFBO
info_text	GPUResources/FBO/GPUFBO.h	/^	std::string info_text;$/;"	m	class:GPUFBO
initialized	GPUResources/FBO/GPUFBO.h	/^	bool initialized;$/;"	m	class:GPUFBO
layer_bound	GPUResources/FBO/GPUFBO.h	/^	int layer_bound;$/;"	m	class:GPUFBO
m_Target	GPUResources/FBO/GPUFBO.h	/^	GLuint m_Target;$/;"	m	class:GPUFBO
oldFB	GPUResources/FBO/GPUFBO.h	/^	int oldFB;$/;"	m	class:GPUFBO
scene	GPUResources/FBO/GPUFBO.h	/^	Scene *scene;$/;"	m	class:GPUFBO
use_depth	GPUResources/FBO/GPUFBO.h	/^	bool use_depth;$/;"	m	class:GPUFBO
width	GPUResources/FBO/GPUFBO.h	/^	int width;$/;"	m	class:GPUFBO
GPUQuery	GPUResources/Query/GPUQuery.cpp	/^GPUQuery::GPUQuery(string name, GLenum queryType) : Resource(name)$/;"	f	class:GPUQuery
begin	GPUResources/Query/GPUQuery.cpp	/^void GPUQuery::begin()$/;"	f	class:GPUQuery
create	GPUResources/Query/GPUQuery.cpp	/^void GPUQuery::create()$/;"	f	class:GPUQuery
destroy	GPUResources/Query/GPUQuery.cpp	/^void GPUQuery::destroy()$/;"	f	class:GPUQuery
end	GPUResources/Query/GPUQuery.cpp	/^void GPUQuery::end()$/;"	f	class:GPUQuery
getResultInt	GPUResources/Query/GPUQuery.cpp	/^GLint GPUQuery::getResultInt()$/;"	f	class:GPUQuery
getResultInt64	GPUResources/Query/GPUQuery.cpp	/^GLint64 GPUQuery::getResultInt64()$/;"	f	class:GPUQuery
getResultUInt	GPUResources/Query/GPUQuery.cpp	/^GLuint GPUQuery::getResultUInt()$/;"	f	class:GPUQuery
getResultUInt64	GPUResources/Query/GPUQuery.cpp	/^GLuint64 GPUQuery::getResultUInt64()$/;"	f	class:GPUQuery
~GPUQuery	GPUResources/Query/GPUQuery.cpp	/^GPUQuery::~GPUQuery()$/;"	f	class:GPUQuery
GPUQuery	GPUResources/Query/GPUQuery.h	/^class GPUQuery : public Resource$/;"	c
GPU_QUERY_H	GPUResources/Query/GPUQuery.h	2;"	d
m_queryBufferBack	GPUResources/Query/GPUQuery.h	/^	GLuint m_queryBufferBack;$/;"	m	class:GPUQuery
m_queryBufferFront	GPUResources/Query/GPUQuery.h	/^	GLuint m_queryBufferFront;$/;"	m	class:GPUQuery
m_queryId	GPUResources/Query/GPUQuery.h	/^	GLuint m_queryId[2][1];	\/\/ from lighthouse 3D : double query buffer to avoid application stall$/;"	m	class:GPUQuery
m_queryResult	GPUResources/Query/GPUQuery.h	/^	void*  m_queryResult;$/;"	m	class:GPUQuery
m_queryType	GPUResources/Query/GPUQuery.h	/^	GLenum m_queryType;$/;"	m	class:GPUQuery
m_updateResult	GPUResources/Query/GPUQuery.h	/^	bool m_updateResult;$/;"	m	class:GPUQuery
GPUTexImage	GPUResources/Textures/GPUTexImage.cpp	/^GPUTexImage::GPUTexImage(std::string name) : $/;"	f	class:GPUTexImage
bind	GPUResources/Textures/GPUTexImage.cpp	/^void GPUTexImage::bind(GLuint channel,GLenum accessmode,int level,GLenum format)$/;"	f	class:GPUTexImage
clear	GPUResources/Textures/GPUTexImage.cpp	/^void GPUTexImage::clear(const glm::vec4 & color)$/;"	f	class:GPUTexImage
create	GPUResources/Textures/GPUTexImage.cpp	/^bool GPUTexImage::create()$/;"	f	class:GPUTexImage
destroy	GPUResources/Textures/GPUTexImage.cpp	/^void GPUTexImage::destroy()$/;"	f	class:GPUTexImage
display	GPUResources/Textures/GPUTexImage.cpp	/^void GPUTexImage::display(const glm::vec4 & box)$/;"	f	class:GPUTexImage
fill	GPUResources/Textures/GPUTexImage.cpp	/^void GPUTexImage::fill(void* data)$/;"	f	class:GPUTexImage
formatToString	GPUResources/Textures/GPUTexImage.cpp	/^std::string GPUTexImage::formatToString(int format)$/;"	f	class:GPUTexImage
formatToType	GPUResources/Textures/GPUTexImage.cpp	/^int GPUTexImage::formatToType(int format)$/;"	f	class:GPUTexImage
loadSampler	GPUResources/Textures/GPUTexImage.cpp	/^void GPUTexImage::loadSampler()$/;"	f	class:GPUTexImage
release	GPUResources/Textures/GPUTexImage.cpp	/^void GPUTexImage::release()$/;"	f	class:GPUTexImage
~GPUTexImage	GPUResources/Textures/GPUTexImage.cpp	/^GPUTexImage::~GPUTexImage()$/;"	f	class:GPUTexImage
GPUTexImage	GPUResources/Textures/GPUTexImage.h	/^class GPUTexImage : public Resource$/;"	c
HUD	GPUResources/Textures/GPUTexImage.h	/^	DisplayImage *HUD;$/;"	m	class:GPUTexImage
_GPUTEXIMAGE_	GPUResources/Textures/GPUTexImage.h	2;"	d
bound_on_channel	GPUResources/Textures/GPUTexImage.h	/^	GLuint bound_on_channel;$/;"	m	class:GPUTexImage
m_Format	GPUResources/Textures/GPUTexImage.h	/^	GLenum m_Format;	$/;"	m	class:GPUTexImage
m_ImageId	GPUResources/Textures/GPUTexImage.h	/^	GLuint m_ImageId;$/;"	m	class:GPUTexImage
m_SamplerId	GPUResources/Textures/GPUTexImage.h	/^	GLuint m_SamplerId;$/;"	m	class:GPUTexImage
m_Target	GPUResources/Textures/GPUTexImage.h	/^	GLenum m_Target;$/;"	m	class:GPUTexImage
GPUTexImage2D	GPUResources/Textures/GPUTexImage2D.cpp	/^GPUTexImage2D::GPUTexImage2D(std::string name) : $/;"	f	class:GPUTexImage2D
bind	GPUResources/Textures/GPUTexImage2D.cpp	/^void GPUTexImage2D::bind(GLuint channel,GLenum accessmode,int level,GLenum format)$/;"	f	class:GPUTexImage2D
clear	GPUResources/Textures/GPUTexImage2D.cpp	/^void GPUTexImage2D::clear(const glm::vec4 & color)$/;"	f	class:GPUTexImage2D
create	GPUResources/Textures/GPUTexImage2D.cpp	/^bool GPUTexImage2D::create(int w ,int h , int level , GLint format)$/;"	f	class:GPUTexImage2D
fill	GPUResources/Textures/GPUTexImage2D.cpp	/^void GPUTexImage2D::fill(void* data,GLenum dataFormat,GLenum dataType)$/;"	f	class:GPUTexImage2D
height	GPUResources/Textures/GPUTexImage2D.cpp	/^int GPUTexImage2D::height()$/;"	f	class:GPUTexImage2D
release	GPUResources/Textures/GPUTexImage2D.cpp	/^void GPUTexImage2D::release()$/;"	f	class:GPUTexImage2D
width	GPUResources/Textures/GPUTexImage2D.cpp	/^int GPUTexImage2D::width()$/;"	f	class:GPUTexImage2D
~GPUTexImage2D	GPUResources/Textures/GPUTexImage2D.cpp	/^GPUTexImage2D::~GPUTexImage2D()$/;"	f	class:GPUTexImage2D
GPUTexImage2D	GPUResources/Textures/GPUTexImage2D.h	/^class GPUTexImage2D : public GPUTexImage$/;"	c
_GPUTexImage2D_	GPUResources/Textures/GPUTexImage2D.h	2;"	d
m_Height	GPUResources/Textures/GPUTexImage2D.h	/^		int m_Height;$/;"	m	class:GPUTexImage2D
m_Level	GPUResources/Textures/GPUTexImage2D.h	/^		int m_Level;$/;"	m	class:GPUTexImage2D
m_Width	GPUResources/Textures/GPUTexImage2D.h	/^		int m_Width;$/;"	m	class:GPUTexImage2D
GPUTexImage2DArray	GPUResources/Textures/GPUTexImage2DArray.cpp	/^GPUTexImage2DArray::GPUTexImage2DArray(std::string name) : $/;"	f	class:GPUTexImage2DArray
bind	GPUResources/Textures/GPUTexImage2DArray.cpp	/^void GPUTexImage2DArray::bind(GLuint channel,GLenum accessmode,int level,GLenum format)$/;"	f	class:GPUTexImage2DArray
bind	GPUResources/Textures/GPUTexImage2DArray.cpp	/^void GPUTexImage2DArray::bind(GLuint channel,int layer,GLenum accessmode,int level,GLenum format)$/;"	f	class:GPUTexImage2DArray
clear	GPUResources/Textures/GPUTexImage2DArray.cpp	/^void GPUTexImage2DArray::clear(const glm::vec4 & color)$/;"	f	class:GPUTexImage2DArray
clearLayer	GPUResources/Textures/GPUTexImage2DArray.cpp	/^void GPUTexImage2DArray::clearLayer(int layer,const glm::vec4 & color)$/;"	f	class:GPUTexImage2DArray
create	GPUResources/Textures/GPUTexImage2DArray.cpp	/^bool GPUTexImage2DArray::create(int w ,int h , int d,int level , GLint format)$/;"	f	class:GPUTexImage2DArray
depth	GPUResources/Textures/GPUTexImage2DArray.cpp	/^int GPUTexImage2DArray::depth()$/;"	f	class:GPUTexImage2DArray
display	GPUResources/Textures/GPUTexImage2DArray.cpp	/^void GPUTexImage2DArray::display(int layer, const glm::vec4 & box)$/;"	f	class:GPUTexImage2DArray
fill	GPUResources/Textures/GPUTexImage2DArray.cpp	/^void GPUTexImage2DArray::fill(void* data,int layer,GLenum internalFormat,GLenum dataType)$/;"	f	class:GPUTexImage2DArray
height	GPUResources/Textures/GPUTexImage2DArray.cpp	/^int GPUTexImage2DArray::height()$/;"	f	class:GPUTexImage2DArray
release	GPUResources/Textures/GPUTexImage2DArray.cpp	/^void GPUTexImage2DArray::release()$/;"	f	class:GPUTexImage2DArray
width	GPUResources/Textures/GPUTexImage2DArray.cpp	/^int GPUTexImage2DArray::width()$/;"	f	class:GPUTexImage2DArray
~GPUTexImage2DArray	GPUResources/Textures/GPUTexImage2DArray.cpp	/^GPUTexImage2DArray::~GPUTexImage2DArray()$/;"	f	class:GPUTexImage2DArray
GPUTexImage2DArray	GPUResources/Textures/GPUTexImage2DArray.h	/^class GPUTexImage2DArray : public GPUTexImage$/;"	c
_GPUTexImage2DArray_ARRAY_	GPUResources/Textures/GPUTexImage2DArray.h	2;"	d
m_Depth	GPUResources/Textures/GPUTexImage2DArray.h	/^		int m_Depth;$/;"	m	class:GPUTexImage2DArray
m_Height	GPUResources/Textures/GPUTexImage2DArray.h	/^		int m_Height;$/;"	m	class:GPUTexImage2DArray
m_Level	GPUResources/Textures/GPUTexImage2DArray.h	/^		int m_Level;$/;"	m	class:GPUTexImage2DArray
m_Width	GPUResources/Textures/GPUTexImage2DArray.h	/^		int m_Width;$/;"	m	class:GPUTexImage2DArray
GPUTexture	GPUResources/Textures/GPUTexture.cpp	/^GPUTexture::GPUTexture(std::string name):$/;"	f	class:GPUTexture
bind	GPUResources/Textures/GPUTexture.cpp	/^void GPUTexture::bind(int channel)$/;"	f	class:GPUTexture
create	GPUResources/Textures/GPUTexture.cpp	/^bool GPUTexture::create()$/;"	f	class:GPUTexture
destroy	GPUResources/Textures/GPUTexture.cpp	/^void GPUTexture::destroy()$/;"	f	class:GPUTexture
display	GPUResources/Textures/GPUTexture.cpp	/^void GPUTexture::display(const glm::vec4 & box)$/;"	f	class:GPUTexture
getHandle	GPUResources/Textures/GPUTexture.cpp	/^GLuint64 GPUTexture::getHandle()$/;"	f	class:GPUTexture
getId	GPUResources/Textures/GPUTexture.cpp	/^GLuint GPUTexture::getId()$/;"	f	class:GPUTexture
getSampler	GPUResources/Textures/GPUTexture.cpp	/^GLuint GPUTexture::getSampler()$/;"	f	class:GPUTexture
loadSampler	GPUResources/Textures/GPUTexture.cpp	/^void GPUTexture::loadSampler()$/;"	f	class:GPUTexture
makeResident	GPUResources/Textures/GPUTexture.cpp	/^void GPUTexture::makeResident()$/;"	f	class:GPUTexture
release	GPUResources/Textures/GPUTexture.cpp	/^void GPUTexture::release()$/;"	f	class:GPUTexture
setUpSampler	GPUResources/Textures/GPUTexture.cpp	/^void GPUTexture::setUpSampler(GLint wrap,GLint filter)$/;"	f	class:GPUTexture
~GPUTexture	GPUResources/Textures/GPUTexture.cpp	/^GPUTexture::~GPUTexture()$/;"	f	class:GPUTexture
GPUTexture	GPUResources/Textures/GPUTexture.h	/^class GPUTexture : public Resource$/;"	c
HUD	GPUResources/Textures/GPUTexture.h	/^	DisplayResource *HUD;$/;"	m	class:GPUTexture
bound_on_channel	GPUResources/Textures/GPUTexture.h	/^	GLuint bound_on_channel;$/;"	m	class:GPUTexture
m_Handle	GPUResources/Textures/GPUTexture.h	/^	GLuint64 m_Handle;$/;"	m	class:GPUTexture
m_SamplerId	GPUResources/Textures/GPUTexture.h	/^	GLuint m_SamplerId;$/;"	m	class:GPUTexture
m_Target	GPUResources/Textures/GPUTexture.h	/^	GLenum m_Target;$/;"	m	class:GPUTexture
m_TextureId	GPUResources/Textures/GPUTexture.h	/^	GLuint m_TextureId;$/;"	m	class:GPUTexture
resident	GPUResources/Textures/GPUTexture.h	/^	bool resident;$/;"	m	class:GPUTexture
GPUTexture1D	GPUResources/Textures/GPUTexture1D.cpp	/^GPUTexture1D::GPUTexture1D():$/;"	f	class:GPUTexture1D
GPUTexture1D	GPUResources/Textures/GPUTexture1D.cpp	/^GPUTexture1D::GPUTexture1D(std::string name):$/;"	f	class:GPUTexture1D
GPUTexture1D	GPUResources/Textures/GPUTexture1D.cpp	/^GPUTexture1D::GPUTexture1D(std::string name,int width,GLint internalformat,GLint format ,GLenum type):$/;"	f	class:GPUTexture1D
create	GPUResources/Textures/GPUTexture1D.cpp	/^bool GPUTexture1D::create(int width,GLint internalformat, GLint format,GLenum type)$/;"	f	class:GPUTexture1D
create	GPUResources/Textures/GPUTexture1D.cpp	/^bool GPUTexture1D::create(std::string filename)$/;"	f	class:GPUTexture1D
create	GPUResources/Textures/GPUTexture1D.cpp	/^bool GPUTexture1D::create(unsigned char *data, int width, int channels)  $/;"	f	class:GPUTexture1D
setUpSampler	GPUResources/Textures/GPUTexture1D.cpp	/^void GPUTexture1D::setUpSampler(GLint wrap,GLint filter)$/;"	f	class:GPUTexture1D
~GPUTexture1D	GPUResources/Textures/GPUTexture1D.cpp	/^GPUTexture1D::~GPUTexture1D()$/;"	f	class:GPUTexture1D
GPUTexture1D	GPUResources/Textures/GPUTexture1D.h	/^class GPUTexture1D : public GPUTexture$/;"	c
m_Width	GPUResources/Textures/GPUTexture1D.h	/^	int m_Width;$/;"	m	class:GPUTexture1D
GPUTexture2D	GPUResources/Textures/GPUTexture2D.cpp	/^GPUTexture2D::GPUTexture2D():$/;"	f	class:GPUTexture2D
GPUTexture2D	GPUResources/Textures/GPUTexture2D.cpp	/^GPUTexture2D::GPUTexture2D(std::string name,bool isResident):$/;"	f	class:GPUTexture2D
GPUTexture2D	GPUResources/Textures/GPUTexture2D.cpp	/^GPUTexture2D::GPUTexture2D(std::string name,int width,int height,GLint internalformat,GLint format ,GLenum type, bool isResident):$/;"	f	class:GPUTexture2D
create	GPUResources/Textures/GPUTexture2D.cpp	/^bool GPUTexture2D::create(int width,int height,GLint internalformat, GLint format,GLenum type, bool isResident)$/;"	f	class:GPUTexture2D
create	GPUResources/Textures/GPUTexture2D.cpp	/^bool GPUTexture2D::create(std::string filename)$/;"	f	class:GPUTexture2D
create	GPUResources/Textures/GPUTexture2D.cpp	/^bool GPUTexture2D::create(unsigned char *data, int width,int height, int channels)  $/;"	f	class:GPUTexture2D
setUpSampler	GPUResources/Textures/GPUTexture2D.cpp	/^void GPUTexture2D::setUpSampler(GLint wrap,GLint minifyingFilter,GLint magnificationFilter)$/;"	f	class:GPUTexture2D
~GPUTexture2D	GPUResources/Textures/GPUTexture2D.cpp	/^GPUTexture2D::~GPUTexture2D()$/;"	f	class:GPUTexture2D
GPUTexture2D	GPUResources/Textures/GPUTexture2D.h	/^class GPUTexture2D : public GPUTexture$/;"	c
m_Height	GPUResources/Textures/GPUTexture2D.h	/^	int  m_Height;$/;"	m	class:GPUTexture2D
m_Width	GPUResources/Textures/GPUTexture2D.h	/^	int m_Width;$/;"	m	class:GPUTexture2D
GPUTexture2DArray	GPUResources/Textures/GPUTexture2DArray.cpp	/^GPUTexture2DArray::GPUTexture2DArray():$/;"	f	class:GPUTexture2DArray
GPUTexture2DArray	GPUResources/Textures/GPUTexture2DArray.cpp	/^GPUTexture2DArray::GPUTexture2DArray(std::string name):$/;"	f	class:GPUTexture2DArray
GPUTexture2DArray	GPUResources/Textures/GPUTexture2DArray.cpp	/^GPUTexture2DArray::GPUTexture2DArray(std::string name,int width,int height,int depth,GLint internalformat,GLint format ,GLenum type):$/;"	f	class:GPUTexture2DArray
addLayer	GPUResources/Textures/GPUTexture2DArray.cpp	/^bool GPUTexture2DArray::addLayer(std::string filename, int layer,bool force, const glm::vec4 & defValue )$/;"	f	class:GPUTexture2DArray
addLayer	GPUResources/Textures/GPUTexture2DArray.cpp	/^bool GPUTexture2DArray::addLayer(unsigned char *data,int layer,int width,int height,int channels)  $/;"	f	class:GPUTexture2DArray
create	GPUResources/Textures/GPUTexture2DArray.cpp	/^bool GPUTexture2DArray::create(int width,int height,int depth,GLint internalformat, GLint format,GLenum type)$/;"	f	class:GPUTexture2DArray
setUpSampler	GPUResources/Textures/GPUTexture2DArray.cpp	/^void GPUTexture2DArray::setUpSampler(GLint wrap,GLint minifyingFilter,GLint magnificationFilter)$/;"	f	class:GPUTexture2DArray
~GPUTexture2DArray	GPUResources/Textures/GPUTexture2DArray.cpp	/^GPUTexture2DArray::~GPUTexture2DArray()$/;"	f	class:GPUTexture2DArray
GPUTexture2DArray	GPUResources/Textures/GPUTexture2DArray.h	/^class GPUTexture2DArray : public GPUTexture$/;"	c
m_Depth	GPUResources/Textures/GPUTexture2DArray.h	/^	int m_Depth;$/;"	m	class:GPUTexture2DArray
m_Height	GPUResources/Textures/GPUTexture2DArray.h	/^	int  m_Height;$/;"	m	class:GPUTexture2DArray
m_LayerCount	GPUResources/Textures/GPUTexture2DArray.h	/^	int m_LayerCount;$/;"	m	class:GPUTexture2DArray
m_Width	GPUResources/Textures/GPUTexture2DArray.h	/^	int m_Width;$/;"	m	class:GPUTexture2DArray
GPUTextureCubeMap	GPUResources/Textures/GPUTextureCubeMap.cpp	/^GPUTextureCubeMap::GPUTextureCubeMap(std::string name) : GPUTexture(name)$/;"	f	class:GPUTextureCubeMap
create	GPUResources/Textures/GPUTextureCubeMap.cpp	/^bool GPUTextureCubeMap::create(std::string file_right,std::string file_left,std::string file_top,std::string file_bottom,std::string file_back,std::string file_front)$/;"	f	class:GPUTextureCubeMap
setUpSampler	GPUResources/Textures/GPUTextureCubeMap.cpp	/^void GPUTextureCubeMap::setUpSampler(GLint wrap,GLint filter)$/;"	f	class:GPUTextureCubeMap
~GPUTextureCubeMap	GPUResources/Textures/GPUTextureCubeMap.cpp	/^GPUTextureCubeMap::~GPUTextureCubeMap()$/;"	f	class:GPUTextureCubeMap
GPUTextureCubeMap	GPUResources/Textures/GPUTextureCubeMap.h	/^class GPUTextureCubeMap : public GPUTexture$/;"	c
_GPUTextureCubeMap_H	GPUResources/Textures/GPUTextureCubeMap.h	2;"	d
BUFFER_OFFSET	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	4;"	d	file:
GPUTransformFeedback	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^GPUTransformFeedback::GPUTransformFeedback(std::string name)$/;"	f	class:GPUTransformFeedback
create	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^bool GPUTransformFeedback::create()$/;"	f	class:GPUTransformFeedback
destroy	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::destroy()$/;"	f	class:GPUTransformFeedback
disableRasterizer	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::disableRasterizer()$/;"	f	class:GPUTransformFeedback
draw	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::draw(int startingOffset, int count)$/;"	f	class:GPUTransformFeedback
enableRasterizer	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::enableRasterizer()$/;"	f	class:GPUTransformFeedback
end	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::end()$/;"	f	class:GPUTransformFeedback
getTransformFeedback	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^GLuint GPUTransformFeedback::getTransformFeedback()$/;"	f	class:GPUTransformFeedback
pause	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::pause()$/;"	f	class:GPUTransformFeedback
resume	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::resume()$/;"	f	class:GPUTransformFeedback
setPipeline	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::setPipeline( const char* outputVariablesNames[], int nbVariables, int varyingsStage, GLenum bufferMode, GLProgram* vertexShader, GLProgram* geometryShader, GLProgram* tesselationControlShader \/* = NULL *\/, GLProgram* tesselationEvalShader \/* = NULL *\/ )$/;"	f	class:GPUTransformFeedback
setTransformFeedbackBuffer	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::setTransformFeedbackBuffer(GPUBuffer* recordBuffer, int bindingPoint \/*= 0*\/)$/;"	f	class:GPUTransformFeedback
start	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^void GPUTransformFeedback::start(GPUBuffer* toDraw, GLenum primitiveMode, int sizeOfVertex, GLenum typeOfVertex, int stride)$/;"	f	class:GPUTransformFeedback
~GPUTransformFeedback	GPUResources/TransformFeedback/GPUTransformFeedback.cpp	/^GPUTransformFeedback::~GPUTransformFeedback()$/;"	f	class:GPUTransformFeedback
GPUTransformFeedback	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^class GPUTransformFeedback : public Resource$/;"	c
_GPUTransformFeedback_h	GPUResources/TransformFeedback/GPUTransformFeedback.h	2;"	d
m_DrawBuffer	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^	GPUBuffer*			m_DrawBuffer;$/;"	m	class:GPUTransformFeedback
m_PrimitiveMode	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^	GLenum				m_PrimitiveMode;				$/;"	m	class:GPUTransformFeedback
m_RecordBuffer	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^	GPUBuffer*			m_RecordBuffer;$/;"	m	class:GPUTransformFeedback
m_TransformFeedback	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^	GLuint				m_TransformFeedback;$/;"	m	class:GPUTransformFeedback
m_Varyings	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^	vector<std::string>	m_Varyings;$/;"	m	class:GPUTransformFeedback
m_VertexArray	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^	GLuint				m_VertexArray;$/;"	m	class:GPUTransformFeedback
m_transformPipeline	GPUResources/TransformFeedback/GPUTransformFeedback.h	/^	GLProgramPipeline*	m_transformPipeline;$/;"	m	class:GPUTransformFeedback
BoundingBoxMaterial	Materials/BoundingBoxMaterial/BoundingBoxMaterial.cpp	/^BoundingBoxMaterial::BoundingBoxMaterial(std::string name):$/;"	f	class:BoundingBoxMaterial
render	Materials/BoundingBoxMaterial/BoundingBoxMaterial.cpp	/^void BoundingBoxMaterial::render(Node *o)$/;"	f	class:BoundingBoxMaterial
update	Materials/BoundingBoxMaterial/BoundingBoxMaterial.cpp	/^void BoundingBoxMaterial::update(Node* o,const int elapsedTime)$/;"	f	class:BoundingBoxMaterial
~BoundingBoxMaterial	Materials/BoundingBoxMaterial/BoundingBoxMaterial.cpp	/^BoundingBoxMaterial::~BoundingBoxMaterial()$/;"	f	class:BoundingBoxMaterial
BoundingBoxMaterial	Materials/BoundingBoxMaterial/BoundingBoxMaterial.h	/^class BoundingBoxMaterial : public MaterialGL$/;"	c
_BOUNDINGBOXMATERIAL_H	Materials/BoundingBoxMaterial/BoundingBoxMaterial.h	2;"	d
modelM	Materials/BoundingBoxMaterial/BoundingBoxMaterial.h	/^		GPUmat4* modelM;$/;"	m	class:BoundingBoxMaterial
modelViewProj	Materials/BoundingBoxMaterial/BoundingBoxMaterial.h	/^		GPUmat4* modelViewProj;$/;"	m	class:BoundingBoxMaterial
ColorMaterial	Materials/ColorMaterial/ColorMaterial.cpp	/^ColorMaterial::ColorMaterial(std::string name, const glm::vec4 & c):$/;"	f	class:ColorMaterial
render	Materials/ColorMaterial/ColorMaterial.cpp	/^void ColorMaterial::render(Node *o)$/;"	f	class:ColorMaterial
setColor	Materials/ColorMaterial/ColorMaterial.cpp	/^void ColorMaterial::setColor(glm::vec4 & c)$/;"	f	class:ColorMaterial
update	Materials/ColorMaterial/ColorMaterial.cpp	/^void ColorMaterial::update(Node* o,const int elapsedTime)$/;"	f	class:ColorMaterial
~ColorMaterial	Materials/ColorMaterial/ColorMaterial.cpp	/^ColorMaterial::~ColorMaterial()$/;"	f	class:ColorMaterial
ColorMaterial	Materials/ColorMaterial/ColorMaterial.h	/^class ColorMaterial : public MaterialGL$/;"	c
_COLORMATERIAL_H	Materials/ColorMaterial/ColorMaterial.h	2;"	d
color	Materials/ColorMaterial/ColorMaterial.h	/^		GPUvec4* color;$/;"	m	class:ColorMaterial
modelM	Materials/ColorMaterial/ColorMaterial.h	/^		GPUmat4* modelM;$/;"	m	class:ColorMaterial
modelViewProj	Materials/ColorMaterial/ColorMaterial.h	/^		GPUmat4* modelViewProj;$/;"	m	class:ColorMaterial
projM	Materials/ColorMaterial/ColorMaterial.h	/^		GPUmat4* projM;$/;"	m	class:ColorMaterial
Part1By1	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::Part1By1(unsigned int x)$/;"	f	class:RandomGenerator
Part1By2	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::Part1By2(unsigned int x)$/;"	f	class:RandomGenerator
RandomGenerator	Materials/Common/Random/RandomGenerator.cpp	/^RandomGenerator::RandomGenerator()$/;"	f	class:RandomGenerator
RandomGenerator	Materials/Common/Random/RandomGenerator.cpp	/^RandomGenerator::RandomGenerator(float seed)$/;"	f	class:RandomGenerator
RandomGenerator	Materials/Common/Random/RandomGenerator.cpp	/^RandomGenerator::RandomGenerator(glm::vec2 seedCell)$/;"	f	class:RandomGenerator
RandomGenerator	Materials/Common/Random/RandomGenerator.cpp	/^RandomGenerator::RandomGenerator(glm::vec3 seedCell)$/;"	f	class:RandomGenerator
initRandom	Materials/Common/Random/RandomGenerator.cpp	/^void RandomGenerator::initRandom(float seed)$/;"	f	class:RandomGenerator
initRandom	Materials/Common/Random/RandomGenerator.cpp	/^void RandomGenerator::initRandom(vec2 seedCell)$/;"	f	class:RandomGenerator
initRandom	Materials/Common/Random/RandomGenerator.cpp	/^void RandomGenerator::initRandom(vec3 seedCell)$/;"	f	class:RandomGenerator
morton	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::morton(unsigned int x, unsigned int y)$/;"	f	class:RandomGenerator
morton2D	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::morton2D(unsigned int x, unsigned int y)$/;"	f	class:RandomGenerator
morton3D	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::morton3D(glm::vec3 v)$/;"	f	class:RandomGenerator
morton3D	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::morton3D(unsigned int x, unsigned int y, unsigned int z)$/;"	f	class:RandomGenerator
next	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::next()$/;"	f	class:RandomGenerator
poisson	Materials/Common/Random/RandomGenerator.cpp	/^unsigned int RandomGenerator::poisson(float mean)$/;"	f	class:RandomGenerator
random	Materials/Common/Random/RandomGenerator.cpp	/^float RandomGenerator::random()$/;"	f	class:RandomGenerator
randomIn	Materials/Common/Random/RandomGenerator.cpp	/^float RandomGenerator::randomIn(float min, float max)$/;"	f	class:RandomGenerator
randomIn	Materials/Common/Random/RandomGenerator.cpp	/^vec2 RandomGenerator::randomIn(vec2 min, vec2 max)$/;"	f	class:RandomGenerator
randomIn	Materials/Common/Random/RandomGenerator.cpp	/^vec3 RandomGenerator::randomIn(vec3 min, vec3 max)$/;"	f	class:RandomGenerator
randomVec2	Materials/Common/Random/RandomGenerator.cpp	/^vec2 RandomGenerator::randomVec2()$/;"	f	class:RandomGenerator
randomVec3	Materials/Common/Random/RandomGenerator.cpp	/^vec3 RandomGenerator::randomVec3()$/;"	f	class:RandomGenerator
seeding	Materials/Common/Random/RandomGenerator.cpp	/^void RandomGenerator::seeding(unsigned int s)$/;"	f	class:RandomGenerator
~RandomGenerator	Materials/Common/Random/RandomGenerator.cpp	/^RandomGenerator::~RandomGenerator()$/;"	f	class:RandomGenerator
RandomGenerator	Materials/Common/Random/RandomGenerator.h	/^class RandomGenerator \/* Random generator using morton code *\/$/;"	c
_RandomGenerator_h	Materials/Common/Random/RandomGenerator.h	2;"	d
seed	Materials/Common/Random/RandomGenerator.h	/^	unsigned int seed;$/;"	m	class:RandomGenerator
LightMaterial	Materials/LightMaterial/LightMaterial.cpp	/^LightMaterial::LightMaterial(std::string name, const glm::vec4 & c):$/;"	f	class:LightMaterial
render	Materials/LightMaterial/LightMaterial.cpp	/^void LightMaterial::render(Node *o)$/;"	f	class:LightMaterial
setColor	Materials/LightMaterial/LightMaterial.cpp	/^void LightMaterial::setColor(glm::vec4 & c)$/;"	f	class:LightMaterial
update	Materials/LightMaterial/LightMaterial.cpp	/^void LightMaterial::update(Node *o,const int elapsedtime)$/;"	f	class:LightMaterial
~LightMaterial	Materials/LightMaterial/LightMaterial.cpp	/^LightMaterial::~LightMaterial()$/;"	f	class:LightMaterial
LightMaterial	Materials/LightMaterial/LightMaterial.h	/^class LightMaterial : public MaterialGL$/;"	c
_LIGHT_MATERIAL	Materials/LightMaterial/LightMaterial.h	2;"	d
color	Materials/LightMaterial/LightMaterial.h	/^		GPUvec4* color;$/;"	m	class:LightMaterial
modelViewProj	Materials/LightMaterial/LightMaterial.h	/^		GPUmat4* modelViewProj;$/;"	m	class:LightMaterial
NormalMaterial	Materials/NormalMaterial/NormalMaterial.cpp	/^NormalMaterial::NormalMaterial(std::string name):$/;"	f	class:NormalMaterial
render	Materials/NormalMaterial/NormalMaterial.cpp	/^void NormalMaterial::render(Node *o)$/;"	f	class:NormalMaterial
updateCamera	Materials/NormalMaterial/NormalMaterial.cpp	/^void NormalMaterial::updateCamera()$/;"	f	class:NormalMaterial
~NormalMaterial	Materials/NormalMaterial/NormalMaterial.cpp	/^NormalMaterial::~NormalMaterial()$/;"	f	class:NormalMaterial
NormalMaterial	Materials/NormalMaterial/NormalMaterial.h	/^class NormalMaterial : public MaterialGL$/;"	c
_NORMAL_MATERIAL	Materials/NormalMaterial/NormalMaterial.h	2;"	d
modelMatrix	Materials/NormalMaterial/NormalMaterial.h	/^		GPUmat4* modelMatrix;$/;"	m	class:NormalMaterial
modelView	Materials/NormalMaterial/NormalMaterial.h	/^		GPUmat4* modelView;$/;"	m	class:NormalMaterial
modelViewProj	Materials/NormalMaterial/NormalMaterial.h	/^		GPUmat4* modelViewProj;$/;"	m	class:NormalMaterial
normalModelView	Materials/NormalMaterial/NormalMaterial.h	/^		GPUmat4* normalModelView;$/;"	m	class:NormalMaterial
zFar	Materials/NormalMaterial/NormalMaterial.h	/^		GPUfloat *zFar,*zNear;$/;"	m	class:NormalMaterial
zNear	Materials/NormalMaterial/NormalMaterial.h	/^		GPUfloat *zFar,*zNear;$/;"	m	class:NormalMaterial
PhongMaterial	Materials/PhongMaterial/PhongMaterial.cpp	/^PhongMaterial::PhongMaterial(std::string name,glm::vec3 color):$/;"	f	class:PhongMaterial
render	Materials/PhongMaterial/PhongMaterial.cpp	/^void PhongMaterial::render(Node *o)$/;"	f	class:PhongMaterial
~PhongMaterial	Materials/PhongMaterial/PhongMaterial.cpp	/^PhongMaterial::~PhongMaterial()$/;"	f	class:PhongMaterial
PhongMaterial	Materials/PhongMaterial/PhongMaterial.h	/^class PhongMaterial : public MaterialGL$/;"	c
camPos	Materials/PhongMaterial/PhongMaterial.h	/^		GPUvec3* camPos;$/;"	m	class:PhongMaterial
color	Materials/PhongMaterial/PhongMaterial.h	/^		GPUvec3* color;$/;"	m	class:PhongMaterial
lightColor	Materials/PhongMaterial/PhongMaterial.h	/^		GPUvec3* lightColor;$/;"	m	class:PhongMaterial
lightPos	Materials/PhongMaterial/PhongMaterial.h	/^		GPUvec3* lightPos;$/;"	m	class:PhongMaterial
modelView	Materials/PhongMaterial/PhongMaterial.h	/^		GPUmat4 *modelViewProj,*modelView,*modelViewF;$/;"	m	class:PhongMaterial
modelViewF	Materials/PhongMaterial/PhongMaterial.h	/^		GPUmat4 *modelViewProj,*modelView,*modelViewF;$/;"	m	class:PhongMaterial
modelViewProj	Materials/PhongMaterial/PhongMaterial.h	/^		GPUmat4 *modelViewProj,*modelView,*modelViewF;$/;"	m	class:PhongMaterial
TextureMaterial	Materials/TextureMaterial/TextureMaterial.cpp	/^TextureMaterial::TextureMaterial(std::string name, GPUTexture *color, GPUTexture *normal, LightingModelGL *lightingM) :$/;"	f	class:TextureMaterial
changeRes	Materials/TextureMaterial/TextureMaterial.cpp	/^void TextureMaterial::changeRes()$/;"	f	class:TextureMaterial
render	Materials/TextureMaterial/TextureMaterial.cpp	/^void TextureMaterial::render(Node *o)$/;"	f	class:TextureMaterial
setColorMap	Materials/TextureMaterial/TextureMaterial.cpp	/^void TextureMaterial::setColorMap(GPUTexture *color)$/;"	f	class:TextureMaterial
setNormalMap	Materials/TextureMaterial/TextureMaterial.cpp	/^void TextureMaterial::setNormalMap(GPUTexture *normal)$/;"	f	class:TextureMaterial
update	Materials/TextureMaterial/TextureMaterial.cpp	/^void TextureMaterial::update(Node* o, const int elapsedTime)$/;"	f	class:TextureMaterial
useNormal	Materials/TextureMaterial/TextureMaterial.cpp	/^void TextureMaterial::useNormal(bool b)$/;"	f	class:TextureMaterial
~TextureMaterial	Materials/TextureMaterial/TextureMaterial.cpp	/^TextureMaterial::~TextureMaterial()$/;"	f	class:TextureMaterial
TextureMaterial	Materials/TextureMaterial/TextureMaterial.h	/^class TextureMaterial : public MaterialGL$/;"	c
_TEXTURE_MATERIAL_H	Materials/TextureMaterial/TextureMaterial.h	2;"	d
colorSampler	Materials/TextureMaterial/TextureMaterial.h	/^		GPUsampler *colorSampler,*normalSampler;$/;"	m	class:TextureMaterial
colorTex	Materials/TextureMaterial/TextureMaterial.h	/^		GPUTexture *colorTex,*normalTex;$/;"	m	class:TextureMaterial
lighting	Materials/TextureMaterial/TextureMaterial.h	/^		LightingModelGL *lighting;$/;"	m	class:TextureMaterial
modelMatrix	Materials/TextureMaterial/TextureMaterial.h	/^		GPUmat4 *modelViewProj,*modelView,*modelViewF, *modelMatrix;$/;"	m	class:TextureMaterial
modelView	Materials/TextureMaterial/TextureMaterial.h	/^		GPUmat4 *modelViewProj,*modelView,*modelViewF, *modelMatrix;$/;"	m	class:TextureMaterial
modelViewF	Materials/TextureMaterial/TextureMaterial.h	/^		GPUmat4 *modelViewProj,*modelView,*modelViewF, *modelMatrix;$/;"	m	class:TextureMaterial
modelViewProj	Materials/TextureMaterial/TextureMaterial.h	/^		GPUmat4 *modelViewProj,*modelView,*modelViewF, *modelMatrix;$/;"	m	class:TextureMaterial
normalSampler	Materials/TextureMaterial/TextureMaterial.h	/^		GPUsampler *colorSampler,*normalSampler;$/;"	m	class:TextureMaterial
normalTex	Materials/TextureMaterial/TextureMaterial.h	/^		GPUTexture *colorTex,*normalTex;$/;"	m	class:TextureMaterial
test	Materials/TextureMaterial/TextureMaterial.h	/^		GPUsampler* test;$/;"	m	class:TextureMaterial
use_normal	Materials/TextureMaterial/TextureMaterial.h	/^		GPUbool *use_normal;$/;"	m	class:TextureMaterial
val	Materials/TextureMaterial/TextureMaterial.h	/^		int val;$/;"	m	class:TextureMaterial
valGpu	Materials/TextureMaterial/TextureMaterial.h	/^		GPUfloat* valGpu;$/;"	m	class:TextureMaterial
CAMERA	Test/Main.cpp	/^typedef enum {NODE,CAMERA} Interact_Target;$/;"	e	enum:__anon1	file:
Interact_Mode	Test/Main.cpp	/^typedef enum {TRANSLATE,ROTATE,NO_MOVE} Interact_Mode;$/;"	t	typeref:enum:__anon2	file:
Interact_Target	Test/Main.cpp	/^typedef enum {NODE,CAMERA} Interact_Target;$/;"	t	typeref:enum:__anon1	file:
M_PI	Test/Main.cpp	26;"	d	file:
NODE	Test/Main.cpp	/^typedef enum {NODE,CAMERA} Interact_Target;$/;"	e	enum:__anon1	file:
NO_MOVE	Test/Main.cpp	/^typedef enum {TRANSLATE,ROTATE,NO_MOVE} Interact_Mode;$/;"	e	enum:__anon2	file:
OnChar	Test/Main.cpp	/^void OnChar(GLFWwindow* win, unsigned int glfwChar)$/;"	f
OnKey	Test/Main.cpp	/^void OnKey(GLFWwindow* win, int glfwKey, int scancode, int glfwAction, int modifiers)$/;"	f
OnMouseButton	Test/Main.cpp	/^void OnMouseButton(GLFWwindow* win, int glfwButton, int glfwAction, int modifiers)$/;"	f
OnMousePos	Test/Main.cpp	/^void OnMousePos(GLFWwindow* win, double mouseX, double mouseY)$/;"	f
OnMouseWheel	Test/Main.cpp	/^void OnMouseWheel(GLFWwindow* win, double posx, double posy)$/;"	f
OnWindowSize	Test/Main.cpp	/^void OnWindowSize(GLFWwindow* win, int width, int height)$/;"	f
ROTATE	Test/Main.cpp	/^typedef enum {TRANSLATE,ROTATE,NO_MOVE} Interact_Mode;$/;"	e	enum:__anon2	file:
TRANSLATE	Test/Main.cpp	/^typedef enum {TRANSLATE,ROTATE,NO_MOVE} Interact_Mode;$/;"	e	enum:__anon2	file:
Wheight	Test/Main.cpp	/^int Wwidth,Wheight;$/;"	v
Wwidth	Test/Main.cpp	/^int Wwidth,Wheight;$/;"	v
animate	Test/Main.cpp	/^void animate(const int elapsedTime)$/;"	f
computeFps	Test/Main.cpp	/^void computeFps()$/;"	f
current_time	Test/Main.cpp	/^int64 start_time, current_time, last_time, fps_last_time;$/;"	v
draw	Test/Main.cpp	/^void draw()$/;"	f
eTime	Test/Main.cpp	/^float eTime = 0;$/;"	v
engine	Test/Main.cpp	/^EngineGL *engine = NULL;$/;"	v
error_callback	Test/Main.cpp	/^void error_callback(int error, const char* description)$/;"	f
fps_last_time	Test/Main.cpp	/^int64 start_time, current_time, last_time, fps_last_time;$/;"	v
frame	Test/Main.cpp	/^unsigned int frame;$/;"	v
frame_Num	Test/Main.cpp	/^int frame_Num = 0;$/;"	v
iMode	Test/Main.cpp	/^Interact_Mode iMode = NO_MOVE;$/;"	v
iTarget	Test/Main.cpp	/^Interact_Target iTarget = CAMERA;$/;"	v
init	Test/Main.cpp	/^bool init;$/;"	v
initSystem	Test/Main.cpp	/^bool initSystem()$/;"	f
last_time	Test/Main.cpp	/^int64 start_time, current_time, last_time, fps_last_time;$/;"	v
main	Test/Main.cpp	/^int main()$/;"	f
mainLoop	Test/Main.cpp	/^void mainLoop()$/;"	f
oldMouse	Test/Main.cpp	/^glm::vec3 oldMouse;$/;"	v
oldWheel	Test/Main.cpp	/^int oldWheel = 0;$/;"	v
projectOnSphere	Test/Main.cpp	/^glm::vec3 projectOnSphere(glm::vec2 pos)$/;"	f
scene	Test/Main.cpp	/^Scene *scene = NULL; $/;"	v
shutDown	Test/Main.cpp	/^void shutDown()$/;"	f
start_time	Test/Main.cpp	/^int64 start_time, current_time, last_time, fps_last_time;$/;"	v
timeTotal	Test/Main.cpp	/^int64 timeTotal = 0;$/;"	v
trackBallCamera	Test/Main.cpp	/^void trackBallCamera(Camera* cam, glm::vec3 nMouse, glm::vec3 &oMouse)$/;"	f
trackBallFrame	Test/Main.cpp	/^void trackBallFrame(Frame *f, Camera *cam, glm::vec3 nMouse, glm::vec3 &oMouse)$/;"	f
window	Test/Main.cpp	/^GLFWwindow* window = NULL;$/;"	v
USE_ASSIMP	Utils/Constants.h	8;"	d
_CONSTANTS_H	Utils/Constants.h	2;"	d
kernelsPath	Utils/Constants.h	/^const std::string kernelsPath = rootPath + "Kernels\/";$/;"	v
ressourceEffectPath	Utils/Constants.h	/^const std::string ressourceEffectPath = rootPath+"Effects\/";$/;"	v
ressourceGPUPath	Utils/Constants.h	/^const std::string ressourceGPUPath = rootPath+"Resources\/";$/;"	v
ressourceMaterialPath	Utils/Constants.h	/^const std::string ressourceMaterialPath = rootPath+"Materials\/";$/;"	v
ressourceObjPath	Utils/Constants.h	/^const std::string ressourceObjPath = rootPath+"Objets\/";$/;"	v
ressourceTexPath	Utils/Constants.h	/^const std::string ressourceTexPath = rootPath+"Textures\/";$/;"	v
rootPath	Utils/Constants.h	/^const std::string rootPath = ".\/";$/;"	v
DebugMessageCallback	Utils/GLError.cpp	/^void APIENTRY DebugMessageCallback$/;"	f
clearError	Utils/GLError.cpp	/^void GLError::clearError()$/;"	f	class:GLError
disableCallback	Utils/GLError.cpp	/^void GLError::disableCallback()$/;"	f	class:GLError
displayErrorLog	Utils/GLError.cpp	/^void GLError::displayErrorLog()$/;"	f	class:GLError
enableCallback	Utils/GLError.cpp	/^void GLError::enableCallback()$/;"	f	class:GLError
getLastErrorBase	Utils/GLError.cpp	/^string GLError::getLastErrorBase(string userMarkUp)$/;"	f	class:GLError
getLastErrorType	Utils/GLError.cpp	/^GLenum GLError::getLastErrorType()$/;"	f	class:GLError
sendDebugNotification	Utils/GLError.cpp	/^void GLError::sendDebugNotification(string message, bool testToSend)$/;"	f	class:GLError
GLError	Utils/GLError.h	/^class GLError$/;"	c
_GLERROR_H	Utils/GLError.h	2;"	d
GFLImageReader	Utils/ImageReader/ImageReader.cpp	/^GFLImageReader::GFLImageReader()$/;"	f	class:GFLImageReader
init	Utils/ImageReader/ImageReader.cpp	/^bool GFLImageReader::init = false;$/;"	m	class:GFLImageReader	file:
load2DTexture	Utils/ImageReader/ImageReader.cpp	/^unsigned int  GFLImageReader::load2DTexture(std::string filename, int twidth,int theight)$/;"	f	class:GFLImageReader
loadImage	Utils/ImageReader/ImageReader.cpp	/^GFL_BITMAP*  GFLImageReader::loadImage(std::string filename)$/;"	f	class:GFLImageReader
~GFLImageReader	Utils/ImageReader/ImageReader.cpp	/^GFLImageReader::~GFLImageReader()$/;"	f	class:GFLImageReader
GFLImageReader	Utils/ImageReader/ImageReader.h	/^class GFLImageReader$/;"	c
_GOBLIM_IMAGE_READER_	Utils/ImageReader/ImageReader.h	3;"	d
init	Utils/ImageReader/ImageReader.h	/^	static bool init;$/;"	m	class:GFLImageReader
params	Utils/ImageReader/ImageReader.h	/^	GFL_LOAD_PARAMS* params;$/;"	m	class:GFLImageReader
SOIL_RGBA_S3TC_DXT1	Utils/ImageUtilities/ImageUtils.cpp	9;"	d	file:
SOIL_RGBA_S3TC_DXT3	Utils/ImageUtilities/ImageUtils.cpp	10;"	d	file:
SOIL_RGBA_S3TC_DXT5	Utils/ImageUtilities/ImageUtils.cpp	11;"	d	file:
SOIL_RGB_S3TC_DXT1	Utils/ImageUtilities/ImageUtils.cpp	8;"	d	file:
load2DTexture	Utils/ImageUtilities/ImageUtils.cpp	/^GLint load2DTexture(std::string filename,unsigned int flags)$/;"	f
loadLayer	Utils/ImageUtilities/ImageUtils.cpp	/^unsigned int loadLayer	(const unsigned char *const data,int width, int height, int channels,int layer,int target_width,int target_height,unsigned int flags)$/;"	f
loadSimpleLayer	Utils/ImageUtilities/ImageUtils.cpp	/^unsigned int loadSimpleLayer(const unsigned char *const data,int width, int height, int channels,unsigned int flags,$/;"	f
log2	Utils/ImageUtilities/ImageUtils.cpp	/^unsigned int log2( unsigned int x )$/;"	f
mipmap_image	Utils/ImageUtilities/ImageUtils.cpp	/^	mipmap_image$/;"	f
resize	Utils/ImageUtilities/ImageUtils.cpp	/^unsigned char* resize(unsigned char* orig,int size,int channels,int resampled_size)$/;"	f
up_scale_image	Utils/ImageUtilities/ImageUtils.cpp	/^	up_scale_image$/;"	f
_IMAGE_UTILS	Utils/ImageUtilities/ImageUtils.h	2;"	d
LSE_master_colors_max_min	Utils/ImageUtilities/image_DXT.cpp	/^void LSE_master_colors_max_min($/;"	f
USE_COV_MAT	Utils/ImageUtilities/image_DXT.cpp	20;"	d	file:
compress_DDS_alpha_block	Utils/ImageUtilities/image_DXT.cpp	/^	compress_DDS_alpha_block$/;"	f
compress_DDS_color_block	Utils/ImageUtilities/image_DXT.cpp	/^	compress_DDS_color_block$/;"	f
compute_color_line_STDEV	Utils/ImageUtilities/image_DXT.cpp	/^void compute_color_line_STDEV($/;"	f
convert_bit_range	Utils/ImageUtilities/image_DXT.cpp	/^int convert_bit_range( int c, int from_bits, int to_bits )$/;"	f
convert_image_to_DXT1	Utils/ImageUtilities/image_DXT.cpp	/^unsigned char* convert_image_to_DXT1($/;"	f
convert_image_to_DXT5	Utils/ImageUtilities/image_DXT.cpp	/^unsigned char* convert_image_to_DXT5($/;"	f
rgb_888_from_565	Utils/ImageUtilities/image_DXT.cpp	/^void rgb_888_from_565( unsigned int c, int *r, int *g, int *b )$/;"	f
rgb_to_565	Utils/ImageUtilities/image_DXT.cpp	/^int rgb_to_565( int r, int g, int b )$/;"	f
save_image_as_DDS	Utils/ImageUtilities/image_DXT.cpp	/^	save_image_as_DDS$/;"	f
DDPF_ALPHAPIXELS	Utils/ImageUtilities/image_DXT.h	102;"	d
DDPF_FOURCC	Utils/ImageUtilities/image_DXT.h	103;"	d
DDPF_RGB	Utils/ImageUtilities/image_DXT.h	104;"	d
DDSCAPS2_CUBEMAP	Utils/ImageUtilities/image_DXT.h	114;"	d
DDSCAPS2_CUBEMAP_NEGATIVEX	Utils/ImageUtilities/image_DXT.h	116;"	d
DDSCAPS2_CUBEMAP_NEGATIVEY	Utils/ImageUtilities/image_DXT.h	118;"	d
DDSCAPS2_CUBEMAP_NEGATIVEZ	Utils/ImageUtilities/image_DXT.h	120;"	d
DDSCAPS2_CUBEMAP_POSITIVEX	Utils/ImageUtilities/image_DXT.h	115;"	d
DDSCAPS2_CUBEMAP_POSITIVEY	Utils/ImageUtilities/image_DXT.h	117;"	d
DDSCAPS2_CUBEMAP_POSITIVEZ	Utils/ImageUtilities/image_DXT.h	119;"	d
DDSCAPS2_VOLUME	Utils/ImageUtilities/image_DXT.h	121;"	d
DDSCAPS_COMPLEX	Utils/ImageUtilities/image_DXT.h	108;"	d
DDSCAPS_MIPMAP	Utils/ImageUtilities/image_DXT.h	110;"	d
DDSCAPS_TEXTURE	Utils/ImageUtilities/image_DXT.h	109;"	d
DDSD_CAPS	Utils/ImageUtilities/image_DXT.h	92;"	d
DDSD_DEPTH	Utils/ImageUtilities/image_DXT.h	99;"	d
DDSD_HEIGHT	Utils/ImageUtilities/image_DXT.h	93;"	d
DDSD_LINEARSIZE	Utils/ImageUtilities/image_DXT.h	98;"	d
DDSD_MIPMAPCOUNT	Utils/ImageUtilities/image_DXT.h	97;"	d
DDSD_PITCH	Utils/ImageUtilities/image_DXT.h	95;"	d
DDSD_PIXELFORMAT	Utils/ImageUtilities/image_DXT.h	96;"	d
DDSD_WIDTH	Utils/ImageUtilities/image_DXT.h	94;"	d
DDS_header	Utils/ImageUtilities/image_DXT.h	/^DDS_header ;$/;"	t	typeref:struct:__anon3
HEADER_IMAGE_DXT	Utils/ImageUtilities/image_DXT.h	11;"	d
dwAlphaBitMask	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwAlphaBitMask;$/;"	m	struct:__anon3::__anon4
dwBBitMask	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwBBitMask;$/;"	m	struct:__anon3::__anon4
dwCaps1	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwCaps1;$/;"	m	struct:__anon3::__anon5
dwCaps2	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwCaps2;$/;"	m	struct:__anon3::__anon5
dwDDSX	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwDDSX;$/;"	m	struct:__anon3::__anon5
dwDepth	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwDepth;$/;"	m	struct:__anon3
dwFlags	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwFlags;$/;"	m	struct:__anon3::__anon4
dwFlags	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwFlags;$/;"	m	struct:__anon3
dwFourCC	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwFourCC;$/;"	m	struct:__anon3::__anon4
dwGBitMask	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwGBitMask;$/;"	m	struct:__anon3::__anon4
dwHeight	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwHeight;$/;"	m	struct:__anon3
dwMagic	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwMagic;$/;"	m	struct:__anon3
dwMipMapCount	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwMipMapCount;$/;"	m	struct:__anon3
dwPitchOrLinearSize	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwPitchOrLinearSize;$/;"	m	struct:__anon3
dwRBitMask	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwRBitMask;$/;"	m	struct:__anon3::__anon4
dwRGBBitCount	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwRGBBitCount;$/;"	m	struct:__anon3::__anon4
dwReserved	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwReserved;$/;"	m	struct:__anon3::__anon5
dwReserved1	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwReserved1[ 11 ];$/;"	m	struct:__anon3
dwReserved2	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwReserved2;$/;"	m	struct:__anon3
dwSize	Utils/ImageUtilities/image_DXT.h	/^        unsigned int    dwSize;$/;"	m	struct:__anon3::__anon4
dwSize	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwSize;$/;"	m	struct:__anon3
dwWidth	Utils/ImageUtilities/image_DXT.h	/^    unsigned int    dwWidth;$/;"	m	struct:__anon3
sCaps	Utils/ImageUtilities/image_DXT.h	/^    sCaps;$/;"	m	struct:__anon3	typeref:struct:__anon3::__anon5
sPixelFormat	Utils/ImageUtilities/image_DXT.h	/^    sPixelFormat;$/;"	m	struct:__anon3	typeref:struct:__anon3::__anon4
GetTimeMs64	Utils/MyTime.cpp	/^int64 GetTimeMs64()$/;"	f
MY_TIME_H	Utils/MyTime.h	2;"	d
int64	Utils/MyTime.h	/^typedef long long int64;$/;"	t
uint64	Utils/MyTime.h	/^typedef unsigned long long uint64;$/;"	t
DIR	Utils/dirent.h	/^										 typedef struct DIR$/;"	s
DIR	Utils/dirent.h	/^										 } DIR;$/;"	t	typeref:struct:DIR
DIRENT_H	Utils/dirent.h	77;"	d
DIRENT_SET_ERRNO	Utils/dirent.h	190;"	d
DIRENT_SET_ERRNO	Utils/dirent.h	192;"	d
DIRENT_STRNCPY	Utils/dirent.h	183;"	d
DIRENT_STRNCPY	Utils/dirent.h	185;"	d
DTTOIF	Utils/dirent.h	133;"	d
DT_BLK	Utils/dirent.h	129;"	d
DT_CHR	Utils/dirent.h	128;"	d
DT_DIR	Utils/dirent.h	125;"	d
DT_FIFO	Utils/dirent.h	126;"	d
DT_REG	Utils/dirent.h	124;"	d
DT_SOCK	Utils/dirent.h	127;"	d
DT_UNKNOWN	Utils/dirent.h	123;"	d
FILE_ATTRIBUTE_DEVICE	Utils/dirent.h	89;"	d
IFTODT	Utils/dirent.h	132;"	d
S_IEXEC	Utils/dirent.h	101;"	d
S_IFBLK	Utils/dirent.h	103;"	d
S_IFCHR	Utils/dirent.h	96;"	d
S_IFDIR	Utils/dirent.h	95;"	d
S_IFFIFO	Utils/dirent.h	97;"	d
S_IFLNK	Utils/dirent.h	104;"	d
S_IFMT	Utils/dirent.h	94;"	d
S_IFREG	Utils/dirent.h	98;"	d
S_IFSOCK	Utils/dirent.h	105;"	d
S_IREAD	Utils/dirent.h	99;"	d
S_IRGRP	Utils/dirent.h	111;"	d
S_IROTH	Utils/dirent.h	114;"	d
S_IRUSR	Utils/dirent.h	108;"	d
S_ISBLK	Utils/dirent.h	147;"	d
S_ISCHR	Utils/dirent.h	146;"	d
S_ISDIR	Utils/dirent.h	142;"	d
S_ISFIFO	Utils/dirent.h	141;"	d
S_ISLNK	Utils/dirent.h	144;"	d
S_ISREG	Utils/dirent.h	143;"	d
S_ISSOCK	Utils/dirent.h	145;"	d
S_IWGRP	Utils/dirent.h	112;"	d
S_IWOTH	Utils/dirent.h	115;"	d
S_IWRITE	Utils/dirent.h	100;"	d
S_IWUSR	Utils/dirent.h	109;"	d
S_IXGRP	Utils/dirent.h	113;"	d
S_IXOTH	Utils/dirent.h	116;"	d
S_IXUSR	Utils/dirent.h	110;"	d
WIN32_LEAN_AND_MEAN	Utils/dirent.h	79;"	d
_DIRENT_HAVE_D_TYPE	Utils/dirent.h	120;"	d
cached	Utils/dirent.h	/^											 int              cached;                    \/* True if data is valid *\/$/;"	m	struct:DIR
closedir	Utils/dirent.h	/^										 static int closedir(DIR *dirp)$/;"	f
curentry	Utils/dirent.h	/^											 dirent           curentry;                  \/* Current directory entry *\/$/;"	m	struct:DIR
d_name	Utils/dirent.h	/^											 char d_name[MAX_PATH + 1];                  \/* File name *\/$/;"	m	struct:dirent
d_namlen	Utils/dirent.h	/^											 size_t d_namlen;                            \/* Length of name without \\0 *\/$/;"	m	struct:dirent
d_type	Utils/dirent.h	/^											 int d_type;                                 \/* File type *\/$/;"	m	struct:dirent
dirent	Utils/dirent.h	/^										 typedef struct dirent$/;"	s
dirent	Utils/dirent.h	/^										 } dirent;$/;"	t	typeref:struct:dirent
find_data	Utils/dirent.h	/^											 WIN32_FIND_DATAA find_data;                 \/* Private file data *\/$/;"	m	struct:DIR
opendir	Utils/dirent.h	/^										 static DIR *opendir(const char *dirname)$/;"	f
patt	Utils/dirent.h	/^											 char             patt[MAX_PATH + 3];        \/* Initial directory name *\/$/;"	m	struct:DIR
readdir	Utils/dirent.h	/^										 static struct dirent *readdir(DIR *dirp)$/;"	f
rewinddir	Utils/dirent.h	/^										 static void rewinddir(DIR* dirp)$/;"	f
search_handle	Utils/dirent.h	/^											 HANDLE           search_handle;             \/* Win32 search handle *\/$/;"	m	struct:DIR
AbstractRegistry	Utils/easylogging++.h	/^    AbstractRegistry(AbstractRegistry&& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
AbstractRegistry	Utils/easylogging++.h	/^    AbstractRegistry(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
AbstractRegistry	Utils/easylogging++.h	/^class AbstractRegistry : public base::threading::ThreadSafe {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
AllowVerboseIfModuleNotSpecified	Utils/easylogging++.h	/^    AllowVerboseIfModuleNotSpecified = 2,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
And	Utils/easylogging++.h	/^static inline base::type::EnumType And(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
AppName	Utils/easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
AsyncDispatchWorker	Utils/easylogging++.h	/^    AsyncDispatchWorker() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::AsyncDispatchWorker
AsyncDispatchWorker	Utils/easylogging++.h	/^class AsyncDispatchWorker : public base::IWorker, public base::threading::ThreadSafe {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
AsyncLogDispatchCallback	Utils/easylogging++.h	/^class AsyncLogDispatchCallback : public LogDispatchCallback {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
AsyncLogItem	Utils/easylogging++.h	/^    explicit AsyncLogItem(const LogMessage& logMessage, const LogDispatchData& data, const base::type::string_t& logLine)$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
AsyncLogItem	Utils/easylogging++.h	/^class AsyncLogItem {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
AsyncLogQueue	Utils/easylogging++.h	/^class AsyncLogQueue : public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
AutoSpacing	Utils/easylogging++.h	/^    AutoSpacing = 8192,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
CCHECK	Utils/easylogging++.h	6498;"	d
CCHECK	Utils/easylogging++.h	6522;"	d
CCHECK_BOUNDS	Utils/easylogging++.h	6506;"	d
CCHECK_BOUNDS	Utils/easylogging++.h	6532;"	d
CCHECK_EQ	Utils/easylogging++.h	6500;"	d
CCHECK_EQ	Utils/easylogging++.h	6526;"	d
CCHECK_GE	Utils/easylogging++.h	6505;"	d
CCHECK_GE	Utils/easylogging++.h	6531;"	d
CCHECK_GT	Utils/easylogging++.h	6503;"	d
CCHECK_GT	Utils/easylogging++.h	6529;"	d
CCHECK_LE	Utils/easylogging++.h	6504;"	d
CCHECK_LE	Utils/easylogging++.h	6530;"	d
CCHECK_LT	Utils/easylogging++.h	6502;"	d
CCHECK_LT	Utils/easylogging++.h	6528;"	d
CCHECK_NE	Utils/easylogging++.h	6501;"	d
CCHECK_NE	Utils/easylogging++.h	6527;"	d
CCHECK_NOTNULL	Utils/easylogging++.h	6507;"	d
CCHECK_NOTNULL	Utils/easylogging++.h	6551;"	d
CCHECK_STRCASEEQ	Utils/easylogging++.h	6508;"	d
CCHECK_STRCASEEQ	Utils/easylogging++.h	6556;"	d
CCHECK_STRCASENE	Utils/easylogging++.h	6509;"	d
CCHECK_STRCASENE	Utils/easylogging++.h	6558;"	d
CCHECK_STREQ	Utils/easylogging++.h	6552;"	d
CCHECK_STRNE	Utils/easylogging++.h	6554;"	d
CDEBUG	Utils/easylogging++.h	6036;"	d
CDEBUG	Utils/easylogging++.h	6081;"	d
CDEBUG_AFTER_N	Utils/easylogging++.h	6057;"	d
CDEBUG_AFTER_N	Utils/easylogging++.h	6206;"	d
CDEBUG_EVERY_N	Utils/easylogging++.h	6050;"	d
CDEBUG_EVERY_N	Utils/easylogging++.h	6163;"	d
CDEBUG_IF	Utils/easylogging++.h	6043;"	d
CDEBUG_IF	Utils/easylogging++.h	6120;"	d
CDEBUG_N_TIMES	Utils/easylogging++.h	6064;"	d
CDEBUG_N_TIMES	Utils/easylogging++.h	6249;"	d
CERROR	Utils/easylogging++.h	6038;"	d
CERROR	Utils/easylogging++.h	6086;"	d
CERROR_AFTER_N	Utils/easylogging++.h	6058;"	d
CERROR_AFTER_N	Utils/easylogging++.h	6212;"	d
CERROR_EVERY_N	Utils/easylogging++.h	6051;"	d
CERROR_EVERY_N	Utils/easylogging++.h	6169;"	d
CERROR_IF	Utils/easylogging++.h	6044;"	d
CERROR_IF	Utils/easylogging++.h	6126;"	d
CERROR_N_TIMES	Utils/easylogging++.h	6065;"	d
CERROR_N_TIMES	Utils/easylogging++.h	6255;"	d
CFATAL	Utils/easylogging++.h	6037;"	d
CFATAL	Utils/easylogging++.h	6091;"	d
CFATAL_AFTER_N	Utils/easylogging++.h	6059;"	d
CFATAL_AFTER_N	Utils/easylogging++.h	6218;"	d
CFATAL_EVERY_N	Utils/easylogging++.h	6052;"	d
CFATAL_EVERY_N	Utils/easylogging++.h	6175;"	d
CFATAL_IF	Utils/easylogging++.h	6045;"	d
CFATAL_IF	Utils/easylogging++.h	6132;"	d
CFATAL_N_TIMES	Utils/easylogging++.h	6066;"	d
CFATAL_N_TIMES	Utils/easylogging++.h	6261;"	d
CHECK	Utils/easylogging++.h	6510;"	d
CHECK	Utils/easylogging++.h	6524;"	d
CHECK_BOUNDS	Utils/easylogging++.h	6518;"	d
CHECK_BOUNDS	Utils/easylogging++.h	6539;"	d
CHECK_EQ	Utils/easylogging++.h	6512;"	d
CHECK_EQ	Utils/easylogging++.h	6533;"	d
CHECK_GE	Utils/easylogging++.h	6517;"	d
CHECK_GE	Utils/easylogging++.h	6538;"	d
CHECK_GT	Utils/easylogging++.h	6515;"	d
CHECK_GT	Utils/easylogging++.h	6536;"	d
CHECK_LE	Utils/easylogging++.h	6516;"	d
CHECK_LE	Utils/easylogging++.h	6537;"	d
CHECK_LT	Utils/easylogging++.h	6514;"	d
CHECK_LT	Utils/easylogging++.h	6535;"	d
CHECK_NE	Utils/easylogging++.h	6513;"	d
CHECK_NE	Utils/easylogging++.h	6534;"	d
CHECK_NOTNULL	Utils/easylogging++.h	6519;"	d
CHECK_NOTNULL	Utils/easylogging++.h	6560;"	d
CHECK_STRCASEEQ	Utils/easylogging++.h	6520;"	d
CHECK_STRCASEEQ	Utils/easylogging++.h	6563;"	d
CHECK_STRCASENE	Utils/easylogging++.h	6521;"	d
CHECK_STRCASENE	Utils/easylogging++.h	6564;"	d
CHECK_STREQ	Utils/easylogging++.h	6561;"	d
CHECK_STRNE	Utils/easylogging++.h	6562;"	d
CINFO	Utils/easylogging++.h	6034;"	d
CINFO	Utils/easylogging++.h	6071;"	d
CINFO_AFTER_N	Utils/easylogging++.h	6055;"	d
CINFO_AFTER_N	Utils/easylogging++.h	6194;"	d
CINFO_EVERY_N	Utils/easylogging++.h	6048;"	d
CINFO_EVERY_N	Utils/easylogging++.h	6151;"	d
CINFO_IF	Utils/easylogging++.h	6041;"	d
CINFO_IF	Utils/easylogging++.h	6108;"	d
CINFO_N_TIMES	Utils/easylogging++.h	6062;"	d
CINFO_N_TIMES	Utils/easylogging++.h	6237;"	d
CLOG	Utils/easylogging++.h	6282;"	d
CLOG	Utils/easylogging++.h	6295;"	d
CLOG_AFTER_N	Utils/easylogging++.h	6290;"	d
CLOG_AFTER_N	Utils/easylogging++.h	6308;"	d
CLOG_EVERY_N	Utils/easylogging++.h	6288;"	d
CLOG_EVERY_N	Utils/easylogging++.h	6304;"	d
CLOG_IF	Utils/easylogging++.h	6285;"	d
CLOG_IF	Utils/easylogging++.h	6299;"	d
CLOG_N_TIMES	Utils/easylogging++.h	6292;"	d
CLOG_N_TIMES	Utils/easylogging++.h	6312;"	d
CLOG_VERBOSE	Utils/easylogging++.h	6283;"	d
CLOG_VERBOSE_IF	Utils/easylogging++.h	6286;"	d
CPCHECK	Utils/easylogging++.h	6499;"	d
CPCHECK	Utils/easylogging++.h	6523;"	d
CPLOG	Utils/easylogging++.h	6352;"	d
CPLOG	Utils/easylogging++.h	6360;"	d
CPLOG_IF	Utils/easylogging++.h	6353;"	d
CPLOG_IF	Utils/easylogging++.h	6362;"	d
CSYSLOG	Utils/easylogging++.h	6373;"	d
CSYSLOG	Utils/easylogging++.h	6394;"	d
CSYSLOG_AFTER_N	Utils/easylogging++.h	6376;"	d
CSYSLOG_AFTER_N	Utils/easylogging++.h	6399;"	d
CSYSLOG_EVERY_N	Utils/easylogging++.h	6375;"	d
CSYSLOG_EVERY_N	Utils/easylogging++.h	6398;"	d
CSYSLOG_IF	Utils/easylogging++.h	6374;"	d
CSYSLOG_IF	Utils/easylogging++.h	6396;"	d
CSYSLOG_N_TIMES	Utils/easylogging++.h	6377;"	d
CSYSLOG_N_TIMES	Utils/easylogging++.h	6400;"	d
CTRACE	Utils/easylogging++.h	6039;"	d
CTRACE	Utils/easylogging++.h	6096;"	d
CTRACE_AFTER_N	Utils/easylogging++.h	6060;"	d
CTRACE_AFTER_N	Utils/easylogging++.h	6224;"	d
CTRACE_EVERY_N	Utils/easylogging++.h	6053;"	d
CTRACE_EVERY_N	Utils/easylogging++.h	6181;"	d
CTRACE_IF	Utils/easylogging++.h	6046;"	d
CTRACE_IF	Utils/easylogging++.h	6138;"	d
CTRACE_N_TIMES	Utils/easylogging++.h	6067;"	d
CTRACE_N_TIMES	Utils/easylogging++.h	6267;"	d
CVERBOSE	Utils/easylogging++.h	6040;"	d
CVERBOSE	Utils/easylogging++.h	6101;"	d
CVERBOSE_AFTER_N	Utils/easylogging++.h	6061;"	d
CVERBOSE_AFTER_N	Utils/easylogging++.h	6230;"	d
CVERBOSE_EVERY_N	Utils/easylogging++.h	6054;"	d
CVERBOSE_EVERY_N	Utils/easylogging++.h	6187;"	d
CVERBOSE_IF	Utils/easylogging++.h	6047;"	d
CVERBOSE_IF	Utils/easylogging++.h	6144;"	d
CVERBOSE_N_TIMES	Utils/easylogging++.h	6068;"	d
CVERBOSE_N_TIMES	Utils/easylogging++.h	6273;"	d
CVLOG	Utils/easylogging++.h	6284;"	d
CVLOG	Utils/easylogging++.h	6297;"	d
CVLOG_AFTER_N	Utils/easylogging++.h	6291;"	d
CVLOG_AFTER_N	Utils/easylogging++.h	6310;"	d
CVLOG_EVERY_N	Utils/easylogging++.h	6289;"	d
CVLOG_EVERY_N	Utils/easylogging++.h	6306;"	d
CVLOG_IF	Utils/easylogging++.h	6287;"	d
CVLOG_IF	Utils/easylogging++.h	6301;"	d
CVLOG_N_TIMES	Utils/easylogging++.h	6293;"	d
CVLOG_N_TIMES	Utils/easylogging++.h	6314;"	d
CWARNING	Utils/easylogging++.h	6035;"	d
CWARNING	Utils/easylogging++.h	6076;"	d
CWARNING_AFTER_N	Utils/easylogging++.h	6056;"	d
CWARNING_AFTER_N	Utils/easylogging++.h	6200;"	d
CWARNING_EVERY_N	Utils/easylogging++.h	6049;"	d
CWARNING_EVERY_N	Utils/easylogging++.h	6157;"	d
CWARNING_IF	Utils/easylogging++.h	6042;"	d
CWARNING_IF	Utils/easylogging++.h	6114;"	d
CWARNING_N_TIMES	Utils/easylogging++.h	6063;"	d
CWARNING_N_TIMES	Utils/easylogging++.h	6243;"	d
Callback	Utils/easylogging++.h	/^    Callback(void) : m_enabled(true) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
Callback	Utils/easylogging++.h	/^class Callback : protected base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Checkpoint	Utils/easylogging++.h	/^        Checkpoint = 1, Complete = 2$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
ColoredTerminalOutput	Utils/easylogging++.h	/^    ColoredTerminalOutput = 64,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
CommandLineArgs	Utils/easylogging++.h	/^    CommandLineArgs(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
CommandLineArgs	Utils/easylogging++.h	/^    CommandLineArgs(int argc, const char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
CommandLineArgs	Utils/easylogging++.h	/^    CommandLineArgs(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
CommandLineArgs	Utils/easylogging++.h	/^class CommandLineArgs {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
Complete	Utils/easylogging++.h	/^        Checkpoint = 1, Complete = 2$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
Configuration	Utils/easylogging++.h	/^    Configuration(Level level, ConfigurationType configurationType, const std::string& value) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
Configuration	Utils/easylogging++.h	/^    Configuration(const Configuration& c) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
Configuration	Utils/easylogging++.h	/^class Configuration : public Loggable {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
ConfigurationType	Utils/easylogging++.h	/^enum class ConfigurationType : base::type::EnumType {$/;"	c	class:el::Level
ConfigurationTypeHelper	Utils/easylogging++.h	/^class ConfigurationTypeHelper : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType
Configurations	Utils/easylogging++.h	/^    Configurations(const std::string& configurationFile, bool useDefaultsForRemaining = true, Configurations* base = nullptr) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
Configurations	Utils/easylogging++.h	/^    Configurations(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
Configurations	Utils/easylogging++.h	/^class Configurations : public base::utils::RegistryWithPred<Configuration, Configuration::Predicate> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
CrashHandler	Utils/easylogging++.h	/^    explicit CrashHandler(bool useDefault) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
CrashHandler	Utils/easylogging++.h	/^    explicit CrashHandler(const Handler& cHandler) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
CrashHandler	Utils/easylogging++.h	/^class CrashHandler : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
CreateLoggerAutomatically	Utils/easylogging++.h	/^    CreateLoggerAutomatically = 4096,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
CustomFormatSpecifier	Utils/easylogging++.h	/^    CustomFormatSpecifier(const char* formatSpecifier, const FormatSpecifierValueResolver& resolver) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
CustomFormatSpecifier	Utils/easylogging++.h	/^class CustomFormatSpecifier {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
DCCHECK	Utils/easylogging++.h	6565;"	d
DCCHECK	Utils/easylogging++.h	6589;"	d
DCCHECK_BOUNDS	Utils/easylogging++.h	6572;"	d
DCCHECK_BOUNDS	Utils/easylogging++.h	6596;"	d
DCCHECK_EQ	Utils/easylogging++.h	6566;"	d
DCCHECK_EQ	Utils/easylogging++.h	6590;"	d
DCCHECK_GE	Utils/easylogging++.h	6571;"	d
DCCHECK_GE	Utils/easylogging++.h	6595;"	d
DCCHECK_GT	Utils/easylogging++.h	6569;"	d
DCCHECK_GT	Utils/easylogging++.h	6593;"	d
DCCHECK_LE	Utils/easylogging++.h	6570;"	d
DCCHECK_LE	Utils/easylogging++.h	6594;"	d
DCCHECK_LT	Utils/easylogging++.h	6568;"	d
DCCHECK_LT	Utils/easylogging++.h	6592;"	d
DCCHECK_NE	Utils/easylogging++.h	6567;"	d
DCCHECK_NE	Utils/easylogging++.h	6591;"	d
DCCHECK_NOTNULL	Utils/easylogging++.h	6573;"	d
DCCHECK_NOTNULL	Utils/easylogging++.h	6597;"	d
DCCHECK_STRCASEEQ	Utils/easylogging++.h	6574;"	d
DCCHECK_STRCASEEQ	Utils/easylogging++.h	6600;"	d
DCCHECK_STRCASENE	Utils/easylogging++.h	6575;"	d
DCCHECK_STRCASENE	Utils/easylogging++.h	6601;"	d
DCCHECK_STREQ	Utils/easylogging++.h	6598;"	d
DCCHECK_STRNE	Utils/easylogging++.h	6599;"	d
DCHECK	Utils/easylogging++.h	6577;"	d
DCHECK	Utils/easylogging++.h	6603;"	d
DCHECK_BOUNDS	Utils/easylogging++.h	6610;"	d
DCHECK_BOUNDS_	Utils/easylogging++.h	6584;"	d
DCHECK_EQ	Utils/easylogging++.h	6578;"	d
DCHECK_EQ	Utils/easylogging++.h	6604;"	d
DCHECK_GE	Utils/easylogging++.h	6583;"	d
DCHECK_GE	Utils/easylogging++.h	6609;"	d
DCHECK_GT	Utils/easylogging++.h	6581;"	d
DCHECK_GT	Utils/easylogging++.h	6607;"	d
DCHECK_LE	Utils/easylogging++.h	6582;"	d
DCHECK_LE	Utils/easylogging++.h	6608;"	d
DCHECK_LT	Utils/easylogging++.h	6580;"	d
DCHECK_LT	Utils/easylogging++.h	6606;"	d
DCHECK_NE	Utils/easylogging++.h	6579;"	d
DCHECK_NE	Utils/easylogging++.h	6605;"	d
DCHECK_NOTNULL	Utils/easylogging++.h	6585;"	d
DCHECK_NOTNULL	Utils/easylogging++.h	6611;"	d
DCHECK_STRCASEEQ	Utils/easylogging++.h	6586;"	d
DCHECK_STRCASEEQ	Utils/easylogging++.h	6614;"	d
DCHECK_STRCASENE	Utils/easylogging++.h	6587;"	d
DCHECK_STRCASENE	Utils/easylogging++.h	6615;"	d
DCHECK_STREQ	Utils/easylogging++.h	6612;"	d
DCHECK_STRNE	Utils/easylogging++.h	6613;"	d
DCLOG	Utils/easylogging++.h	6446;"	d
DCLOG	Utils/easylogging++.h	6457;"	d
DCLOG_AFTER_N	Utils/easylogging++.h	6452;"	d
DCLOG_AFTER_N	Utils/easylogging++.h	6466;"	d
DCLOG_EVERY_N	Utils/easylogging++.h	6450;"	d
DCLOG_EVERY_N	Utils/easylogging++.h	6464;"	d
DCLOG_IF	Utils/easylogging++.h	6448;"	d
DCLOG_IF	Utils/easylogging++.h	6461;"	d
DCLOG_N_TIMES	Utils/easylogging++.h	6454;"	d
DCLOG_N_TIMES	Utils/easylogging++.h	6468;"	d
DCLOG_VERBOSE	Utils/easylogging++.h	6458;"	d
DCPCHECK	Utils/easylogging++.h	6576;"	d
DCPCHECK	Utils/easylogging++.h	6602;"	d
DCPLOG	Utils/easylogging++.h	6356;"	d
DCPLOG	Utils/easylogging++.h	6364;"	d
DCPLOG_IF	Utils/easylogging++.h	6357;"	d
DCPLOG_IF	Utils/easylogging++.h	6366;"	d
DCSYSLOG	Utils/easylogging++.h	6383;"	d
DCSYSLOG	Utils/easylogging++.h	6406;"	d
DCSYSLOG_AFTER_N	Utils/easylogging++.h	6386;"	d
DCSYSLOG_AFTER_N	Utils/easylogging++.h	6411;"	d
DCSYSLOG_EVERY_N	Utils/easylogging++.h	6385;"	d
DCSYSLOG_EVERY_N	Utils/easylogging++.h	6409;"	d
DCSYSLOG_IF	Utils/easylogging++.h	6384;"	d
DCSYSLOG_IF	Utils/easylogging++.h	6407;"	d
DCSYSLOG_N_TIMES	Utils/easylogging++.h	6387;"	d
DCSYSLOG_N_TIMES	Utils/easylogging++.h	6413;"	d
DCVLOG	Utils/easylogging++.h	6447;"	d
DCVLOG	Utils/easylogging++.h	6459;"	d
DCVLOG_AFTER_N	Utils/easylogging++.h	6453;"	d
DCVLOG_AFTER_N	Utils/easylogging++.h	6467;"	d
DCVLOG_EVERY_N	Utils/easylogging++.h	6451;"	d
DCVLOG_EVERY_N	Utils/easylogging++.h	6465;"	d
DCVLOG_IF	Utils/easylogging++.h	6449;"	d
DCVLOG_IF	Utils/easylogging++.h	6462;"	d
DCVLOG_N_TIMES	Utils/easylogging++.h	6455;"	d
DCVLOG_N_TIMES	Utils/easylogging++.h	6469;"	d
DEBUG	Utils/easylogging++.h	6028;"	d
DLOG	Utils/easylogging++.h	6474;"	d
DLOG	Utils/easylogging++.h	6485;"	d
DLOG_AFTER_N	Utils/easylogging++.h	6480;"	d
DLOG_AFTER_N	Utils/easylogging++.h	6493;"	d
DLOG_EVERY_N	Utils/easylogging++.h	6478;"	d
DLOG_EVERY_N	Utils/easylogging++.h	6491;"	d
DLOG_IF	Utils/easylogging++.h	6476;"	d
DLOG_IF	Utils/easylogging++.h	6488;"	d
DLOG_N_TIMES	Utils/easylogging++.h	6482;"	d
DLOG_N_TIMES	Utils/easylogging++.h	6495;"	d
DPCHECK	Utils/easylogging++.h	6588;"	d
DPCHECK	Utils/easylogging++.h	6616;"	d
DPLOG	Utils/easylogging++.h	6358;"	d
DPLOG	Utils/easylogging++.h	6370;"	d
DPLOG_IF	Utils/easylogging++.h	6359;"	d
DPLOG_IF	Utils/easylogging++.h	6371;"	d
DSYSLOG	Utils/easylogging++.h	6388;"	d
DSYSLOG	Utils/easylogging++.h	6415;"	d
DSYSLOG_AFTER_N	Utils/easylogging++.h	6391;"	d
DSYSLOG_AFTER_N	Utils/easylogging++.h	6418;"	d
DSYSLOG_EVERY_N	Utils/easylogging++.h	6390;"	d
DSYSLOG_EVERY_N	Utils/easylogging++.h	6417;"	d
DSYSLOG_IF	Utils/easylogging++.h	6389;"	d
DSYSLOG_IF	Utils/easylogging++.h	6416;"	d
DSYSLOG_N_TIMES	Utils/easylogging++.h	6392;"	d
DSYSLOG_N_TIMES	Utils/easylogging++.h	6419;"	d
DVLOG	Utils/easylogging++.h	6475;"	d
DVLOG	Utils/easylogging++.h	6486;"	d
DVLOG_AFTER_N	Utils/easylogging++.h	6481;"	d
DVLOG_AFTER_N	Utils/easylogging++.h	6494;"	d
DVLOG_EVERY_N	Utils/easylogging++.h	6479;"	d
DVLOG_EVERY_N	Utils/easylogging++.h	6492;"	d
DVLOG_IF	Utils/easylogging++.h	6477;"	d
DVLOG_IF	Utils/easylogging++.h	6489;"	d
DVLOG_N_TIMES	Utils/easylogging++.h	6483;"	d
DVLOG_N_TIMES	Utils/easylogging++.h	6496;"	d
DataType	Utils/easylogging++.h	/^    enum class DataType : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData
DateTime	Utils/easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
DateTime	Utils/easylogging++.h	/^class DateTime : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
Day	Utils/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Debug	Utils/easylogging++.h	/^        Debug = 4,$/;"	m	class:el::Level
DefaultLogBuilder	Utils/easylogging++.h	/^class DefaultLogBuilder : public LogBuilder {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base
DefaultLogDispatchCallback	Utils/easylogging++.h	/^class DefaultLogDispatchCallback : public LogDispatchCallback {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
DefaultPerformanceTrackingCallback	Utils/easylogging++.h	/^class DefaultPerformanceTrackingCallback : public PerformanceTrackingCallback {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker
DisableApplicationAbortOnFatalLog	Utils/easylogging++.h	/^    DisableApplicationAbortOnFatalLog = 8,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisablePerformanceTrackingCheckpointComparison	Utils/easylogging++.h	/^    DisablePerformanceTrackingCheckpointComparison = 256,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisableVModules	Utils/easylogging++.h	/^    DisableVModules = 512,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DisableVModulesExtensions	Utils/easylogging++.h	/^    DisableVModulesExtensions = 1024,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
DispatchAction	Utils/easylogging++.h	/^enum class DispatchAction : base::type::EnumType {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
EASYLOGGINGPP_H	Utils/easylogging++.h	17;"	d
ELPP	Utils/easylogging++.h	4167;"	d
ELPP_ASSERT	Utils/easylogging++.h	113;"	d
ELPP_ASSERT	Utils/easylogging++.h	120;"	d
ELPP_ASSERT	Utils/easylogging++.h	128;"	d
ELPP_ASYNC_LOGGING	Utils/easylogging++.h	218;"	d
ELPP_ASYNC_LOGGING	Utils/easylogging++.h	220;"	d
ELPP_CLANG_VERSION	Utils/easylogging++.h	43;"	d
ELPP_COMPILER_CLANG	Utils/easylogging++.h	42;"	d
ELPP_COMPILER_GCC	Utils/easylogging++.h	20;"	d
ELPP_COMPILER_INTEL	Utils/easylogging++.h	60;"	d
ELPP_COMPILER_MSVC	Utils/easylogging++.h	32;"	d
ELPP_COUNTER	Utils/easylogging++.h	6019;"	d
ELPP_COUNTER	Utils/easylogging++.h	6022;"	d
ELPP_COUNTER_POS	Utils/easylogging++.h	6020;"	d
ELPP_COUNTER_POS	Utils/easylogging++.h	6024;"	d
ELPP_COUT	Utils/easylogging++.h	438;"	d
ELPP_COUT	Utils/easylogging++.h	443;"	d
ELPP_COUT_LINE	Utils/easylogging++.h	467;"	d
ELPP_COUT_LINE	Utils/easylogging++.h	469;"	d
ELPP_CRASH_HANDLER_INIT	Utils/easylogging++.h	6622;"	d
ELPP_CRT_DBG_WARNINGS	Utils/easylogging++.h	33;"	d
ELPP_CURR_FILE_LOGGER_ID	Utils/easylogging++.h	6330;"	d
ELPP_CURR_FILE_LOGGER_ID	Utils/easylogging++.h	6332;"	d
ELPP_CURR_FILE_PERFORMANCE_LOGGER	Utils/easylogging++.h	5233;"	d
ELPP_CURR_FILE_PERFORMANCE_LOGGER	Utils/easylogging++.h	5235;"	d
ELPP_CXX0X	Utils/easylogging++.h	25;"	d
ELPP_CXX0X	Utils/easylogging++.h	35;"	d
ELPP_CXX11	Utils/easylogging++.h	27;"	d
ELPP_CXX11	Utils/easylogging++.h	37;"	d
ELPP_CXX11	Utils/easylogging++.h	47;"	d
ELPP_CYGWIN	Utils/easylogging++.h	56;"	d
ELPP_DEBUG_LOG	Utils/easylogging++.h	252;"	d
ELPP_DEBUG_LOG	Utils/easylogging++.h	254;"	d
ELPP_ERROR_LOG	Utils/easylogging++.h	267;"	d
ELPP_ERROR_LOG	Utils/easylogging++.h	269;"	d
ELPP_EXPORT	Utils/easylogging++.h	184;"	d
ELPP_EXPORT	Utils/easylogging++.h	186;"	d
ELPP_EXPORT	Utils/easylogging++.h	189;"	d
ELPP_FATAL_LOG	Utils/easylogging++.h	272;"	d
ELPP_FATAL_LOG	Utils/easylogging++.h	274;"	d
ELPP_FINAL	Utils/easylogging++.h	211;"	d
ELPP_FINAL	Utils/easylogging++.h	213;"	d
ELPP_FINAL	Utils/easylogging++.h	215;"	d
ELPP_FUNC	Utils/easylogging++.h	226;"	d
ELPP_FUNC	Utils/easylogging++.h	228;"	d
ELPP_FUNC	Utils/easylogging++.h	230;"	d
ELPP_FUNC	Utils/easylogging++.h	232;"	d
ELPP_FUNC	Utils/easylogging++.h	234;"	d
ELPP_FUNC	Utils/easylogging++.h	237;"	d
ELPP_FUNC	Utils/easylogging++.h	239;"	d
ELPP_GCC_VERSION	Utils/easylogging++.h	21;"	d
ELPP_INFO_LOG	Utils/easylogging++.h	257;"	d
ELPP_INFO_LOG	Utils/easylogging++.h	259;"	d
ELPP_INITIALIZE_SYSLOG	Utils/easylogging++.h	5646;"	d
ELPP_INITI_BASIC_DECLR	Utils/easylogging++.h	1551;"	d
ELPP_INIT_EASYLOGGINGPP	Utils/easylogging++.h	6623;"	d
ELPP_INTERNAL_DEBUGGING_ENDL	Utils/easylogging++.h	105;"	d
ELPP_INTERNAL_DEBUGGING_MSG	Utils/easylogging++.h	108;"	d
ELPP_INTERNAL_DEBUGGING_OUT_ERROR	Utils/easylogging++.h	102;"	d
ELPP_INTERNAL_DEBUGGING_OUT_INFO	Utils/easylogging++.h	99;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	Utils/easylogging++.h	131;"	d
ELPP_INTERNAL_DEBUGGING_WRITE_PERROR	Utils/easylogging++.h	135;"	d
ELPP_INTERNAL_ERROR	Utils/easylogging++.h	140;"	d
ELPP_INTERNAL_ERROR	Utils/easylogging++.h	149;"	d
ELPP_INTERNAL_INFO	Utils/easylogging++.h	148;"	d
ELPP_INTERNAL_INFO	Utils/easylogging++.h	156;"	d
ELPP_INTERNAL_INFO	Utils/easylogging++.h	162;"	d
ELPP_INTERNAL_INFO	Utils/easylogging++.h	163;"	d
ELPP_INTERNAL_INFO_LEVEL	Utils/easylogging++.h	153;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	Utils/easylogging++.h	4643;"	d
ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG	Utils/easylogging++.h	4869;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	Utils/easylogging++.h	4638;"	d
ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG	Utils/easylogging++.h	4868;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	Utils/easylogging++.h	4623;"	d
ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG	Utils/easylogging++.h	4865;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	Utils/easylogging++.h	4633;"	d
ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG	Utils/easylogging++.h	4867;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	Utils/easylogging++.h	4628;"	d
ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG	Utils/easylogging++.h	4866;"	d
ELPP_LITERAL	Utils/easylogging++.h	436;"	d
ELPP_LITERAL	Utils/easylogging++.h	440;"	d
ELPP_LOGGING_ENABLED	Utils/easylogging++.h	249;"	d
ELPP_LOG_PERMS	Utils/easylogging++.h	180;"	d
ELPP_MINGW	Utils/easylogging++.h	52;"	d
ELPP_MIN_UNIT	Utils/easylogging++.h	5992;"	d
ELPP_MIN_UNIT	Utils/easylogging++.h	5994;"	d
ELPP_OS_ANDROID	Utils/easylogging++.h	89;"	d
ELPP_OS_FREEBSD	Utils/easylogging++.h	77;"	d
ELPP_OS_LINUX	Utils/easylogging++.h	69;"	d
ELPP_OS_LINUX	Utils/easylogging++.h	94;"	d
ELPP_OS_LINUX	Utils/easylogging++.h	96;"	d
ELPP_OS_MAC	Utils/easylogging++.h	73;"	d
ELPP_OS_SOLARIS	Utils/easylogging++.h	81;"	d
ELPP_OS_UNIX	Utils/easylogging++.h	85;"	d
ELPP_OS_UNIX	Utils/easylogging++.h	93;"	d
ELPP_OS_UNIX	Utils/easylogging++.h	95;"	d
ELPP_OS_WINDOWS	Utils/easylogging++.h	65;"	d
ELPP_SIMPLE_LOG	Utils/easylogging++.h	4572;"	d
ELPP_SIMPLE_LOG	Utils/easylogging++.h	4864;"	d
ELPP_STACKTRACE	Utils/easylogging++.h	167;"	d
ELPP_STRLEN	Utils/easylogging++.h	437;"	d
ELPP_STRLEN	Utils/easylogging++.h	441;"	d
ELPP_THREADING_ENABLED	Utils/easylogging++.h	223;"	d
ELPP_TRACE	Utils/easylogging++.h	6336;"	d
ELPP_TRACE	Utils/easylogging++.h	6337;"	d
ELPP_TRACE_LOG	Utils/easylogging++.h	277;"	d
ELPP_TRACE_LOG	Utils/easylogging++.h	279;"	d
ELPP_UNUSED	Utils/easylogging++.h	177;"	d
ELPP_USE_DEF_CRASH_HANDLER	Utils/easylogging++.h	6618;"	d
ELPP_USE_STD_THREADING	Utils/easylogging++.h	209;"	d
ELPP_VARIADIC_FUNC_MSVC	Utils/easylogging++.h	5208;"	d
ELPP_VARIADIC_FUNC_MSVC_RUN	Utils/easylogging++.h	5209;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	Utils/easylogging++.h	242;"	d
ELPP_VARIADIC_TEMPLATES_SUPPORTED	Utils/easylogging++.h	245;"	d
ELPP_VERBOSE_LOG	Utils/easylogging++.h	282;"	d
ELPP_VERBOSE_LOG	Utils/easylogging++.h	284;"	d
ELPP_WARNING_LOG	Utils/easylogging++.h	262;"	d
ELPP_WARNING_LOG	Utils/easylogging++.h	264;"	d
ELPP_WRITE_LOG	Utils/easylogging++.h	5220;"	d
ELPP_WRITE_LOG_AFTER_N	Utils/easylogging++.h	5227;"	d
ELPP_WRITE_LOG_EVERY_N	Utils/easylogging++.h	5224;"	d
ELPP_WRITE_LOG_IF	Utils/easylogging++.h	5222;"	d
ELPP_WRITE_LOG_N_TIMES	Utils/easylogging++.h	5230;"	d
ELPP_WX_ENABLED	Utils/easylogging++.h	4853;"	d
ELPP_WX_HASH_MAP_ENABLED	Utils/easylogging++.h	4854;"	d
ELPP_WX_PTR_ENABLED	Utils/easylogging++.h	4852;"	d
ERROR	Utils/easylogging++.h	6029;"	d
Enabled	Utils/easylogging++.h	/^    Enabled = 1,$/;"	m	class:el::Level::ConfigurationType
EnumType	Utils/easylogging++.h	/^typedef unsigned short EnumType;$/;"	t	namespace:el::base::type
Error	Utils/easylogging++.h	/^        Error = 16,$/;"	m	class:el::Level
FATAL	Utils/easylogging++.h	6030;"	d
Fatal	Utils/easylogging++.h	/^        Fatal = 8, $/;"	m	class:el::Level
File	Utils/easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
File	Utils/easylogging++.h	/^class File : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
FileBase	Utils/easylogging++.h	/^    Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
FileStreamPtr	Utils/easylogging++.h	/^typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Filename	Utils/easylogging++.h	/^    Filename = 16,$/;"	m	class:el::Level::ConfigurationType
FixedTimeFormat	Utils/easylogging++.h	/^    FixedTimeFormat = 16384$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Format	Utils/easylogging++.h	/^    Format = 8,$/;"	m	class:el::Level::ConfigurationType
FormatFlags	Utils/easylogging++.h	/^enum class FormatFlags : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
FormatSpecifierValueResolver	Utils/easylogging++.h	/^typedef std::function<const char*(void)> FormatSpecifierValueResolver;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
Function	Utils/easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Global	Utils/easylogging++.h	/^        Global = 1,$/;"	m	class:el::Level
Handler	Utils/easylogging++.h	/^    typedef void (*Handler)(int);$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
Helpers	Utils/easylogging++.h	/^class Helpers : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base
HierarchicalLogging	Utils/easylogging++.h	/^    HierarchicalLogging = 2048,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
HitCounter	Utils/easylogging++.h	/^    HitCounter(const HitCounter& hitCounter) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
HitCounter	Utils/easylogging++.h	/^    HitCounter(const char* filename, unsigned long int lineNumber) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
HitCounter	Utils/easylogging++.h	/^    HitCounter(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
HitCounter	Utils/easylogging++.h	/^class HitCounter {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Host	Utils/easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Hour	Utils/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
INFO	Utils/easylogging++.h	6026;"	d
INITIALIZE_EASYLOGGINGPP	Utils/easylogging++.h	6633;"	d
INITIALIZE_NULL_EASYLOGGINGPP	Utils/easylogging++.h	6641;"	d
IWorker	Utils/easylogging++.h	/^class IWorker {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
ImmediateFlush	Utils/easylogging++.h	/^    ImmediateFlush = 16,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Info	Utils/easylogging++.h	/^        Info = 128, $/;"	m	class:el::Level
IterableContainer	Utils/easylogging++.h	/^    IterableContainer(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableContainer
IterableContainer	Utils/easylogging++.h	/^class IterableContainer {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds
IterablePriorityQueue	Utils/easylogging++.h	/^    IterablePriorityQueue(std::priority_queue<T, Container, Comparator> queue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterablePriorityQueue
IterablePriorityQueue	Utils/easylogging++.h	/^class IterablePriorityQueue : public IterableContainer<T, Container>, public std::priority_queue<T, Container, Comparator> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds
IterableQueue	Utils/easylogging++.h	/^    IterableQueue(std::queue<T, Container> queue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableQueue
IterableQueue	Utils/easylogging++.h	/^class IterableQueue : public IterableContainer<T, Container>, public std::queue<T, Container> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds
IterableStack	Utils/easylogging++.h	/^    IterableStack(std::stack<T, Container> stack_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableStack
IterableStack	Utils/easylogging++.h	/^class IterableStack : public IterableContainer<T, Container>, public std::stack<T, Container> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds
LOG	Utils/easylogging++.h	6320;"	d
LOG	Utils/easylogging++.h	6339;"	d
LOGGER_LEVEL_WRITERS	Utils/easylogging++.h	5155;"	d
LOGGER_LEVEL_WRITERS	Utils/easylogging++.h	5204;"	d
LOGGER_LEVEL_WRITERS_DISABLED	Utils/easylogging++.h	5164;"	d
LOGGER_LEVEL_WRITERS_DISABLED	Utils/easylogging++.h	5205;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	Utils/easylogging++.h	3519;"	d
LOGGER_LEVEL_WRITERS_SIGNATURES	Utils/easylogging++.h	3537;"	d
LOG_AFTER_N	Utils/easylogging++.h	6326;"	d
LOG_AFTER_N	Utils/easylogging++.h	6347;"	d
LOG_EVERY_N	Utils/easylogging++.h	6324;"	d
LOG_EVERY_N	Utils/easylogging++.h	6345;"	d
LOG_IF	Utils/easylogging++.h	6322;"	d
LOG_IF	Utils/easylogging++.h	6342;"	d
LOG_N_TIMES	Utils/easylogging++.h	6328;"	d
LOG_N_TIMES	Utils/easylogging++.h	6349;"	d
Level	Utils/easylogging++.h	/^    Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Level	Utils/easylogging++.h	/^enum class Level : base::type::EnumType {$/;"	c	namespace:el
LevelHelper	Utils/easylogging++.h	/^class LevelHelper : base::StaticClass {$/;"	c	class:el::Level
LevelShort	Utils/easylogging++.h	/^    Level = 1<<13, FileBase = 1<<14, LevelShort = 1<<15$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Line	Utils/easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Location	Utils/easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
LogBuilder	Utils/easylogging++.h	/^class LogBuilder : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogBuilderPtr	Utils/easylogging++.h	/^typedef std::shared_ptr<LogBuilder> LogBuilderPtr;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogDetailedCrashReason	Utils/easylogging++.h	/^    LogDetailedCrashReason = 4,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
LogDispatchCallback	Utils/easylogging++.h	/^class LogDispatchCallback : public Callback<LogDispatchData> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogDispatchCallbackPtr	Utils/easylogging++.h	/^typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;$/;"	t	namespace:el::base::type
LogDispatchData	Utils/easylogging++.h	/^    LogDispatchData() : m_logMessage(nullptr), m_dispatchAction(base::DispatchAction::None) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
LogDispatchData	Utils/easylogging++.h	/^class LogDispatchData {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogDispatcher	Utils/easylogging++.h	/^    LogDispatcher(bool proceed, LogMessage&& logMessage, base::DispatchAction dispatchAction) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::LogDispatcher
LogDispatcher	Utils/easylogging++.h	/^class LogDispatcher : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder
LogFlushThreshold	Utils/easylogging++.h	/^    LogFlushThreshold = 256,$/;"	m	class:el::Level::ConfigurationType
LogFormat	Utils/easylogging++.h	/^    LogFormat(Level level, const base::type::string_t& format)$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	Utils/easylogging++.h	/^    LogFormat(LogFormat&& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	Utils/easylogging++.h	/^    LogFormat(const LogFormat& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	Utils/easylogging++.h	/^    LogFormat(void) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
LogFormat	Utils/easylogging++.h	/^class LogFormat : public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogMessage	Utils/easylogging++.h	/^    LogMessage(Level level, const std::string& file, unsigned long int line, const std::string& func,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
LogMessage	Utils/easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
LogMessage	Utils/easylogging++.h	/^class LogMessage {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LogStreamsReferenceMap	Utils/easylogging++.h	/^typedef std::map<std::string, FileStreamPtr> LogStreamsReferenceMap;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Loggable	Utils/easylogging++.h	/^class Loggable {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
Logger	Utils/easylogging++.h	/^    Logger(const Logger& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
Logger	Utils/easylogging++.h	/^    Logger(const std::string& id, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
Logger	Utils/easylogging++.h	/^    Logger(const std::string& id, const Configurations& configurations, base::LogStreamsReferenceMap* logStreamsReference) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
Logger	Utils/easylogging++.h	/^class Logger : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
LoggerId	Utils/easylogging++.h	/^    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function = 1<<6,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Loggers	Utils/easylogging++.h	/^class Loggers : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base
LoggingFlag	Utils/easylogging++.h	/^enum class LoggingFlag : base::type::EnumType {$/;"	c	class:el::Level::ConfigurationType
MAKE_CONTAINERELPP_FRIENDLY	Utils/easylogging++.h	4832;"	d
MAKE_LOGGABLE	Utils/easylogging++.h	5626;"	d
MaxLogFileSize	Utils/easylogging++.h	/^    MaxLogFileSize = 128,$/;"	m	class:el::Level::ConfigurationType
MessageBuilder	Utils/easylogging++.h	/^    MessageBuilder(void) : m_logger(nullptr), m_containerLogSeperator(ELPP_LITERAL("")) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
MessageBuilder	Utils/easylogging++.h	/^class MessageBuilder {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder
Microsecond	Utils/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
Millisecond	Utils/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
MillisecondsWidth	Utils/easylogging++.h	/^    MillisecondsWidth = 32,$/;"	m	class:el::Level::ConfigurationType
MillisecondsWidth	Utils/easylogging++.h	/^    MillisecondsWidth(void) { init(base::consts::kDefaultMillisecondsWidth); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
MillisecondsWidth	Utils/easylogging++.h	/^    explicit MillisecondsWidth(int width) { init(width); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
MillisecondsWidth	Utils/easylogging++.h	/^class MillisecondsWidth {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
Minute	Utils/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
MultiLoggerSupport	Utils/easylogging++.h	/^    MultiLoggerSupport = 128,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
Mutex	Utils/easylogging++.h	/^    Mutex(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
Mutex	Utils/easylogging++.h	/^class Mutex : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal
Mutex	Utils/easylogging++.h	/^typedef base::threading::internal::Mutex Mutex;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
NewLineForContainer	Utils/easylogging++.h	/^    NewLineForContainer = 1,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
NoCopy	Utils/easylogging++.h	/^    NoCopy(void) {}$/;"	f	class:el::base::NoCopy
NoCopy	Utils/easylogging++.h	/^class NoCopy {$/;"	c	namespace:el::base
None	Utils/easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::DispatchAction
NormalLog	Utils/easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::DispatchAction
Not	Utils/easylogging++.h	/^static inline base::type::EnumType Not(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
NullWriter	Utils/easylogging++.h	/^    NullWriter(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::NullWriter
NullWriter	Utils/easylogging++.h	/^class NullWriter : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder
OS	Utils/easylogging++.h	/^class OS : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
OStreamMani	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(std::ostream& (*OStreamMani)(std::ostream&)) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
Or	Utils/easylogging++.h	/^static inline base::type::EnumType Or(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::bitwise
PCHECK	Utils/easylogging++.h	6511;"	d
PCHECK	Utils/easylogging++.h	6525;"	d
PERFORMANCE_CHECKPOINT	Utils/easylogging++.h	6015;"	d
PERFORMANCE_CHECKPOINT	Utils/easylogging++.h	6017;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	Utils/easylogging++.h	6016;"	d
PERFORMANCE_CHECKPOINT_WITH_ID	Utils/easylogging++.h	6018;"	d
PErrorWriter	Utils/easylogging++.h	/^    PErrorWriter(Level level, const char* file, unsigned long int line,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Writer::PErrorWriter
PErrorWriter	Utils/easylogging++.h	/^class PErrorWriter : public base::Writer {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Writer
PLOG	Utils/easylogging++.h	6354;"	d
PLOG	Utils/easylogging++.h	6368;"	d
PLOG_IF	Utils/easylogging++.h	6355;"	d
PLOG_IF	Utils/easylogging++.h	6369;"	d
Parser	Utils/easylogging++.h	/^    class Parser : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
PerformanceTracker	Utils/easylogging++.h	/^    PerformanceTracker(const std::string& blockName,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker
PerformanceTracker	Utils/easylogging++.h	/^class PerformanceTracker : public base::threading::ThreadSafe, public Loggable {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base
PerformanceTracking	Utils/easylogging++.h	/^    PerformanceTracking = 64,$/;"	m	class:el::Level::ConfigurationType
PerformanceTrackingCallback	Utils/easylogging++.h	/^class PerformanceTrackingCallback : public Callback<PerformanceTrackingData> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
PerformanceTrackingCallbackPtr	Utils/easylogging++.h	/^typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;$/;"	t	namespace:el::base::type
PerformanceTrackingData	Utils/easylogging++.h	/^    explicit PerformanceTrackingData(DataType dataType) : m_performanceTracker(nullptr), $/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
PerformanceTrackingData	Utils/easylogging++.h	/^class PerformanceTrackingData {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder
PreRollOutCallback	Utils/easylogging++.h	/^typedef std::function<void(const char*, std::size_t)> PreRollOutCallback;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag
Predicate	Utils/easylogging++.h	/^        Predicate(Level level, ConfigurationType configurationType) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
Predicate	Utils/easylogging++.h	/^        Predicate(const char* filename, unsigned long int lineNumber)$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
Predicate	Utils/easylogging++.h	/^    class Predicate {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
Predicate	Utils/easylogging++.h	/^    class Predicate {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
RegisteredHitCounters	Utils/easylogging++.h	/^class RegisteredHitCounters : public base::utils::RegistryWithPred<base::HitCounter, base::HitCounter::Predicate> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
RegisteredLoggers	Utils/easylogging++.h	/^    explicit RegisteredLoggers(const LogBuilderPtr& defaultLogBuilder) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
RegisteredLoggers	Utils/easylogging++.h	/^class RegisteredLoggers : public base::utils::Registry<Logger, std::string> {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
Registry	Utils/easylogging++.h	/^    Registry(const Registry& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
Registry	Utils/easylogging++.h	/^    Registry(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
Registry	Utils/easylogging++.h	/^class Registry : public AbstractRegistry<T_Ptr, std::map<T_Key, T_Ptr*>> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
RegistryWithPred	Utils/easylogging++.h	/^    RegistryWithPred(const RegistryWithPred& sr) : AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
RegistryWithPred	Utils/easylogging++.h	/^    RegistryWithPred(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
RegistryWithPred	Utils/easylogging++.h	/^class RegistryWithPred : public AbstractRegistry<T_Ptr, std::vector<T_Ptr*>> {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
SHARE_EASYLOGGINGPP	Utils/easylogging++.h	6650;"	d
START_EASYLOGGINGPP	Utils/easylogging++.h	6659;"	d
STRCAT	Utils/easylogging++.h	194;"	d
STRCAT	Utils/easylogging++.h	199;"	d
STRCAT	Utils/easylogging++.h	204;"	d
STRCPY	Utils/easylogging++.h	195;"	d
STRCPY	Utils/easylogging++.h	200;"	d
STRCPY	Utils/easylogging++.h	205;"	d
STRERROR	Utils/easylogging++.h	193;"	d
STRERROR	Utils/easylogging++.h	198;"	d
STRERROR	Utils/easylogging++.h	203;"	d
STRTOK	Utils/easylogging++.h	192;"	d
STRTOK	Utils/easylogging++.h	197;"	d
STRTOK	Utils/easylogging++.h	202;"	d
SYSLOG	Utils/easylogging++.h	6378;"	d
SYSLOG	Utils/easylogging++.h	6401;"	d
SYSLOG_AFTER_N	Utils/easylogging++.h	6381;"	d
SYSLOG_AFTER_N	Utils/easylogging++.h	6404;"	d
SYSLOG_EVERY_N	Utils/easylogging++.h	6380;"	d
SYSLOG_EVERY_N	Utils/easylogging++.h	6403;"	d
SYSLOG_IF	Utils/easylogging++.h	6379;"	d
SYSLOG_IF	Utils/easylogging++.h	6402;"	d
SYSLOG_N_TIMES	Utils/easylogging++.h	6382;"	d
SYSLOG_N_TIMES	Utils/easylogging++.h	6405;"	d
ScopedAddFlag	Utils/easylogging++.h	/^        ScopedAddFlag(LoggingFlag flag) : m_flag(flag) { Loggers::addFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedAddFlag
ScopedAddFlag	Utils/easylogging++.h	/^    class ScopedAddFlag {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
ScopedLock	Utils/easylogging++.h	/^    explicit ScopedLock(M& mutex) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
ScopedLock	Utils/easylogging++.h	/^class ScopedLock : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal
ScopedLock	Utils/easylogging++.h	/^typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;$/;"	t	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
ScopedRemoveFlag	Utils/easylogging++.h	/^        ScopedRemoveFlag(LoggingFlag flag) : m_flag(flag) { Loggers::removeFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedRemoveFlag
ScopedRemoveFlag	Utils/easylogging++.h	/^    class ScopedRemoveFlag {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
Second	Utils/easylogging++.h	/^    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day = 5$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit
StackTrace	Utils/easylogging++.h	/^    StackTrace(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
StackTrace	Utils/easylogging++.h	/^class StackTrace : base::NoCopy {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug
StackTraceEntry	Utils/easylogging++.h	/^        StackTraceEntry(std::size_t index, char* loc) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
StackTraceEntry	Utils/easylogging++.h	/^        StackTraceEntry(std::size_t index, const char* loc, const char* demang, const char* hex, const char* addr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
StackTraceEntry	Utils/easylogging++.h	/^    class StackTraceEntry {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
StaticClass	Utils/easylogging++.h	/^class StaticClass {$/;"	c	namespace:el::base
Storage	Utils/easylogging++.h	/^    Storage(const LogBuilderPtr& defaultLogBuilder, base::IWorker* asyncDispatchWorker) :$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
Storage	Utils/easylogging++.h	/^class Storage : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
StoragePointer	Utils/easylogging++.h	/^typedef std::shared_ptr<base::Storage> StoragePointer;$/;"	t	namespace:el::base::type
Str	Utils/easylogging++.h	/^class Str : base::StaticClass {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
StrictLogFileSizeCheck	Utils/easylogging++.h	/^    StrictLogFileSizeCheck = 32,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag
SysLog	Utils/easylogging++.h	/^    None = 1, NormalLog = 2, SysLog = 4$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::DispatchAction
SysLogInitializer	Utils/easylogging++.h	/^    SysLogInitializer(const char* processIdent, int options = 0, int facility = 0) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::SysLogInitializer
SysLogInitializer	Utils/easylogging++.h	/^class SysLogInitializer {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base
TIMED_BLOCK	Utils/easylogging++.h	5989;"	d
TIMED_BLOCK	Utils/easylogging++.h	6006;"	d
TIMED_FUNC	Utils/easylogging++.h	5991;"	d
TIMED_FUNC	Utils/easylogging++.h	6014;"	d
TIMED_SCOPE	Utils/easylogging++.h	5990;"	d
TIMED_SCOPE	Utils/easylogging++.h	6005;"	d
TRACE	Utils/easylogging++.h	6031;"	d
ThreadId	Utils/easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
ThreadSafe	Utils/easylogging++.h	/^    ThreadSafe(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
ThreadSafe	Utils/easylogging++.h	/^class ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
TimestampUnit	Utils/easylogging++.h	/^enum class TimestampUnit : base::type::EnumType {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base
ToFile	Utils/easylogging++.h	/^    ToFile = 2,$/;"	m	class:el::Level::ConfigurationType
ToStandardOutput	Utils/easylogging++.h	/^    ToStandardOutput = 4,$/;"	m	class:el::Level::ConfigurationType
Trace	Utils/easylogging++.h	/^        Trace = 2,$/;"	m	class:el::Level
TypedConfigurations	Utils/easylogging++.h	/^    TypedConfigurations(Configurations* configurations, base::LogStreamsReferenceMap* logStreamsReference) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
TypedConfigurations	Utils/easylogging++.h	/^    TypedConfigurations(const TypedConfigurations& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
TypedConfigurations	Utils/easylogging++.h	/^class TypedConfigurations : public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
Unknown	Utils/easylogging++.h	/^        Unknown = 1010$/;"	m	class:el::Level
Unknown	Utils/easylogging++.h	/^    Unknown = 1010$/;"	m	class:el::Level::ConfigurationType
User	Utils/easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
VERBOSE	Utils/easylogging++.h	6032;"	d
VLOG	Utils/easylogging++.h	6321;"	d
VLOG	Utils/easylogging++.h	6340;"	d
VLOG_AFTER_N	Utils/easylogging++.h	6327;"	d
VLOG_AFTER_N	Utils/easylogging++.h	6348;"	d
VLOG_EVERY_N	Utils/easylogging++.h	6325;"	d
VLOG_EVERY_N	Utils/easylogging++.h	6346;"	d
VLOG_IF	Utils/easylogging++.h	6323;"	d
VLOG_IF	Utils/easylogging++.h	6343;"	d
VLOG_IS_ON	Utils/easylogging++.h	5986;"	d
VLOG_IS_ON	Utils/easylogging++.h	5988;"	d
VLOG_N_TIMES	Utils/easylogging++.h	6329;"	d
VLOG_N_TIMES	Utils/easylogging++.h	6350;"	d
VRegistry	Utils/easylogging++.h	/^    explicit VRegistry(base::type::VerboseLevel level, base::type::EnumType* pFlags) : m_level(level), m_pFlags(pFlags) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
VRegistry	Utils/easylogging++.h	/^class VRegistry : base::NoCopy, public base::threading::ThreadSafe {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base
Verbose	Utils/easylogging++.h	/^        Verbose = 64,$/;"	m	class:el::Level
VerboseLevel	Utils/easylogging++.h	/^    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId = 1<<12,$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
VerboseLevel	Utils/easylogging++.h	/^typedef int VerboseLevel;$/;"	t	namespace:el::base::type
VersionInfo	Utils/easylogging++.h	/^class VersionInfo : base::StaticClass {$/;"	c	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base
WARNING	Utils/easylogging++.h	6027;"	d
Warning	Utils/easylogging++.h	/^        Warning = 32, $/;"	m	class:el::Level
Writer	Utils/easylogging++.h	/^    Writer(Level level, const char* file, unsigned long int line,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Writer
Writer	Utils/easylogging++.h	/^class Writer : base::NoCopy {$/;"	c	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder
abort	Utils/easylogging++.h	/^static inline void abort(int status, const std::string& reason = std::string()) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
addFlag	Utils/easylogging++.h	/^    inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
addFlag	Utils/easylogging++.h	/^    inline void addFlag(base::FormatFlags flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
addFlag	Utils/easylogging++.h	/^    static inline void addFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
addFlag	Utils/easylogging++.h	/^static inline void addFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
addToBuff	Utils/easylogging++.h	/^    static inline char* addToBuff(const char* str, char* buf, const char* bufLim) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
allowed	Utils/easylogging++.h	/^    bool allowed(base::type::VerboseLevel vlevel, const char* file) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
asyncLogQueue	Utils/easylogging++.h	/^    inline base::AsyncLogQueue* asyncLogQueue(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
base	Utils/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag
base	Utils/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
base	Utils/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
base	Utils/easylogging++.h	/^namespace base {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData
base	Utils/easylogging++.h	/^namespace base {$/;"	n	namespace:el
base	Utils/easylogging++.h	/^namespace base {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base
base	Utils/easylogging++.h	/^namespace base {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base
base	Utils/easylogging++.h	/^namespace base {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::el
begin	Utils/easylogging++.h	/^    iterator begin(void) { return getContainer().begin(); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableContainer
bitwise	Utils/easylogging++.h	/^namespace bitwise {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
blockName	Utils/easylogging++.h	/^inline const std::string* PerformanceTrackingData::blockName() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
brief	Utils/easylogging++.h	/^        const char* brief;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon7
build	Utils/easylogging++.h	/^    base::type::string_t build(const LogMessage* logMessage, bool appendNewLine) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder
build	Utils/easylogging++.h	/^    void build(Configurations* configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
cStringCaseEq	Utils/easylogging++.h	/^    static bool cStringCaseEq(const char* s1, const char* s2) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
cStringEq	Utils/easylogging++.h	/^    static inline bool cStringEq(const char* s1, const char* s2) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
castFromInt	Utils/easylogging++.h	/^    static ConfigurationType castFromInt(base::type::EnumType c) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
castFromInt	Utils/easylogging++.h	/^    static Level castFromInt(base::type::EnumType l) {$/;"	f	class:el::Level::LevelHelper
castToInt	Utils/easylogging++.h	/^    static base::type::EnumType castToInt(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
castToInt	Utils/easylogging++.h	/^    static base::type::EnumType castToInt(Level level) {$/;"	f	class:el::Level::LevelHelper
charPtrVal	Utils/easylogging++.h	/^static inline const char* charPtrVal(const char* pointer) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
char_t	Utils/easylogging++.h	/^typedef wchar_t char_t;$/;"	t	namespace:el::base::type
checkNotNull	Utils/easylogging++.h	/^static T* checkNotNull(T* ptr, const char* name, const char* loggers, ...) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::el::base::utils
checkpointId	Utils/easylogging++.h	/^    inline std::string checkpointId(void) const { return m_checkpointId; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
clean	Utils/easylogging++.h	/^    inline bool clean() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::AsyncDispatchWorker
clear	Utils/easylogging++.h	/^    inline void clear(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
clearBuff	Utils/easylogging++.h	/^    static inline char* clearBuff(char buff[], std::size_t lim) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
clearModules	Utils/easylogging++.h	/^    inline void clearModules(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
clearVModules	Utils/easylogging++.h	/^    static inline void clearVModules(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
commandLineArgs	Utils/easylogging++.h	/^    inline const base::utils::CommandLineArgs* commandLineArgs(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
commandLineArgs	Utils/easylogging++.h	/^    static inline const el::base::utils::CommandLineArgs* commandLineArgs(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
configurationFile	Utils/easylogging++.h	/^    inline const std::string& configurationFile(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
configurationType	Utils/easylogging++.h	/^    inline ConfigurationType configurationType(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
configurations	Utils/easylogging++.h	/^    const Configurations* configurations(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
configurations	Utils/easylogging++.h	/^    inline Configurations* configurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
configure	Utils/easylogging++.h	/^    void configure(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
configureFromArg	Utils/easylogging++.h	/^    static inline bool configureFromArg(const char* argKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
configureFromGlobal	Utils/easylogging++.h	/^    static void configureFromGlobal(const char* globalConfigurationFilePath) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
const_iterator	Utils/easylogging++.h	/^    typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
const_iterator	Utils/easylogging++.h	/^    typedef typename Container::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableContainer
const_iterator	Utils/easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
const_iterator	Utils/easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
consts	Utils/easylogging++.h	/^namespace consts {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base
contains	Utils/easylogging++.h	/^    static inline bool contains(const char* str, char c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
convertAndAddToBuff	Utils/easylogging++.h	/^    static inline char* convertAndAddToBuff(std::size_t n, int len, char* buf, const char* bufLim, bool zeroPadded = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
convertFromString	Utils/easylogging++.h	/^    static ConfigurationType convertFromString(const char* configStr) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
convertFromString	Utils/easylogging++.h	/^    static Level convertFromString(const char* levelStr) {$/;"	f	class:el::Level::LevelHelper
convertTemplateToStdString	Utils/easylogging++.h	/^    static std::string convertTemplateToStdString(const T& templ) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
convertToColoredOutput	Utils/easylogging++.h	/^    void convertToColoredOutput(base::type::string_t* logLine, Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogBuilder
convertToString	Utils/easylogging++.h	/^    static const char* convertToString(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
convertToString	Utils/easylogging++.h	/^    static const char* convertToString(Level level) {$/;"	f	class:el::Level::LevelHelper
crashAbort	Utils/easylogging++.h	/^    static inline void crashAbort(int sig, const char* sourceFile = "", unsigned int long line = 0) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
crashAbort	Utils/easylogging++.h	/^static inline void crashAbort(int sig) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
crashReason	Utils/easylogging++.h	/^static std::string crashReason(int sig) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
createPath	Utils/easylogging++.h	/^    static bool createPath(const std::string& path) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
customFormatSpecifiers	Utils/easylogging++.h	/^    const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
data	Utils/easylogging++.h	/^    inline LogDispatchData* data(void) { return &m_dispatchData; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
dataType	Utils/easylogging++.h	/^    inline PerformanceTrackingData::DataType dataType(void) const { return m_dataType; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
dateTimeFormat	Utils/easylogging++.h	/^    inline const std::string& dateTimeFormat(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
debug	Utils/easylogging++.h	/^namespace debug {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base
deepCopy	Utils/easylogging++.h	/^    virtual inline void deepCopy(const AbstractRegistry<T_Ptr, std::vector<T_Ptr*>>& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
defaultConfigurations	Utils/easylogging++.h	/^    inline Configurations* defaultConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
defaultConfigurations	Utils/easylogging++.h	/^    static inline const Configurations* defaultConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
defaultCrashHandler	Utils/easylogging++.h	/^static inline void defaultCrashHandler(int sig) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
defaultPreRollOutCallback	Utils/easylogging++.h	/^static inline void defaultPreRollOutCallback(const char*, std::size_t) {}$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base
defaultTypedConfigurations	Utils/easylogging++.h	/^    static base::TypedConfigurations defaultTypedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
detail	Utils/easylogging++.h	/^        const char* detail;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon7
dispatch	Utils/easylogging++.h	/^    void dispatch(base::type::string_t&& logLine) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
dispatch	Utils/easylogging++.h	/^    void dispatch(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::LogDispatcher
dispatchAction	Utils/easylogging++.h	/^    inline base::DispatchAction dispatchAction(void) const { return m_dispatchAction; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
el	Utils/easylogging++.h	/^namespace el {$/;"	n
el	Utils/easylogging++.h	/^namespace el {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base
el_getVALength	Utils/easylogging++.h	5210;"	d
el_resolveVALength	Utils/easylogging++.h	5219;"	d
empty	Utils/easylogging++.h	/^    inline bool empty(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
empty	Utils/easylogging++.h	/^    inline bool empty(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogQueue
emptyQueue	Utils/easylogging++.h	/^    inline void emptyQueue() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::AsyncDispatchWorker
enabled	Utils/easylogging++.h	/^    inline bool enabled(Level level) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
enabled	Utils/easylogging++.h	/^    inline bool enabled(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
enabled	Utils/easylogging++.h	/^    inline bool enabled(void) const { return m_enabled; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
end	Utils/easylogging++.h	/^    iterator end(void) { return getContainer().end(); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableContainer
endTime	Utils/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::endTime() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
endsWith	Utils/easylogging++.h	/^    static inline bool endsWith(const std::string& str, const std::string& end) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
file	Utils/easylogging++.h	/^    inline const char* file(void) const { return m_file; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
file	Utils/easylogging++.h	/^    inline const std::string& file(void) const { return m_file; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
fileStream	Utils/easylogging++.h	/^    inline base::type::fstream_t* fileStream(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
filename	Utils/easylogging++.h	/^    inline const char* filename(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
filename	Utils/easylogging++.h	/^    inline const std::string& filename(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
firstCheckpoint	Utils/easylogging++.h	/^    inline bool firstCheckpoint(void) const { return m_firstCheckpoint; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
flags	Utils/easylogging++.h	/^    inline base::type::EnumType flags(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
flags	Utils/easylogging++.h	/^    inline base::type::EnumType flags(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
flush	Utils/easylogging++.h	/^    inline void flush(Level level, base::type::fstream_t* fs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
flush	Utils/easylogging++.h	/^    inline void flush(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
flushAll	Utils/easylogging++.h	/^    inline void flushAll(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
flushAll	Utils/easylogging++.h	/^    static inline void flushAll(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
forEachConfigType	Utils/easylogging++.h	/^    static inline void forEachConfigType(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::Level::ConfigurationType::ConfigurationTypeHelper
forEachLevel	Utils/easylogging++.h	/^    static inline void forEachLevel(base::type::EnumType* startIndex, const std::function<bool(void)>& fn) {$/;"	f	class:el::Level::LevelHelper
format	Utils/easylogging++.h	/^    inline const base::type::string_t& format(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
formatSpecifier	Utils/easylogging++.h	/^    inline const char* formatSpecifier(void) const { return m_formatSpecifier; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
formattedTimeTaken	Utils/easylogging++.h	/^    inline const base::type::string_t* formattedTimeTaken() const { return &m_formattedTimeTaken; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
front	Utils/easylogging++.h	/^    inline AsyncLogItem front(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogQueue
fstream_t	Utils/easylogging++.h	/^typedef std::wfstream fstream_t;$/;"	t	namespace:el::base::type
func	Utils/easylogging++.h	/^    inline const char* func(void) const { return m_func; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
func	Utils/easylogging++.h	/^    inline const std::string& func(void) const { return m_func; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
generateNew	Utils/easylogging++.h	/^    void generateNew(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
get	Utils/easylogging++.h	/^    Logger* get(const std::string& id, bool forceCreation = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
get	Utils/easylogging++.h	/^    inline Configuration* get(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
get	Utils/easylogging++.h	/^    inline T_Ptr* get(const T& arg1, const T2 arg2) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
get	Utils/easylogging++.h	/^    inline T_Ptr* get(const T_Key& uniqKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
getBashOutput	Utils/easylogging++.h	/^    static const std::string getBashOutput(const char* command) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
getConfigByRef	Utils/easylogging++.h	/^    inline Conf_T& getConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
getConfigByVal	Utils/easylogging++.h	/^    inline Conf_T getConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
getContainer	Utils/easylogging++.h	/^    inline Container& getContainer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterablePriorityQueue
getContainer	Utils/easylogging++.h	/^    inline Container& getContainer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableQueue
getContainer	Utils/easylogging++.h	/^    inline Container& getContainer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableStack
getCounter	Utils/easylogging++.h	/^    inline const base::HitCounter* getCounter(const char* filename, unsigned long int lineNumber) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
getCurrentThreadId	Utils/easylogging++.h	/^static inline std::string getCurrentThreadId(void) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
getDeviceName	Utils/easylogging++.h	/^    static std::string getDeviceName(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
getLatestStack	Utils/easylogging++.h	/^    inline std::vector<StackTraceEntry>& getLatestStack(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
getLogger	Utils/easylogging++.h	/^    static inline Logger* getLogger(const std::string& identity, bool registerIfNotAvailable = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
getParamValue	Utils/easylogging++.h	/^    inline const char* getParamValue(const char* paramKey) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
getProperty	Utils/easylogging++.h	/^    static inline std::string getProperty(const char* prop) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
getSizeOfFile	Utils/easylogging++.h	/^    static std::size_t getSizeOfFile(base::type::fstream_t* fs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
getULong	Utils/easylogging++.h	/^    unsigned long getULong(std::string confVal) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
getWindowsEnvironmentVariable	Utils/easylogging++.h	/^    static const char* getWindowsEnvironmentVariable(const char* varname) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS
gettimeofday	Utils/easylogging++.h	/^    static void gettimeofday(struct timeval* tv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime
handle	Utils/easylogging++.h	/^    void handle(AsyncLogItem* logItem) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::AsyncDispatchWorker
handle	Utils/easylogging++.h	/^    void handle(const LogDispatchData* data) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
handle	Utils/easylogging++.h	/^    void handle(const LogDispatchData* data) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::AsyncLogDispatchCallback
handle	Utils/easylogging++.h	/^    void handle(const PerformanceTrackingData* data) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker::DefaultPerformanceTrackingCallback
has	Utils/easylogging++.h	/^    inline bool has(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
hasConfiguration	Utils/easylogging++.h	/^    bool hasConfiguration(ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
hasConfiguration	Utils/easylogging++.h	/^    inline bool hasConfiguration(Level level, ConfigurationType configurationType) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
hasCustomFormatSpecifier	Utils/easylogging++.h	/^    inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
hasCustomFormatSpecifier	Utils/easylogging++.h	/^    static inline bool hasCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
hasFlag	Utils/easylogging++.h	/^    inline bool hasFlag(LoggingFlag flag) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
hasFlag	Utils/easylogging++.h	/^    inline bool hasFlag(base::FormatFlags flag) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
hasFlag	Utils/easylogging++.h	/^    static inline bool hasFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
hasFlag	Utils/easylogging++.h	/^static inline bool hasFlag(Enum e, base::type::EnumType flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
hasLogger	Utils/easylogging++.h	/^    static inline bool hasLogger(const std::string& identity) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
hasParam	Utils/easylogging++.h	/^    inline bool hasParam(const char* paramKey) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
hasParamWithValue	Utils/easylogging++.h	/^    inline bool hasParamWithValue(const char* paramKey) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
hitCounters	Utils/easylogging++.h	/^    inline base::RegisteredHitCounters* hitCounters(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
hitCounts	Utils/easylogging++.h	/^    inline std::size_t hitCounts(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
id	Utils/easylogging++.h	/^    inline const std::string& id(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
ignoreComments	Utils/easylogging++.h	/^        static void ignoreComments(std::string* line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
increment	Utils/easylogging++.h	/^    inline void increment(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
init	Utils/easylogging++.h	/^    inline void init(base::PerformanceTracker* performanceTracker, bool firstCheckpoint = false) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
init	Utils/easylogging++.h	/^    void init(int width) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
initUnflushedCount	Utils/easylogging++.h	/^    void initUnflushedCount(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
initialize	Utils/easylogging++.h	/^    void initialize(Logger* logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
insertFile	Utils/easylogging++.h	/^    void insertFile(Level level, const std::string& fullFilename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
installCustomFormatSpecifier	Utils/easylogging++.h	/^    inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
installCustomFormatSpecifier	Utils/easylogging++.h	/^    static inline void installCustomFormatSpecifier(const CustomFormatSpecifier& customFormatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
installLogDispatchCallback	Utils/easylogging++.h	/^    inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
installLogDispatchCallback	Utils/easylogging++.h	/^    static inline bool installLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
installPerformanceTrackingCallback	Utils/easylogging++.h	/^    inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
installPerformanceTrackingCallback	Utils/easylogging++.h	/^    static inline bool installPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
installPreRollOutCallback	Utils/easylogging++.h	/^    static inline void installPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
internal	Utils/easylogging++.h	/^namespace internal {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
isComment	Utils/easylogging++.h	/^        static inline bool isComment(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
isConfig	Utils/easylogging++.h	/^        static inline bool isConfig(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
isDigit	Utils/easylogging++.h	/^    static inline bool isDigit(char c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
isFlushNeeded	Utils/easylogging++.h	/^    inline bool isFlushNeeded(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
isLevel	Utils/easylogging++.h	/^        static inline bool isLevel(const std::string& line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
isValidId	Utils/easylogging++.h	/^    static inline bool isValidId(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
iterator	Utils/easylogging++.h	/^    typedef typename Container::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
iterator	Utils/easylogging++.h	/^    typedef typename Container::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableContainer
iterator	Utils/easylogging++.h	/^    typedef typename Registry<T_Ptr, T_Key>::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
iterator	Utils/easylogging++.h	/^    typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;$/;"	t	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
kAm	Utils/easylogging++.h	/^    static const char* kAm                              =      "AM";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kAppNameFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kAppNameFormatSpecifier          =      ELPP_LITERAL("%app");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationComment	Utils/easylogging++.h	/^    static const char* kConfigurationComment                   =      "##";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationLevel	Utils/easylogging++.h	/^    static const char* kConfigurationLevel                     =      "*";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kConfigurationLoggerId	Utils/easylogging++.h	/^    static const char* kConfigurationLoggerId                  =      "--";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCrashSignals	Utils/easylogging++.h	/^    } kCrashSignals[] = {$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts	typeref:struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon7
kCrashSignalsCount	Utils/easylogging++.h	/^    static const int kCrashSignalsCount                          =      sizeof(kCrashSignals) \/ sizeof(kCrashSignals[0]);$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCurrentHostFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kCurrentHostFormatSpecifier      =      ELPP_LITERAL("%host");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kCurrentUserFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kCurrentUserFormatSpecifier      =      ELPP_LITERAL("%user");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDateTimeFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kDateTimeFormatSpecifier         =      ELPP_LITERAL("%datetime");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDateTimeFormatSpecifierForFilename	Utils/easylogging++.h	/^    static const char* kDateTimeFormatSpecifierForFilename            =      "%datetime";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDays	Utils/easylogging++.h	/^    static const char* kDays[7]                         =      { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDaysAbbrev	Utils/easylogging++.h	/^    static const char* kDaysAbbrev[7]                   =      { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDebugLevelLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kDebugLevelLogValue    =   ELPP_LITERAL("DEBUG");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDebugLevelShortLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kDebugLevelShortLogValue    =   ELPP_LITERAL("D");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultDateTimeFormat	Utils/easylogging++.h	/^    static const char* kDefaultDateTimeFormat           =      "%Y-%M-%d %H:%m:%s,%g";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultDateTimeFormatInFilename	Utils/easylogging++.h	/^    static const char* kDefaultDateTimeFormatInFilename =      "%Y-%M-%d_%H-%m";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	Utils/easylogging++.h	/^    static const char* kDefaultLogFile                         =      "logs\/myeasylog.log";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	Utils/easylogging++.h	/^    static const char* kDefaultLogFile                         =      "logs\\\\myeasylog.log";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFile	Utils/easylogging++.h	/^    static const char* kDefaultLogFile                         =      ELPP_DEFAULT_LOG_FILE;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLogFileParam	Utils/easylogging++.h	/^    static const char* kDefaultLogFileParam                    =      "--default-log-file";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultLoggerId	Utils/easylogging++.h	/^    static const char* kDefaultLoggerId                        =      "default";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kDefaultMillisecondsWidth	Utils/easylogging++.h	/^    static const unsigned int  kDefaultMillisecondsWidth       =      3;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kErrorLevelLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kErrorLevelLogValue    =   ELPP_LITERAL("ERROR");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kErrorLevelShortLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kErrorLevelShortLogValue    =   ELPP_LITERAL("E");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFatalLevelLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kFatalLevelLogValue    =   ELPP_LITERAL("FATAL");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFatalLevelShortLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kFatalLevelShortLogValue    =   ELPP_LITERAL("F");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFilePathSeperator	Utils/easylogging++.h	/^    static const char* kFilePathSeperator                      =      "\/";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFilePathSeperator	Utils/easylogging++.h	/^    static const char* kFilePathSeperator                      =      "\\\\";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFormatSpecifierChar	Utils/easylogging++.h	/^    static const char  kFormatSpecifierChar                    =      '%';$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kFormatSpecifierCharValue	Utils/easylogging++.h	/^    static const char  kFormatSpecifierCharValue               =      'v';$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kInfoLevelLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kInfoLevelLogValue     =   ELPP_LITERAL("INFO ");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kInfoLevelShortLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kInfoLevelShortLogValue     =   ELPP_LITERAL("I");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFileBaseFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kLogFileBaseFormatSpecifier      =      ELPP_LITERAL("%fbase");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFileFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kLogFileFormatSpecifier          =      ELPP_LITERAL("%file");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogFunctionFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kLogFunctionFormatSpecifier      =      ELPP_LITERAL("%func");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogLineFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kLogLineFormatSpecifier          =      ELPP_LITERAL("%line");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLogLocationFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kLogLocationFormatSpecifier      =      ELPP_LITERAL("%loc");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLoggerIdFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kLoggerIdFormatSpecifier         =      ELPP_LITERAL("%logger");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kLoggingFlagsParam	Utils/easylogging++.h	/^    static const char* kLoggingFlagsParam                      =      "--logging-flags";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxLogPerContainer	Utils/easylogging++.h	/^    static const unsigned int kMaxLogPerContainer              =      100;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxLogPerCounter	Utils/easylogging++.h	/^    static const unsigned int kMaxLogPerCounter                =      100000;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMaxStack	Utils/easylogging++.h	/^    static const std::size_t kMaxStack = 64;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
kMaxValid	Utils/easylogging++.h	/^    static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(ConfigurationType::MaxLogFileSize);$/;"	m	class:el::Level::ConfigurationType::ConfigurationTypeHelper
kMaxValid	Utils/easylogging++.h	/^    static const base::type::EnumType kMaxValid = static_cast<base::type::EnumType>(Level::Info);$/;"	m	class:el::Level::LevelHelper
kMaxVerboseLevel	Utils/easylogging++.h	/^    static const base::type::VerboseLevel kMaxVerboseLevel     =      9;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMessageFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kMessageFormatSpecifier          =      ELPP_LITERAL("%msg");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMinValid	Utils/easylogging++.h	/^    static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(ConfigurationType::Enabled);$/;"	m	class:el::Level::ConfigurationType::ConfigurationTypeHelper
kMinValid	Utils/easylogging++.h	/^    static const base::type::EnumType kMinValid = static_cast<base::type::EnumType>(Level::Trace);$/;"	m	class:el::Level::LevelHelper
kMonths	Utils/easylogging++.h	/^    static const char* kMonths[12]                      =      { "January", "February", "March", "Apri", "May", "June", "July", "August",$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kMonthsAbbrev	Utils/easylogging++.h	/^    static const char* kMonthsAbbrev[12]                =      { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kNullPointer	Utils/easylogging++.h	/^    static const char* kNullPointer                            =      "nullptr";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPerformanceLoggerId	Utils/easylogging++.h	/^    static const char* kPerformanceLoggerId                    =      "performance";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPerformanceTrackerDefaultLevel	Utils/easylogging++.h	/^    static const Level kPerformanceTrackerDefaultLevel         =      Level::Info;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kPm	Utils/easylogging++.h	/^    static const char* kPm                              =      "PM";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSeverityLevelFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kSeverityLevelFormatSpecifier    =      ELPP_LITERAL("%level");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSeverityLevelShortFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kSeverityLevelShortFormatSpecifier    =      ELPP_LITERAL("%levshort");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSourceFilenameMaxLength	Utils/easylogging++.h	/^    static const std::size_t kSourceFilenameMaxLength          =      100;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kSourceLineMaxLength	Utils/easylogging++.h	/^    static const std::size_t kSourceLineMaxLength              =      10;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kStackStart	Utils/easylogging++.h	/^    static const std::size_t kStackStart = 2;  \/\/ We want to skip c'tor and StackTrace::generateNew()$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
kSysLogLoggerId	Utils/easylogging++.h	/^    static const char* kSysLogLoggerId                         =      "syslog";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kThreadIdFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kThreadIdFormatSpecifier         =      ELPP_LITERAL("%thread");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTimeFormats	Utils/easylogging++.h	/^    } kTimeFormats[] = {$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts	typeref:struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon6
kTimeFormatsCount	Utils/easylogging++.h	/^    static const int kTimeFormatsCount                           =      sizeof(kTimeFormats) \/ sizeof(kTimeFormats[0]);$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTraceLevelLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kTraceLevelLogValue    =   ELPP_LITERAL("TRACE");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kTraceLevelShortLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kTraceLevelShortLogValue    =   ELPP_LITERAL("T");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kUnknownHost	Utils/easylogging++.h	/^    static const char* kUnknownHost                            =      "unknown-host";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kUnknownUser	Utils/easylogging++.h	/^    static const char* kUnknownUser                            =      "user";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kValidLoggerIdSymbols	Utils/easylogging++.h	/^    static const char* kValidLoggerIdSymbols                   =      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._";$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelFormatSpecifier	Utils/easylogging++.h	/^    static const base::type::char_t* kVerboseLevelFormatSpecifier     =      ELPP_LITERAL("%vlevel");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kVerboseLevelLogValue  =   ELPP_LITERAL("VER");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kVerboseLevelShortLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kVerboseLevelShortLogValue  =   ELPP_LITERAL("V");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kWarningLevelLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kWarningLevelLogValue  =   ELPP_LITERAL("WARN ");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kWarningLevelShortLogValue	Utils/easylogging++.h	/^    static const base::type::char_t* kWarningLevelShortLogValue  =   ELPP_LITERAL("W");$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
kYearBase	Utils/easylogging++.h	/^    static const int kYearBase                          =      1900;$/;"	m	namespace:el::Level::ConfigurationType::LoggingFlag::base::consts
lastCheckpointTime	Utils/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::lastCheckpointTime() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
level	Utils/easylogging++.h	/^    inline Level level(void) const { return m_level; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
level	Utils/easylogging++.h	/^    inline Level level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
level	Utils/easylogging++.h	/^    inline Level level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
level	Utils/easylogging++.h	/^    inline base::type::VerboseLevel level(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
line	Utils/easylogging++.h	/^    inline unsigned long int line(void) const { return m_line; } \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
line	Utils/easylogging++.h	/^    inline unsigned long int line(void) const { return m_line; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
lineNumber	Utils/easylogging++.h	/^    inline unsigned long int lineNumber(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
lock	Utils/easylogging++.h	/^    inline void lock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
log	Utils/easylogging++.h	/^    inline void Logger::log(Level level, const T& log) { $/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
log	Utils/easylogging++.h	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
log	Utils/easylogging++.h	/^    virtual inline void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
log	Utils/easylogging++.h	/^    virtual void log(el::base::type::ostream_t& os) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
log	Utils/easylogging++.h	/^    void Logger::log(Level level, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
logBuilder	Utils/easylogging++.h	/^    inline LogBuilder* logBuilder(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
logCrashReason	Utils/easylogging++.h	/^    static inline void logCrashReason(int sig, bool stackTraceIfAvailable = false,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
logCrashReason	Utils/easylogging++.h	/^static void logCrashReason(int sig, bool stackTraceIfAvailable, Level level, const char* logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
logDispatchCallback	Utils/easylogging++.h	/^    inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
logDispatchCallback	Utils/easylogging++.h	/^    static inline T* logDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
logFlushThreshold	Utils/easylogging++.h	/^    inline std::size_t logFlushThreshold(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
logFormat	Utils/easylogging++.h	/^    inline const base::LogFormat& logFormat(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
logLine	Utils/easylogging++.h	/^    inline base::type::string_t logLine(void) { return m_logLine; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
logMessage	Utils/easylogging++.h	/^    inline LogMessage* logMessage(void) { return &m_logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
logMessage	Utils/easylogging++.h	/^    inline const LogMessage* logMessage(void) const { return m_logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
logStreamsReference	Utils/easylogging++.h	/^    inline base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
logStreamsReference	Utils/easylogging++.h	/^    static inline const base::LogStreamsReferenceMap* logStreamsReference(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
log_	Utils/easylogging++.h	/^    inline void Logger::log_(Level level, int vlevel, const T& log) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
log_	Utils/easylogging++.h	/^    void Logger::log_(Level level, int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
logger	Utils/easylogging++.h	/^    inline Logger* logger(void) const { return m_logger; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
loggerId	Utils/easylogging++.h	/^inline const std::string& PerformanceTrackingData::loggerId(void) const { return m_performanceTracker->m_loggerId; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
ltrim	Utils/easylogging++.h	/^    static inline std::string& ltrim(std::string& str) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
m_addr	Utils/easylogging++.h	/^        std::string m_addr;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_argc	Utils/easylogging++.h	/^    int m_argc;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_argv	Utils/easylogging++.h	/^    char** m_argv;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_asyncDispatchWorker	Utils/easylogging++.h	/^    base::IWorker* m_asyncDispatchWorker;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_asyncLogQueue	Utils/easylogging++.h	/^    base::AsyncLogQueue* m_asyncLogQueue;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_checkpointId	Utils/easylogging++.h	/^    std::string m_checkpointId;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_commandLineArgs	Utils/easylogging++.h	/^    base::utils::CommandLineArgs m_commandLineArgs;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_configurationFile	Utils/easylogging++.h	/^    std::string m_configurationFile;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
m_configurationType	Utils/easylogging++.h	/^        ConfigurationType m_configurationType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
m_configurationType	Utils/easylogging++.h	/^    ConfigurationType m_configurationType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
m_configurations	Utils/easylogging++.h	/^    Configurations m_configurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_configurations	Utils/easylogging++.h	/^    Configurations* m_configurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_containerLogSeperator	Utils/easylogging++.h	/^    const base::type::char_t* m_containerLogSeperator;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
m_customFormatSpecifiers	Utils/easylogging++.h	/^    std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_data	Utils/easylogging++.h	/^    const LogDispatchData* m_data;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback
m_data	Utils/easylogging++.h	/^    const PerformanceTrackingData* m_data;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTracker::DefaultPerformanceTrackingCallback
m_dataType	Utils/easylogging++.h	/^    PerformanceTrackingData::DataType m_dataType;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_dateTimeFormat	Utils/easylogging++.h	/^    std::string m_dateTimeFormat;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_defaultConfigurations	Utils/easylogging++.h	/^    Configurations m_defaultConfigurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
m_defaultLogBuilder	Utils/easylogging++.h	/^    LogBuilderPtr m_defaultLogBuilder;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
m_demangled	Utils/easylogging++.h	/^        std::string m_demangled;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_dispatchAction	Utils/easylogging++.h	/^    base::DispatchAction m_dispatchAction;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
m_dispatchAction	Utils/easylogging++.h	/^    base::DispatchAction m_dispatchAction;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::LogDispatcher
m_dispatchData	Utils/easylogging++.h	/^    LogDispatchData m_dispatchData;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
m_enabled	Utils/easylogging++.h	/^    bool m_enabled;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
m_enabledMap	Utils/easylogging++.h	/^    std::map<Level, bool> m_enabledMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_file	Utils/easylogging++.h	/^    const char* m_file;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_file	Utils/easylogging++.h	/^    std::string m_file;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_fileStreamMap	Utils/easylogging++.h	/^    std::map<Level, base::FileStreamPtr> m_fileStreamMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_filename	Utils/easylogging++.h	/^        const char* m_filename;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
m_filename	Utils/easylogging++.h	/^    const char* m_filename;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
m_filenameMap	Utils/easylogging++.h	/^    std::map<Level, std::string> m_filenameMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_firstCheckpoint	Utils/easylogging++.h	/^    bool m_firstCheckpoint;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_flag	Utils/easylogging++.h	/^        LoggingFlag m_flag;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedAddFlag
m_flag	Utils/easylogging++.h	/^        LoggingFlag m_flag;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedRemoveFlag
m_flags	Utils/easylogging++.h	/^    base::type::EnumType m_flags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_flags	Utils/easylogging++.h	/^    base::type::EnumType m_flags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_format	Utils/easylogging++.h	/^    base::type::string_t m_format;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_formatSpecifier	Utils/easylogging++.h	/^    const char* m_formatSpecifier;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
m_formattedTimeTaken	Utils/easylogging++.h	/^    base::type::string_t m_formattedTimeTaken;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_func	Utils/easylogging++.h	/^    const char* m_func;    $/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_func	Utils/easylogging++.h	/^    std::string m_func;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_handler	Utils/easylogging++.h	/^    Handler m_handler;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
m_hex	Utils/easylogging++.h	/^        std::string m_hex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_hitCounts	Utils/easylogging++.h	/^    std::size_t m_hitCounts;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
m_id	Utils/easylogging++.h	/^    std::string m_id;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_index	Utils/easylogging++.h	/^        std::size_t m_index;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_isConfigured	Utils/easylogging++.h	/^    bool m_isConfigured;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_isFromFile	Utils/easylogging++.h	/^    bool m_isFromFile;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
m_level	Utils/easylogging++.h	/^        Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
m_level	Utils/easylogging++.h	/^    Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
m_level	Utils/easylogging++.h	/^    Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_level	Utils/easylogging++.h	/^    Level m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_level	Utils/easylogging++.h	/^    base::type::VerboseLevel m_level;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
m_line	Utils/easylogging++.h	/^    unsigned long int m_line;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_line	Utils/easylogging++.h	/^    unsigned long int m_line;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_lineNumber	Utils/easylogging++.h	/^        unsigned long int m_lineNumber;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
m_lineNumber	Utils/easylogging++.h	/^    unsigned long int m_lineNumber;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
m_list	Utils/easylogging++.h	/^    Container m_list;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
m_location	Utils/easylogging++.h	/^        std::string m_location;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
m_logBuilder	Utils/easylogging++.h	/^    LogBuilderPtr m_logBuilder;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_logDispatchCallbacks	Utils/easylogging++.h	/^    std::map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_logFlushThresholdMap	Utils/easylogging++.h	/^    std::map<Level, std::size_t> m_logFlushThresholdMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_logFormatMap	Utils/easylogging++.h	/^    std::map<Level, base::LogFormat> m_logFormatMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_logLine	Utils/easylogging++.h	/^    base::type::string_t m_logLine;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
m_logMessage	Utils/easylogging++.h	/^    LogMessage m_logMessage;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
m_logMessage	Utils/easylogging++.h	/^    LogMessage m_logMessage;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::LogDispatcher
m_logMessage	Utils/easylogging++.h	/^    LogMessage* m_logMessage;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
m_logStreamsReference	Utils/easylogging++.h	/^    base::LogStreamsReferenceMap m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
m_logStreamsReference	Utils/easylogging++.h	/^    base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_logStreamsReference	Utils/easylogging++.h	/^    base::LogStreamsReferenceMap* m_logStreamsReference;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_logger	Utils/easylogging++.h	/^    Logger* m_logger;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_logger	Utils/easylogging++.h	/^    Logger* m_logger;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
m_loggingLevel	Utils/easylogging++.h	/^    Level m_loggingLevel;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_maxLogFileSizeMap	Utils/easylogging++.h	/^    std::map<Level, std::size_t> m_maxLogFileSizeMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_message	Utils/easylogging++.h	/^    base::type::string_t m_message;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_millisecondsWidthMap	Utils/easylogging++.h	/^    std::map<Level, base::MillisecondsWidth> m_millisecondsWidthMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_modules	Utils/easylogging++.h	/^    std::map<std::string, base::type::VerboseLevel> m_modules;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
m_mutex	Utils/easylogging++.h	/^    M* m_mutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
m_mutex	Utils/easylogging++.h	/^    base::threading::Mutex m_mutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
m_offset	Utils/easylogging++.h	/^    int m_width; unsigned int m_offset;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
m_pFlags	Utils/easylogging++.h	/^    base::type::EnumType* m_pFlags;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
m_params	Utils/easylogging++.h	/^    std::vector<std::string> m_params;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_paramsWithValue	Utils/easylogging++.h	/^    std::map<std::string, std::string> m_paramsWithValue;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
m_parentApplicationName	Utils/easylogging++.h	/^    std::string m_parentApplicationName;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_performanceTracker	Utils/easylogging++.h	/^    base::PerformanceTracker* m_performanceTracker;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
m_performanceTrackingCallbacks	Utils/easylogging++.h	/^    std::map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrackingCallbacks;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_performanceTrackingMap	Utils/easylogging++.h	/^    std::map<Level, bool> m_performanceTrackingMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_preRollOutCallback	Utils/easylogging++.h	/^    PreRollOutCallback m_preRollOutCallback;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_proceed	Utils/easylogging++.h	/^    bool m_proceed;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::LogDispatcher
m_queue	Utils/easylogging++.h	/^    std::queue<AsyncLogItem> m_queue;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogQueue
m_registeredHitCounters	Utils/easylogging++.h	/^    base::RegisteredHitCounters* m_registeredHitCounters;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_registeredLoggers	Utils/easylogging++.h	/^    base::RegisteredLoggers* m_registeredLoggers;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_resolver	Utils/easylogging++.h	/^    FormatSpecifierValueResolver m_resolver;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
m_stack	Utils/easylogging++.h	/^    std::vector<StackTraceEntry> m_stack;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
m_stream	Utils/easylogging++.h	/^    base::type::stringstream_t m_stream;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_toFileMap	Utils/easylogging++.h	/^    std::map<Level, bool> m_toFileMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_toStandardOutputMap	Utils/easylogging++.h	/^    std::map<Level, bool> m_toStandardOutputMap;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
m_typedConfigurations	Utils/easylogging++.h	/^    base::TypedConfigurations* m_typedConfigurations;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_underlyingMutex	Utils/easylogging++.h	/^    CRITICAL_SECTION m_underlyingMutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_underlyingMutex	Utils/easylogging++.h	/^    pthread_mutex_t m_underlyingMutex;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
m_unflushedCount	Utils/easylogging++.h	/^    std::map<Level, unsigned int> m_unflushedCount;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
m_userFormat	Utils/easylogging++.h	/^    base::type::string_t m_userFormat;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
m_vRegistry	Utils/easylogging++.h	/^    base::VRegistry* m_vRegistry;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
m_value	Utils/easylogging++.h	/^    std::string m_value;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
m_verboseLevel	Utils/easylogging++.h	/^    base::type::VerboseLevel m_verboseLevel;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
m_width	Utils/easylogging++.h	/^    int m_width; unsigned int m_offset;$/;"	m	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
maxLogFileSize	Utils/easylogging++.h	/^    inline std::size_t maxLogFileSize(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
message	Utils/easylogging++.h	/^    inline const base::type::string_t& message(void) const { return m_message; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
millisecondsWidth	Utils/easylogging++.h	/^    inline const base::MillisecondsWidth& millisecondsWidth(Level level = Level::Global) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
modules	Utils/easylogging++.h	/^    inline const std::map<std::string, base::type::VerboseLevel>& modules(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
msleep	Utils/easylogging++.h	/^static inline void msleep(int) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading
name	Utils/easylogging++.h	/^        const char* name;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon7
newFileStream	Utils/easylogging++.h	/^    static base::type::fstream_t* newFileStream(const std::string& filename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
next	Utils/easylogging++.h	/^    inline AsyncLogItem next(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogQueue
numb	Utils/easylogging++.h	/^        int numb;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon7
operator !=	Utils/easylogging++.h	/^    bool operator!=(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
operator ()	Utils/easylogging++.h	/^        inline bool operator()(const Configuration* conf) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration::Predicate
operator ()	Utils/easylogging++.h	/^        inline bool operator()(const HitCounter* counter) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter::Predicate
operator <<	Utils/easylogging++.h	/^        friend std::ostream& operator<<(std::ostream& ss, const StackTraceEntry& si) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::StackTraceEntry
operator <<	Utils/easylogging++.h	/^    friend inline base::type::ostream_t& operator<<(base::type::ostream_t& os, const RegistryWithPred& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
operator <<	Utils/easylogging++.h	/^    friend inline el::base::type::ostream_t& operator<<(el::base::type::ostream_t& os, const Loggable& loggable) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Loggable
operator <<	Utils/easylogging++.h	/^    friend inline std::ostream& operator<<(std::ostream& os, const StackTrace& st) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(QChar msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QByteArray& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QHash<K, V>& hash_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QLatin1String& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QMap<K, V>& map_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QMultiHash<K, V>& multiHash_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QMultiMap<K, V>& map_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QPair<First, Second>& pair_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QString& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const QStringRef& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::array<T, Size>& array) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::bitset<Size>& bitset_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::pair<First, Second>& pair_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::priority_queue<T, Container, Comparator>& priorityQueue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::queue<T, Container>& queue_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::stack<T, Container>& stack_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::string& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const std::wstring& msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(const wchar_t* msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(qint64 msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline MessageBuilder& operator<<(quint64 msg) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
operator <<	Utils/easylogging++.h	/^    inline NullWriter& operator<<(const T&) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::NullWriter
operator <<	Utils/easylogging++.h	/^    inline NullWriter& operator<<(std::ostream& (*)(std::ostream&)) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::NullWriter
operator <<	Utils/easylogging++.h	/^    inline Writer& operator<<(const T& log) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Writer
operator <<	Utils/easylogging++.h	/^    inline friend base::type::ostream_t& operator<<(base::type::ostream_t& os, const CommandLineArgs& c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
operator =	Utils/easylogging++.h	/^    AbstractRegistry& operator=(AbstractRegistry&& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
operator =	Utils/easylogging++.h	/^    Configuration& operator=(const Configuration& c) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
operator =	Utils/easylogging++.h	/^    HitCounter& operator=(const HitCounter& hitCounter) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
operator =	Utils/easylogging++.h	/^    LogFormat& operator=(const LogFormat& logFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
operator =	Utils/easylogging++.h	/^    Logger& operator=(const Logger& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
operator =	Utils/easylogging++.h	/^    Registry& operator=(const Registry& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
operator =	Utils/easylogging++.h	/^    RegistryWithPred& operator=(const RegistryWithPred& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
operator ==	Utils/easylogging++.h	/^    bool operator==(const AbstractRegistry<T_Ptr, Container>& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
operator ==	Utils/easylogging++.h	/^    bool operator==(const MillisecondsWidth& msWidth) { return m_width == msWidth.m_width && m_offset == msWidth.m_offset; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::MillisecondsWidth
operator ==	Utils/easylogging++.h	/^    inline bool operator==(const LogFormat& other) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
operator ==	Utils/easylogging++.h	/^    inline bool operator==(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
ostream_t	Utils/easylogging++.h	/^typedef std::wostream ostream_t;$/;"	t	namespace:el::base::type
parentApplicationName	Utils/easylogging++.h	/^    inline const std::string& parentApplicationName(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
parseFromFile	Utils/easylogging++.h	/^        static bool parseFromFile(const std::string& configurationFile, Configurations* sender, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
parseFromFile	Utils/easylogging++.h	/^    inline bool parseFromFile(const std::string& configurationFile, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
parseFromFormat	Utils/easylogging++.h	/^    void parseFromFormat(const base::type::string_t& userFormat) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
parseFromText	Utils/easylogging++.h	/^        static bool parseFromText(const std::string& configurationsString, Configurations* sender, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
parseFromText	Utils/easylogging++.h	/^    inline bool parseFromText(const std::string& configurationsString, Configurations* base = nullptr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
parseLine	Utils/easylogging++.h	/^        static bool parseLine(std::string* line, std::string* currConfigStr, std::string* currLevelStr, Level* currLevel, Configurations* conf) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations::Parser
pathExists	Utils/easylogging++.h	/^    static inline bool pathExists(const char* path, bool considerFile = false) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File
performanceTracker	Utils/easylogging++.h	/^    inline const base::PerformanceTracker* performanceTracker(void) const { return m_performanceTracker; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::DataType
performanceTracking	Utils/easylogging++.h	/^    inline bool performanceTracking(Level level = Level::Global) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
performanceTrackingCallback	Utils/easylogging++.h	/^    inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
performanceTrackingCallback	Utils/easylogging++.h	/^    static inline T* performanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
pop	Utils/easylogging++.h	/^    inline void pop(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogQueue
populateAllLoggerIds	Utils/easylogging++.h	/^    static inline std::vector<std::string>* populateAllLoggerIds(std::vector<std::string>* targetList) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
preRollOutCallback	Utils/easylogging++.h	/^    inline PreRollOutCallback& preRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
push	Utils/easylogging++.h	/^    inline void push(const AsyncLogItem& item) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogQueue
reconfigure	Utils/easylogging++.h	/^    inline void reconfigure(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
reconfigureAllLoggers	Utils/easylogging++.h	/^    static inline void reconfigureAllLoggers(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureAllLoggers	Utils/easylogging++.h	/^    static inline void reconfigureAllLoggers(Level level, ConfigurationType configurationType, $/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureAllLoggers	Utils/easylogging++.h	/^    static inline void reconfigureAllLoggers(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureLogger	Utils/easylogging++.h	/^    static inline Logger* reconfigureLogger(Logger* logger, const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureLogger	Utils/easylogging++.h	/^    static inline Logger* reconfigureLogger(const std::string& identity, ConfigurationType configurationType,$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
reconfigureLogger	Utils/easylogging++.h	/^    static inline Logger* reconfigureLogger(const std::string& identity, const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
registeredLoggers	Utils/easylogging++.h	/^    inline base::RegisteredLoggers* registeredLoggers(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
reinitDeepCopy	Utils/easylogging++.h	/^    void reinitDeepCopy(const AbstractRegistry<T_Ptr, Container>& sr) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
releaseDate	Utils/easylogging++.h	/^    static inline const std::string releaseDate(void) { return std::string("08-01-2015 0850hrs"); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::VersionInfo
remove	Utils/easylogging++.h	/^    bool remove(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
removeFlag	Utils/easylogging++.h	/^    inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
removeFlag	Utils/easylogging++.h	/^    static inline void removeFlag(LoggingFlag flag) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
removeFlag	Utils/easylogging++.h	/^static inline void removeFlag(Enum e, base::type::EnumType* flag) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
replaceAll	Utils/easylogging++.h	/^    static inline std::string& replaceAll(std::string& str, char replaceWhat, char replaceWith) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
replaceAll	Utils/easylogging++.h	/^    static inline std::string& replaceAll(std::string& str, const std::string& replaceWhat, \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
replaceFirstWithEscape	Utils/easylogging++.h	/^    static void replaceFirstWithEscape(base::type::string_t& str, const base::type::string_t& replaceWhat, \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
resetLocation	Utils/easylogging++.h	/^    inline void resetLocation(const char* filename, unsigned long int lineNumber) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
resolveFilename	Utils/easylogging++.h	/^    std::string resolveFilename(const std::string& filename) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
resolveLoggerFormatSpec	Utils/easylogging++.h	/^    void resolveLoggerFormatSpec(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
resolver	Utils/easylogging++.h	/^    inline const FormatSpecifierValueResolver& resolver(void) const { return m_resolver; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::CustomFormatSpecifier
rtrim	Utils/easylogging++.h	/^    static inline std::string& rtrim(std::string& str) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
safeDelete	Utils/easylogging++.h	/^safeDelete(T*& pointer) {$/;"	f	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils
set	Utils/easylogging++.h	/^    inline void set(Configuration* conf) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
set	Utils/easylogging++.h	/^    inline void set(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setApplicationArguments	Utils/easylogging++.h	/^    void setApplicationArguments(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setArgs	Utils/easylogging++.h	/^    inline void setArgs(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
setArgs	Utils/easylogging++.h	/^    inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
setArgs	Utils/easylogging++.h	/^    static inline void setArgs(int argc, char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setArgs	Utils/easylogging++.h	/^    static inline void setArgs(int argc, const char** argv) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setCrashHandler	Utils/easylogging++.h	/^    static inline void setCrashHandler(const el::base::debug::CrashHandler::Handler& crashHandler) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setDefaultConfigurations	Utils/easylogging++.h	/^    inline void setDefaultConfigurations(const Configurations& configurations) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
setDefaultConfigurations	Utils/easylogging++.h	/^    static inline void setDefaultConfigurations(const Configurations& configurations, bool reconfigureExistingLoggers = false) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
setDispatchAction	Utils/easylogging++.h	/^    inline void setDispatchAction(base::DispatchAction dispatchAction) { m_dispatchAction = dispatchAction; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
setEnabled	Utils/easylogging++.h	/^    inline void setEnabled(bool enabled) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Callback
setFlags	Utils/easylogging++.h	/^    inline void setFlags(base::type::EnumType flags) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setFromArgs	Utils/easylogging++.h	/^    void setFromArgs(const base::utils::CommandLineArgs* commandLineArgs) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
setFromBase	Utils/easylogging++.h	/^    inline void setFromBase(Configurations* base) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setGlobally	Utils/easylogging++.h	/^    inline void setGlobally(ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setGlobally	Utils/easylogging++.h	/^    void setGlobally(ConfigurationType configurationType, const std::string& value, bool includeGlobalLevel) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setHandler	Utils/easylogging++.h	/^    void setHandler(const Handler& cHandler) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace::CrashHandler
setLevel	Utils/easylogging++.h	/^    inline void setLevel(base::type::VerboseLevel level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
setLogBuilder	Utils/easylogging++.h	/^    inline void setLogBuilder(const LogBuilderPtr& logBuilder) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
setLogMessage	Utils/easylogging++.h	/^    inline void setLogMessage(LogMessage* logMessage) { m_logMessage = logMessage; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogDispatchData
setLoggingLevel	Utils/easylogging++.h	/^    inline void setLoggingLevel(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setLoggingLevel	Utils/easylogging++.h	/^    static inline void setLoggingLevel(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
setModules	Utils/easylogging++.h	/^    void setModules(const char* modules) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
setParentApplicationName	Utils/easylogging++.h	/^    inline void setParentApplicationName(const std::string& parentApplicationName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
setPreRollOutCallback	Utils/easylogging++.h	/^    inline void setPreRollOutCallback(const PreRollOutCallback& callback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
setRemainingToDefault	Utils/easylogging++.h	/^    void setRemainingToDefault(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setStorage	Utils/easylogging++.h	/^    static inline void setStorage(base::type::StoragePointer storage) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
setToDefault	Utils/easylogging++.h	/^    void setToDefault(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
setVModules	Utils/easylogging++.h	/^    static inline void setVModules(const char* modules) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
setValue	Utils/easylogging++.h	/^    inline void setValue(const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
setValue	Utils/easylogging++.h	/^    void setValue(Level level, const Conf_T& value, std::map<Level, Conf_T>* confMap, bool includeGlobalLevel = true) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
setVerboseLevel	Utils/easylogging++.h	/^    static inline void setVerboseLevel(base::type::VerboseLevel level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
size	Utils/easylogging++.h	/^    inline std::size_t size(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
start	Utils/easylogging++.h	/^    virtual inline void start() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::AsyncDispatchWorker
startTime	Utils/easylogging++.h	/^inline const struct timeval* PerformanceTrackingData::startTime() const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::PerformanceTrackingData
startsWith	Utils/easylogging++.h	/^    static inline bool startsWith(const std::string& str, const std::string& start) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
storage	Utils/easylogging++.h	/^    static inline base::type::StoragePointer storage() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
stream	Utils/easylogging++.h	/^    inline base::type::stringstream_t& stream(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
string_t	Utils/easylogging++.h	/^typedef std::wstring string_t;$/;"	t	namespace:el::base::type
stringstream_t	Utils/easylogging++.h	/^typedef std::wstringstream stringstream_t;$/;"	t	namespace:el::base::type
threading	Utils/easylogging++.h	/^namespace threading {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
toFile	Utils/easylogging++.h	/^    inline bool toFile(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
toStandardOutput	Utils/easylogging++.h	/^    inline bool toStandardOutput(Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
toUpper	Utils/easylogging++.h	/^    static inline std::string& toUpper(std::string& str) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
trim	Utils/easylogging++.h	/^    static inline std::string& trim(std::string& str) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
try_lock	Utils/easylogging++.h	/^    inline bool try_lock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
type	Utils/easylogging++.h	/^namespace type {$/;"	n	namespace:el::base
typedConfigurations	Utils/easylogging++.h	/^    inline base::TypedConfigurations* typedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
uninstallCustomFormatSpecifier	Utils/easylogging++.h	/^    inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
uninstallCustomFormatSpecifier	Utils/easylogging++.h	/^    static inline bool uninstallCustomFormatSpecifier(const char* formatSpecifier) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
uninstallLogDispatchCallback	Utils/easylogging++.h	/^    inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
uninstallLogDispatchCallback	Utils/easylogging++.h	/^    static inline void uninstallLogDispatchCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
uninstallPerformanceTrackingCallback	Utils/easylogging++.h	/^    inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
uninstallPerformanceTrackingCallback	Utils/easylogging++.h	/^    static inline void uninstallPerformanceTrackingCallback(const std::string& id) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
uninstallPreRollOutCallback	Utils/easylogging++.h	/^    static inline void uninstallPreRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
unit	Utils/easylogging++.h	/^        const base::type::char_t* unit;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon6
unlock	Utils/easylogging++.h	/^    inline void unlock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
unregister	Utils/easylogging++.h	/^    inline void unregister(Logger*& logger) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
unregister	Utils/easylogging++.h	/^    inline void unregister(const T_Key& uniqKey) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
unregisterLogger	Utils/easylogging++.h	/^    static inline bool unregisterLogger(const std::string& identity) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
unsafeGetConfigByRef	Utils/easylogging++.h	/^    inline Conf_T& unsafeGetConfigByRef(Level level, std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
unsafeGetConfigByVal	Utils/easylogging++.h	/^    inline Conf_T unsafeGetConfigByVal(Level level, const std::map<Level, Conf_T>* confMap, const char* confName) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
unsafeSet	Utils/easylogging++.h	/^    void unsafeSet(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
unsafeSetGlobally	Utils/easylogging++.h	/^    void unsafeSetGlobally(ConfigurationType configurationType, const std::string& value, bool includeGlobalLevel) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
unsafeSetIfNotExist	Utils/easylogging++.h	/^    void unsafeSetIfNotExist(Level level, ConfigurationType configurationType, const std::string& value) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
unsafeValidateFileRolling	Utils/easylogging++.h	/^    bool unsafeValidateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
unsetPreRollOutCallback	Utils/easylogging++.h	/^    inline void unsetPreRollOutCallback(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
userFormat	Utils/easylogging++.h	/^    inline const base::type::string_t& userFormat(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
utils	Utils/easylogging++.h	/^namespace utils {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags
utils	Utils/easylogging++.h	/^namespace utils {$/;"	n	namespace:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::el::base
vModulesEnabled	Utils/easylogging++.h	/^    inline bool vModulesEnabled(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::VRegistry
vRegistry	Utils/easylogging++.h	/^    inline base::VRegistry* vRegistry(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
validateAfterN	Utils/easylogging++.h	/^    bool validateAfterN(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
validateAfterNCounter	Utils/easylogging++.h	/^    inline bool validateAfterNCounter(const char* filename, unsigned long int lineNumber, std::size_t n) { \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
validateEveryN	Utils/easylogging++.h	/^    bool validateEveryN(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
validateEveryNCounter	Utils/easylogging++.h	/^    inline bool validateEveryNCounter(const char* filename, unsigned long int lineNumber, std::size_t occasion) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
validateFileRolling	Utils/easylogging++.h	/^    bool validateFileRolling(Level level, const PreRollOutCallback& PreRollOutCallback) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
validateFileRolling	Utils/easylogging++.h	/^    static inline void validateFileRolling(Logger* logger, Level level) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Helpers
validateHitCounts	Utils/easylogging++.h	/^    inline void validateHitCounts(std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
validateNTimes	Utils/easylogging++.h	/^    bool validateNTimes(const char* filename, unsigned long int lineNumber, std::size_t n) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::RegisteredHitCounters
validateNTimesCounter	Utils/easylogging++.h	/^    inline bool validateNTimesCounter(const char* filename, unsigned long int lineNumber, std::size_t n) { \/\/ NOLINT$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
value	Utils/easylogging++.h	/^        double value;$/;"	m	struct:el::Level::ConfigurationType::LoggingFlag::base::consts::__anon6
value	Utils/easylogging++.h	/^    inline const std::string& value(void) const {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
verbose	Utils/easylogging++.h	/^    inline void Logger::verbose(int vlevel, const T& log) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
verbose	Utils/easylogging++.h	/^    inline void Logger::verbose(int vlevel, const char* s, const T& value, const Args&... args) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
verbose	Utils/easylogging++.h	/^    inline void Logger::verbose(int, const T&) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
verbose	Utils/easylogging++.h	/^    inline void Logger::verbose(int, const char*, const T&, const Args&...) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Logger
verboseLevel	Utils/easylogging++.h	/^    inline base::type::VerboseLevel verboseLevel(void) const { return m_verboseLevel; }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogMessage
verboseLevel	Utils/easylogging++.h	/^    static inline base::type::VerboseLevel verboseLevel(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers
version	Utils/easylogging++.h	/^    static inline const std::string version(void) { return std::string("9.80"); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::VersionInfo
wcharPtrToCharPtr	Utils/easylogging++.h	/^    static char* wcharPtrToCharPtr(const wchar_t* line) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
wildCardMatch	Utils/easylogging++.h	/^    static bool wildCardMatch(const char* str, const char* pattern) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Str
workarounds	Utils/easylogging++.h	/^namespace workarounds {$/;"	n	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder
writeIterator	Utils/easylogging++.h	/^    inline MessageBuilder& writeIterator(Iterator begin_, Iterator end_, std::size_t size_) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::MessageBuilder
~AbstractRegistry	Utils/easylogging++.h	/^    virtual ~AbstractRegistry(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::AbstractRegistry
~AsyncDispatchWorker	Utils/easylogging++.h	/^    virtual ~AsyncDispatchWorker() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::AsyncDispatchWorker
~AsyncLogItem	Utils/easylogging++.h	/^    virtual ~AsyncLogItem() {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogItem
~AsyncLogQueue	Utils/easylogging++.h	/^    virtual ~AsyncLogQueue() {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::AsyncLogQueue
~CommandLineArgs	Utils/easylogging++.h	/^    virtual ~CommandLineArgs(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::CommandLineArgs
~Configuration	Utils/easylogging++.h	/^    virtual ~Configuration(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configuration
~Configurations	Utils/easylogging++.h	/^    virtual ~Configurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Configurations
~HitCounter	Utils/easylogging++.h	/^    virtual ~HitCounter(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::HitCounter
~IWorker	Utils/easylogging++.h	/^    virtual ~IWorker() {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::IWorker
~IterableContainer	Utils/easylogging++.h	/^    virtual ~IterableContainer(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::workarounds::IterableContainer
~LogBuilder	Utils/easylogging++.h	/^    virtual ~LogBuilder(void) { ELPP_INTERNAL_INFO(3, "Destroying log builder...")}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogBuilder
~LogFormat	Utils/easylogging++.h	/^    virtual ~LogFormat(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::LogFormat
~Loggable	Utils/easylogging++.h	/^    virtual ~Loggable(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::Loggable
~Logger	Utils/easylogging++.h	/^    virtual ~Logger(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::Logger
~Mutex	Utils/easylogging++.h	/^    virtual ~Mutex(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::Mutex
~PErrorWriter	Utils/easylogging++.h	/^    virtual ~PErrorWriter(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Writer::PErrorWriter
~RegisteredLoggers	Utils/easylogging++.h	/^    virtual ~RegisteredLoggers(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::RegisteredLoggers
~Registry	Utils/easylogging++.h	/^    virtual ~Registry(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::Registry
~RegistryWithPred	Utils/easylogging++.h	/^    virtual ~RegistryWithPred(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::OS::DateTime::RegistryWithPred
~ScopedAddFlag	Utils/easylogging++.h	/^        ~ScopedAddFlag(void) { Loggers::removeFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedAddFlag
~ScopedLock	Utils/easylogging++.h	/^    virtual ~ScopedLock(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::internal::ScopedLock
~ScopedRemoveFlag	Utils/easylogging++.h	/^        ~ScopedRemoveFlag(void) { Loggers::addFlag(m_flag); }$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::Loggers::ScopedRemoveFlag
~StackTrace	Utils/easylogging++.h	/^    virtual ~StackTrace(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::debug::StackTrace
~Storage	Utils/easylogging++.h	/^    virtual ~Storage(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage
~SysLogInitializer	Utils/easylogging++.h	/^    virtual ~SysLogInitializer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::PerformanceTrackingData::base::base::SysLogInitializer
~ThreadSafe	Utils/easylogging++.h	/^    virtual ~ThreadSafe(void) {}$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::threading::ThreadSafe
~TypedConfigurations	Utils/easylogging++.h	/^    virtual ~TypedConfigurations(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::TypedConfigurations
~Writer	Utils/easylogging++.h	/^    virtual ~Writer(void) {$/;"	f	class:el::Level::ConfigurationType::LoggingFlag::base::TimestampUnit::FormatFlags::utils::File::base::base::Storage::DefaultLogDispatchCallback::base::DefaultLogBuilder::Writer
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
